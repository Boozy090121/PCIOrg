// UI Components and Interactions
ui: {
  // Initialize the application
  init() {
    try {
      console.log('Initializing UI...');
      
      // Create a global variable for handling charts
      window.chartFailed = false;
      if (typeof Chart === 'undefined') {
        console.warn('Chart.js is not loaded, charts will be disabled');
        window.chartFailed = true;
      }
      
      // Use existing config or set up default
      window.config = window.config || {
        tabs: [
          { id: 'dashboard', label: 'Dashboard', icon: 'fa-chart-line' },
          { id: 'teams', label: 'Teams', icon: 'fa-users' },
          { id: 'personnel', label: 'Personnel', icon: 'fa-user' },
          { id: 'documentation', label: 'Documentation', icon: 'fa-file-alt' },
          { id: 'planning', label: 'Planning', icon: 'fa-project-diagram' },
          { id: 'orgchart', label: 'Org Chart', icon: 'fa-sitemap' },
          { id: 'rolematrix', label: 'Role Matrix', icon: 'fa-th' },
          { id: 'skillsmatrix', label: 'Skills Matrix', icon: 'fa-cubes' },
          { id: 'racimatrix', label: 'RACI Matrix', icon: 'fa-list-alt' }
        ],
        colors: {
          bbv: '#00518A',     // BBV blue
          add: '#CC2030',     // ADD red
          arb: '#4F46E5',     // ARB purple
          shared: '#232323',  // Shared black
          root: '#333333'     // Root color for org chart
        }
      };
      
      // Use the appData from app.js rather than initializing redundant data
      if (!window.appData) {
        console.error('appData not initialized - this should be done in app.js');
        window.appData = {}; // Create empty object as fallback
      }
      
      // Set up tabs first - do this before other setup
      if (typeof this.setupTabs === 'function') {
        try {
          this.setupTabs();
        } catch (error) {
          console.error('Error in setupTabs:', error);
          
          // Create fallback tabs directly
          this.createFallbackTabs();
        }
      } else {
        console.error('setupTabs method not found');
        throw new Error('Required UI methods are missing');
      }
      
      // Set up login state
      this.updateLoginState();
      
      // Hide login button completely
      const loginBtn = document.getElementById('loginBtn');
      if (loginBtn) {
        loginBtn.style.display = 'none';
      }
      
      // Set up scroll-to-top button
      this.setupScrollToTop();
      
      // Set up save changes button
      this.setupSaveChangesButton();
      
      console.log('UI initialization complete');
    } catch (error) {
      console.error('Critical error in UI initialization:', error);
      // Attempt recovery through fix-critical.js
    }
  },
  
  // Create fallback tabs when setupTabs fails
  createFallbackTabs() {
    console.warn('Setting up fallback tabs due to setupTabs error');
    const tabList = document.getElementById('tabList');
    if (tabList) {
      // Make sure we have the config with all tabs
      const tabsConfig = window.config && window.config.tabs ? window.config.tabs : [
        { id: 'dashboard', label: 'Dashboard', icon: 'fa-chart-line' },
        { id: 'teams', label: 'Teams', icon: 'fa-users' },
        { id: 'personnel', label: 'Personnel', icon: 'fa-user' },
        { id: 'documentation', label: 'Documentation', icon: 'fa-file-alt' },
        { id: 'planning', label: 'Planning', icon: 'fa-project-diagram' },
        { id: 'orgchart', label: 'Org Chart', icon: 'fa-sitemap' },
        { id: 'rolematrix', label: 'Role Matrix', icon: 'fa-th' },
        { id: 'skillsmatrix', label: 'Skills Matrix', icon: 'fa-cubes' },
        { id: 'racimatrix', label: 'RACI Matrix', icon: 'fa-list-alt' }
      ];
      
      // Create tab buttons
      let tabsHTML = '';
      tabsConfig.forEach((tab, index) => {
        tabsHTML += `
          <button class="tab-btn ${index === 0 ? 'active' : ''}" 
                id="tab-${tab.id}" 
                data-tab="${tab.id}" 
                role="tab" 
                aria-selected="${index === 0 ? 'true' : 'false'}" 
                aria-controls="panel-${tab.id}">
            <i class="fas ${tab.icon}" aria-hidden="true"></i>
            <span>${tab.label}</span>
          </button>
        `;
      });
      tabList.innerHTML = tabsHTML;
      
      // Add basic click handlers
      const btns = tabList.querySelectorAll('.tab-btn');
      btns.forEach(btn => {
        btn.addEventListener('click', () => {
          const tabId = btn.getAttribute('data-tab');
          // Update active state on all buttons
          btns.forEach(b => {
            b.classList.toggle('active', b === btn);
            b.setAttribute('aria-selected', b === btn ? 'true' : 'false');
          });
          // Try to switch tab
          this.switchTab(tabId);
        });
      });
    }
  },

  // Set up tabs
  setupTabs() {
    const tabList = document.getElementById('tabList');
    if (!tabList) return;

    // Create tab buttons
    tabList.innerHTML = config.tabs.map((tab, index) => `
      <button class="tab-btn" 
             id="tab-${tab.id}" 
             data-tab="${tab.id}" 
             role="tab" 
             aria-selected="${index === 0 ? 'true' : 'false'}" 
             aria-controls="panel-${tab.id}">
        <i class="fas ${tab.icon}" aria-hidden="true"></i>
        <span>${tab.label}</span>
      </button>
    `).join('');

    // Add click handlers
    const tabButtons = tabList.querySelectorAll('.tab-btn');
    tabButtons.forEach(button => {
      button.addEventListener('click', () => {
        const tabId = button.getAttribute('data-tab');
        this.switchTab(tabId);
      });
      
      // Add keyboard navigation for accessibility
      button.addEventListener('keydown', (e) => {
        const tabs = Array.from(tabList.querySelectorAll('.tab-btn'));
        const index = tabs.indexOf(button);
        
        // Handle arrow key navigation
        if (e.key === 'ArrowRight' || e.key === 'ArrowDown') {
          e.preventDefault();
          const nextIndex = (index + 1) % tabs.length;
          tabs[nextIndex].focus();
        } else if (e.key === 'ArrowLeft' || e.key === 'ArrowUp') {
          e.preventDefault();
          const prevIndex = (index - 1 + tabs.length) % tabs.length;
          tabs[prevIndex].focus();
        } else if (e.key === 'Home') {
          e.preventDefault();
          tabs[0].focus();
        } else if (e.key === 'End') {
          e.preventDefault();
          tabs[tabs.length - 1].focus();
        }
      });
    });
  },

  // Switch to a different tab
  switchTab(tabId) {
    try {
      console.log(`Switching to tab: ${tabId}`);
      
      // Validate tabId to prevent security issues and errors
      if (!tabId || typeof tabId !== 'string') {
        console.error('Invalid tabId:', tabId);
        this.showToast('Invalid tab selection', 'error');
        return;
      }
      
      // Sanitize tabId by using a whitelist approach instead of regex
      const validTabs = (window.config && window.config.tabs) ? 
        window.config.tabs.map(tab => tab.id) : 
        ['dashboard', 'teams', 'personnel', 'documentation', 'planning', 'orgchart', 'rolematrix', 'skillsmatrix', 'analytics', 'racimatrix'];
      
      if (!validTabs.includes(tabId)) {
        console.error(`Invalid tabId: ${tabId} not in allowed list`);
        this.showToast('Invalid tab selection', 'error');
        return;
      }
      
      // Get the tab content element
      const tabContent = document.getElementById('tabContent');
      if (!tabContent) {
        console.error('Tab content element not found');
        this.showToast('Error loading content: Tab container not found', 'error');
        return;
      }
      
      // Update active tab buttons
      this.updateActiveTab(tabId);
      
      // Update application state
      if (window.appData && window.appData.state) {
        window.appData.state.currentTab = tabId;
      }
      
      // Show loading indicator
      tabContent.innerHTML = `
        <div class="tab-loading">
          <div class="loader-spinner"></div>
          <p>Loading ${this.sanitizeHtml(tabId)} content...</p>
        </div>
      `;
      
      // Use a switch statement to call the appropriate loading function
      switch (tabId) {
        case 'dashboard':
          this.loadDashboard();
          break;
        case 'teams':
          this.loadTeams();
          break;
        case 'personnel':
          this.loadPersonnel();
          break;
        case 'documentation':
          this.loadDocumentation();
          break;
        case 'planning':
          this.loadPlanning();
          break;
        case 'orgchart':
          this.loadOrgChart();
          break;
        case 'rolematrix':
          this.loadRoleMatrix();
          break;
        case 'skillsmatrix':
          this.loadSkillsMatrix();
          break;
        case 'analytics':
          this.loadAnalyticsDashboard();
          break;
        case 'racimatrix':
          this.loadRaciMatrix();
          break;
        default:
          console.error(`No loader found for tab: ${tabId}`);
          this.showToast(`Error: Content for ${this.sanitizeHtml(tabId)} not available`, 'error');
      }
    } catch (error) {
      console.error('Error switching tabs:', error);
      this.showToast('An error occurred while switching tabs', 'error');
      
      // Try recovery options
      const tabContent = document.getElementById('tabContent');
      if (tabContent) {
        tabContent.innerHTML = `
          <div class="error-container">
            <h2>Error Loading Content</h2>
            <p>There was a problem loading the requested content.</p>
            <button class="btn btn-primary" onclick="window.ui.switchTab('dashboard')">
              Return to Dashboard
            </button>
          </div>
        `;
      }
    }
  },
  
  // Update the active tab in the UI
  updateActiveTab(tabId) {
    const tabButtons = document.querySelectorAll('.tab-btn');
    tabButtons.forEach(button => {
      const buttonTabId = button.getAttribute('data-tab');
      button.classList.toggle('active', buttonTabId === tabId);
      button.setAttribute('aria-selected', buttonTabId === tabId ? 'true' : 'false');
    });
  },
  
  // Sanitize HTML to prevent XSS attacks
  sanitizeHtml(str) {
    if (!str || typeof str !== 'string') return '';
    return String(str)
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&#39;');
  },
  
  // Safe HTML insertion helper
  setElementHtml(element, html) {
    if (!element) return;
    
    try {
      // For simple strings, use textContent instead of innerHTML
      if (!html.includes('<')) {
        element.textContent = html;
        return;
      }
      
      // For HTML content, use DOMPurify if available
      if (window.DOMPurify) {
        element.innerHTML = window.DOMPurify.sanitize(html);
      } else {
        // Basic fallback - only safe for trusted content
        element.innerHTML = html;
      }
    } catch (error) {
      console.error('Error setting element HTML:', error);
      element.textContent = 'Error displaying content';
    }
  },

  // Set up scroll-to-top button
  setupScrollToTop() {
    const scrollTopBtn = document.getElementById('scrollTopBtn');
    if (scrollTopBtn) {
      window.addEventListener('scroll', () => {
        scrollTopBtn.classList.toggle('visible', window.pageYOffset > 300);
      });
      
      scrollTopBtn.addEventListener('click', () => {
        window.scrollTo({ top: 0, behavior: 'smooth' });
      });
    }
  },
  
  // Set up save changes button
  setupSaveChangesButton() {
    const saveChangesBtn = document.getElementById('saveChangesBtn');
    if (saveChangesBtn) {
      saveChangesBtn.addEventListener('click', () => this.saveChanges());
    }
  },

  // Save changes to localStorage
  saveChanges() {
    try {
      localStorage.setItem('appData', JSON.stringify(window.appData));
      this.showToast('Changes saved successfully', 'success');
    } catch (error) {
      console.error('Error saving changes:', error);
      this.showToast('Error saving changes', 'error');
    }
  },

  // Display toast notification
  showToast(message, type = 'info') {
    // Validate inputs
    if (!message || typeof message !== 'string') {
      console.error('Invalid toast message:', message);
      return;
    }
    
    // Sanitize message to prevent XSS
    const sanitizedMessage = this.sanitizeHtml(message);
    
    // Validate type and set default if invalid
    const validTypes = ['info', 'success', 'warning', 'error'];
    if (!validTypes.includes(type)) {
      console.warn(`Invalid toast type "${type}", defaulting to "info"`);
      type = 'info';
    }
    
    // Get toast container or create it if it doesn't exist
    let toastContainer = document.getElementById('toastContainer');
    if (!toastContainer) {
      toastContainer = document.createElement('div');
      toastContainer.id = 'toastContainer';
      toastContainer.className = 'toast-container';
      document.body.appendChild(toastContainer);
    }
    
    // Create toast element with safe content
    const toast = document.createElement('div');
    toast.className = `toast toast-${type}`;
    
    // Set icon based on type
    let icon = '';
    switch (type) {
      case 'success':
        icon = '<i class="fas fa-check-circle"></i>';
        break;
      case 'warning':
        icon = '<i class="fas fa-exclamation-triangle"></i>';
        break;
      case 'error':
        icon = '<i class="fas fa-times-circle"></i>';
        break;
      default:
        icon = '<i class="fas fa-info-circle"></i>';
    }
    
    // Safely set toast content
    toast.innerHTML = `
      <div class="toast-content">
        <div class="toast-icon">${icon}</div>
        <div class="toast-message">${sanitizedMessage}</div>
        <button class="toast-close" aria-label="Close notification">×</button>
      </div>
    `;
    
    // Add close functionality
    const closeButton = toast.querySelector('.toast-close');
    if (closeButton) {
      closeButton.addEventListener('click', () => {
        toast.classList.add('toast-hiding');
        setTimeout(() => {
          if (toast.parentNode) {
            toast.parentNode.removeChild(toast);
          }
        }, 300);
      });
    }
    
    // Add to container
    toastContainer.appendChild(toast);
    
    // Auto-dismiss after delay
    const displayTime = type === 'error' ? 8000 : 4000;
    setTimeout(() => {
      if (toast.parentNode) {
        toast.classList.add('toast-hiding');
        setTimeout(() => {
          if (toast.parentNode) {
            toast.parentNode.removeChild(toast);
          }
        }, 300);
      }
    }, displayTime);
  },

  // Calculate statistics for dashboard
  calculateStats() {
    try {
      const stats = {
        bbv: { personnel: 0, teams: 0 },
        add: { personnel: 0, teams: 0 },
        arb: { personnel: 0, teams: 0 },
        shared: { personnel: 0, teams: 0 }
      };

      // Make sure window.appData and teams exist
      if (!window.appData || !window.appData.teams || !Array.isArray(window.appData.teams)) {
        console.warn('No appData or teams available for statistics');
        return stats;
      }

      // Count personnel and teams by stream
      window.appData.teams.forEach(team => {
        if (!team) return;
        
        const stream = (team.stream || 'unknown').toLowerCase();
        if (stats[stream]) {
          stats[stream].teams++;
          stats[stream].personnel += Array.isArray(team.personnel) ? team.personnel.length : 0;
        }
      });

      return stats;
    } catch (error) {
      console.error('Error calculating stats:', error);
      return {
        bbv: { personnel: 0, teams: 0 },
        add: { personnel: 0, teams: 0 },
        arb: { personnel: 0, teams: 0 },
        shared: { personnel: 0, teams: 0 }
      };
    }
  },

  // Initialize charts for dashboard
  initializeCharts() {
    try {
      // Check if Chart is loaded
      if (typeof Chart === 'undefined' || window.chartFailed) {
        console.warn('Chart.js is not loaded or initialization failed');
        this.showChartPlaceholders();
        return;
      }

      // Personnel Distribution Chart
      const personnelCtx = document.getElementById('personnelChart');
      if (personnelCtx) {
        try {
          // Get statistics for personnel distribution with safe access
          const stats = this.calculateStats() || {
            bbv: { personnel: 0 },
            add: { personnel: 0 },
            arb: { personnel: 0 },
            shared: { personnel: 0 }
          };
          
          // Create chart configuration
          const chartConfig = {
            type: 'doughnut',
            data: {
              labels: ['BBV', 'ADD', 'ARB', 'Shared'],
              datasets: [{
                data: [
                  stats.bbv.personnel || 0,
                  stats.add.personnel || 0,
                  stats.arb.personnel || 0,
                  stats.shared.personnel || 0
                ],
                backgroundColor: [
                  '#00518A', // BBV blue
                  '#CC2030', // ADD red
                  '#4F46E5', // ARB purple
                  '#232323'  // Shared black
                ]
              }]
            },
            options: {
              responsive: true,
              maintainAspectRatio: false,
              plugins: {
                legend: {
                  position: 'bottom'
                },
                tooltip: {
                  callbacks: {
                    label: function(context) {
                      const label = context.label || '';
                      const value = context.raw || 0;
                      const total = context.dataset.data.reduce((a, b) => a + b, 0);
                      const percentage = total > 0 ? Math.round((value / total) * 100) : 0;
                      return `${label}: ${value} (${percentage}%)`;
                    }
                  }
                }
              }
            }
          };
          
          // Create new chart with error handling
          try {
            new Chart(personnelCtx, chartConfig);
            console.log('Personnel chart created successfully');
          } catch (chartError) {
            console.error('Failed to create personnel chart:', chartError);
            this.showChartErrorPlaceholder(personnelCtx, 'Personnel Distribution');
          }
        } catch (error) {
          console.error('Error creating personnel chart:', error);
          this.showChartErrorPlaceholder(personnelCtx, 'Personnel Distribution');
        }
      }

      // Team Performance Chart
      const performanceCtx = document.getElementById('performanceChart');
      if (performanceCtx) {
        try {
          // Make sure we have teams data
          if (!window.appData || !window.appData.teams || window.appData.teams.length === 0) {
            this.showChartErrorPlaceholder(performanceCtx, 'Team Performance');
            return;
          }
          
          // Create chart configuration with safe access
          const chartConfig = {
            type: 'bar',
            data: {
              labels: window.appData.teams.map(team => team.name || 'Unnamed Team'),
              datasets: [{
                label: 'Performance Score',
                data: window.appData.teams.map(team => team.performance || 0),
                backgroundColor: window.appData.teams.map(team => {
                  const stream = (team.stream || 'unknown').toLowerCase();
                  return {
                    bbv: '#00518A',
                    add: '#CC2030',
                    arb: '#4F46E5',
                    shared: '#232323'
                  }[stream] || '#666666';
                })
              }]
            },
            options: {
              responsive: true,
              maintainAspectRatio: false,
              scales: {
                y: {
                  beginAtZero: true,
                  max: 100,
                  title: {
                    display: true,
                    text: 'Performance (%)'
                  }
                },
                x: {
                  title: {
                    display: true,
                    text: 'Teams'
                  }
                }
              },
              plugins: {
                legend: {
                  display: false
                }
              }
            }
          };
          
          // Create new chart with error handling
          try {
            new Chart(performanceCtx, chartConfig);
            console.log('Performance chart created successfully');
          } catch (chartError) {
            console.error('Failed to create performance chart:', chartError);
            this.showChartErrorPlaceholder(performanceCtx, 'Team Performance');
          }
        } catch (error) {
          console.error('Error creating performance chart:', error);
          this.showChartErrorPlaceholder(performanceCtx, 'Team Performance');
        }
      }
    } catch (error) {
      console.error('Error in initializeCharts:', error);
      this.showChartPlaceholders();
    }
  },
  
  // Show placeholders when charts can't be loaded
  showChartPlaceholders() {
    const chartElements = ['personnelChart', 'performanceChart'];
    chartElements.forEach(id => {
      const element = document.getElementById(id);
      if (element) {
        this.showChartErrorPlaceholder(element, id === 'personnelChart' ? 'Personnel Distribution' : 'Team Performance');
      }
    });
  },
  
  // Show a specific error placeholder for a chart
  showChartErrorPlaceholder(element, title) {
    // Save the original content in case we need to restore it
    if (!element.dataset.originalHtml) {
      element.dataset.originalHtml = element.innerHTML;
    }
    
    element.innerHTML = `
      <div class="flex flex-col items-center justify-center h-full text-center p-4">
        <div class="text-red-500 mb-2">
          <i class="fas fa-chart-bar text-3xl"></i>
        </div>
        <h3 class="font-semibold text-gray-600">${title}</h3>
        <p class="text-sm text-gray-500 mt-2">Chart could not be loaded</p>
      </div>
    `;
  },

  // Render recent activities
  renderRecentActivities() {
    try {
      if (!window.appData || !window.appData.activities || !Array.isArray(window.appData.activities)) {
        return '<p>No recent activities</p>';
      }
      
      const activities = window.appData.activities.slice(0, 5); // Show last 5 activities
      
      if (activities.length === 0) {
        return '<p>No recent activities</p>';
      }

      return activities.map(activity => {
        if (!activity) return '';
        
        const type = activity.type || 'update';
        const description = activity.description || 'Activity';
        const team = activity.team || '';
        const date = activity.date || new Date().toISOString();
        
        return `
          <div class="activity-item p-3 border-b border-gray-100 last:border-0">
            <div class="flex items-center space-x-3">
              <div class="activity-icon ${type}">
                <i class="fas ${this.getActivityIcon(type)}"></i>
              </div>
              <div>
                <p class="text-sm font-medium">${description}</p>
                <p class="text-xs text-gray-500">
                  ${team} • ${this.formatDate(date)}
                </p>
              </div>
            </div>
          </div>
        `;
      }).join('');
    } catch (error) {
      console.error('Error rendering activities:', error);
      return '<p>Error loading activities</p>';
    }
  },

  // Render upcoming tasks
  renderUpcomingTasks() {
    try {
      if (!window.appData || !window.appData.tasks || !Array.isArray(window.appData.tasks)) {
        return '<p>No upcoming tasks</p>';
      }
      
      // Sort tasks by due date and show the first 5
      const tasks = [...window.appData.tasks]
        .filter(task => task) // Filter out null tasks
        .sort((a, b) => {
          try {
            return new Date(a.dueDate || 0) - new Date(b.dueDate || 0);
          } catch (err) {
            return 0;
          }
        })
        .slice(0, 5);
      
      if (tasks.length === 0) {
        return '<p>No upcoming tasks</p>';
      }

      return tasks.map(task => {
        try {
          const progress = task.progress || 0;
          const title = task.title || 'Unnamed Task';
          const dueDate = task.dueDate || new Date().toISOString();
          const assignedTo = task.assignedTo || 'Unassigned';
          const priority = task.priority || 'Normal';
          
          return `
            <div class="task-item p-3 border-b border-gray-100 last:border-0">
              <div class="flex items-center justify-between">
                <div>
                  <p class="text-sm font-medium">${title}</p>
                  <p class="text-xs text-gray-500">
                    Due: ${this.formatDate(dueDate)} • 
                    Assigned to: ${assignedTo} • 
                    Priority: ${priority}
                  </p>
                </div>
                <div class="flex items-center space-x-2">
                  <div class="w-20 bg-gray-200 rounded-full h-2">
                    <div class="bg-blue-600 h-2 rounded-full" style="width: ${progress}%"></div>
                  </div>
                  <span class="text-xs text-gray-500">${progress}%</span>
                </div>
              </div>
            </div>
          `;
        } catch (taskError) {
          console.error('Error rendering task:', taskError);
          return '';
        }
      }).join('');
    } catch (error) {
      console.error('Error rendering tasks:', error);
      return '<p>Error loading tasks</p>';
    }
  },

  // Get activity icon based on type
  getActivityIcon(type) {
    const icons = {
      update: 'fa-edit',
      create: 'fa-plus',
      delete: 'fa-trash',
      comment: 'fa-comment',
      status: 'fa-check-circle'
    };
    return icons[type] || 'fa-info-circle';
  },

  // Format date
  formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  },

  // Show all activities modal
  showAllActivities() {
    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <div class="flex justify-between items-center mb-4">
          <h2>Activity History</h2>
          <button class="close-btn" onclick="ui.closeModal(this)">
            <i class="fas fa-times"></i>
          </button>
        </div>
        <div class="space-y-4">
          ${window.appData.history && window.appData.history.activities ? window.appData.history.activities.map(activity => `
            <div class="activity-item">
              <div class="flex items-center space-x-3">
                <div class="activity-icon ${activity.type}">
                  <i class="fas ${this.getActivityIcon(activity.type)}"></i>
                </div>
                <div>
                  <p class="text-sm font-medium">${activity.description}</p>
                  <p class="text-xs text-gray-500">${activity.user} • ${this.formatDate(activity.timestamp)}</p>
                </div>
              </div>
            </div>
          `).join('') : '<p>No activity history available</p>'}
        </div>
      </div>
    `;
    document.body.appendChild(modal);
  },

  // Show add task modal
  showAddTaskModal() {
    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <div class="flex justify-between items-center mb-4">
          <h2>Add New Task</h2>
          <button class="close-btn" onclick="ui.closeModal(this)">
            <i class="fas fa-times"></i>
          </button>
        </div>
        <form id="addTaskForm" onsubmit="ui.handleAddTask(event)">
          <div class="form-group">
            <label for="taskTitle">Title</label>
            <input type="text" id="taskTitle" required>
          </div>
          <div class="form-group">
            <label for="taskDescription">Description</label>
            <textarea id="taskDescription" required></textarea>
          </div>
          <div class="form-group">
            <label for="taskDueDate">Due Date</label>
            <input type="date" id="taskDueDate" required>
          </div>
          <div class="form-group">
            <label for="taskPriority">Priority</label>
            <select id="taskPriority" required>
              <option value="low">Low</option>
              <option value="medium">Medium</option>
              <option value="high">High</option>
            </select>
          </div>
          <div class="form-group">
            <label for="taskAssignee">Assignee</label>
            <select id="taskAssignee" required>
              ${window.appData.personnel && Array.isArray(window.appData.personnel) ? window.appData.personnel.map(person => `
                <option value="${person.id}">${person.name}</option>
              `).join('') : '<option value="">No personnel available</option>'}
            </select>
          </div>
          <button type="submit" class="btn-primary">Add Task</button>
        </form>
      </div>
    `;
    document.body.appendChild(modal);
  },

  // Handle add task form submission
  handleAddTask(event) {
    event.preventDefault();
    const form = event.target;
    const task = {
      id: window.appData.tasks.length + 1,
      title: form.querySelector('#taskTitle').value,
      description: form.querySelector('#taskDescription').value,
      dueDate: form.querySelector('#taskDueDate').value,
      priority: form.querySelector('#taskPriority').value,
      assignee: form.querySelector('#taskAssignee').value,
      progress: 0,
      status: 'pending'
    };
    window.appData.tasks.push(task);
    this.saveChanges();
    this.closeModal(form.closest('.modal'));
    this.loadDashboard();
  },

  // Close modal
  closeModal(button) {
    const modal = button.closest('.modal');
    if (modal) {
      modal.remove();
    }
  },
  
  // Hide modal - alternate method that can be called without a button reference
  hideModal() {
    const modal = document.querySelector('.modal');
    if (modal) {
      modal.remove();
    }
  },

  // Update login state
  updateLoginState() {
    const loginBtn = document.getElementById('loginBtn');
    const userInfo = document.getElementById('userInfo');
    const userName = document.getElementById('userName');
    const userRole = document.getElementById('userRole');
    const saveChangesBtn = document.getElementById('saveChangesBtn');

    // Ensure appData exists and has a state
    if (!window.appData || !window.appData.state) {
      console.warn('appData or its state is undefined in updateLoginState');
      window.appData = window.appData || {};
      window.appData.state = window.appData.state || {};
    }

    // Ensure appData.state has an isLoggedIn property
    if (typeof window.appData.state.isLoggedIn !== 'boolean') {
      console.warn('appData.state.isLoggedIn is not properly defined');
      window.appData.state = window.appData.state || {};
      window.appData.state.isLoggedIn = true;
      window.appData.state.userName = "User";
      window.appData.state.userRole = "Administrator";
    }
    
    // Always set to logged in
    window.appData.state.isLoggedIn = true;

    if (window.appData.state.isLoggedIn) {
      if (loginBtn) loginBtn.classList.add('hidden');
      if (userInfo) userInfo.classList.remove('hidden');
      if (saveChangesBtn) saveChangesBtn.classList.remove('hidden');
      
      const currentUser = window.appData.users && window.appData.users.find(user => user.id === window.appData.state.currentUser);
      if (currentUser) {
        if (userName) userName.textContent = currentUser.name;
        if (userRole) userRole.textContent = currentUser.role;
      } else {
        // Fall back to state values if user not found in users array
        if (userName) userName.textContent = window.appData.state.userName || 'User';
        if (userRole) userRole.textContent = window.appData.state.userRole || 'Guest';
      }
    } else {
      if (loginBtn) loginBtn.classList.remove('hidden');
      if (userInfo) userInfo.classList.add('hidden');
      if (saveChangesBtn) saveChangesBtn.classList.add('hidden');
    }
  },

  // Helper method to ensure images are lazy-loaded
  createLazyImage(src, altText, className = '') {
    return `<img src="${src}" alt="${altText}" class="${className}" loading="lazy">`;
  },
  
  // Render teams grid with lazy loading
  renderTeamsGrid() {
    return window.appData.teams.map(team => {
      const teamLogo = team.logo || 'https://via.placeholder.com/64x64?text=' + team.name.charAt(0);
      
      return `
        <div class="team-card bg-white rounded-lg shadow overflow-hidden transition-all hover:shadow-lg" data-team-id="${team.id}">
          <div class="p-4 flex items-center space-x-4">
            ${this.createLazyImage(teamLogo, `${team.name} logo`, 'w-16 h-16 object-cover rounded-full')}
            <div>
              <h3 class="text-lg font-semibold">
                <span class="text-${team.stream.toLowerCase()}">${team.name}</span>
              </h3>
              <p class="text-sm text-gray-500">${team.personnel.length} Members</p>
            </div>
          </div>
          <div class="px-4 pb-4">
            <div class="truncate-description">
              <p class="text-gray-700">${team.description}</p>
              <button class="text-blue-500 text-sm mt-1 show-more-btn" data-team-id="${team.id}" data-action="description">
                Show More
              </button>
            </div>
            
            <div class="mt-4 flex justify-between">
              <button class="px-3 py-1 text-sm bg-blue-500 text-white rounded hover:bg-blue-600" data-action="view" data-team-id="${team.id}">
                View Team
              </button>
              <div class="flex space-x-2">
                <button class="p-1 text-gray-500 hover:text-blue-500" data-action="edit" data-team-id="${team.id}" title="Edit Team">
                  <i class="fas fa-edit"></i>
                </button>
                <button class="p-1 text-gray-500 hover:text-red-500" data-action="delete" data-team-id="${team.id}" title="Delete Team">
                  <i class="fas fa-trash-alt"></i>
                </button>
              </div>
            </div>
          </div>
        </div>
      `;
    }).join('');
  },

  // Helper method to toggle description visibility
  toggleDescription(button, teamId) {
    const team = appData.teams.find(t => t.id === teamId);
    if (!team) return;
    
    const descriptionElement = button.previousElementSibling;
    
    if (descriptionElement.classList.contains('line-clamp-2')) {
      descriptionElement.classList.remove('line-clamp-2');
      button.textContent = 'Show less';
    } else {
      descriptionElement.classList.add('line-clamp-2');
      button.textContent = 'Read more';
    }
  },
  
  // Helper method to toggle responsibilities visibility
  toggleResponsibilities(button, teamId) {
    const team = appData.teams.find(t => t.id === teamId);
    if (!team) return;
    
    const responsibilitiesElement = button.previousElementSibling;
    
    if (responsibilitiesElement.classList.contains('line-clamp-2')) {
      responsibilitiesElement.classList.remove('line-clamp-2');
      button.textContent = 'Show less';
    } else {
      responsibilitiesElement.classList.add('line-clamp-2');
      button.textContent = 'Read more';
    }
  },
  
  // Show comprehensive team details in a modal
  showTeamDetails(teamId) {
    const team = window.appData.teams.find(t => t.id === teamId);
    if (!team) return;
    
    // Find sub-teams (teams that reference this team as parent)
    const subTeams = window.appData.teams.filter(t => t.parentTeamId === teamId);
    
    const modal = document.createElement('div');
    modal.className = 'modal modal-lg';
    modal.innerHTML = `
      <div class="modal-content">
        <div class="flex justify-between items-start mb-6">
          <div>
            <h2 class="text-2xl font-semibold text-${team.stream}">${team.name}</h2>
            <p class="text-sm text-gray-600">${team.stream.toUpperCase()} Stream</p>
          </div>
          <button class="btn-icon" onclick="ui.hideModal()">
            <i class="fas fa-times"></i>
          </button>
        </div>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
          <div>
            <h3 class="text-lg font-medium mb-3">Description</h3>
            <p class="text-gray-700">${team.description}</p>
          </div>
          
          <div>
            <h3 class="text-lg font-medium mb-3">Responsibilities</h3>
            <p class="text-gray-700">${team.responsibilities}</p>
          </div>
        </div>
        
        <div class="mb-6">
          <h3 class="text-lg font-medium mb-3">Performance</h3>
          <div class="flex items-center space-x-4">
            <div class="w-full bg-gray-200 rounded-full h-2.5">
              <div class="bg-${team.stream} h-2.5 rounded-full" style="width: ${team.performance || 0}%"></div>
            </div>
            <span class="text-lg font-semibold">${team.performance || 0}%</span>
          </div>
        </div>
        
        ${subTeams.length > 0 ? `
          <div class="mb-6">
            <div class="flex justify-between items-center mb-4">
              <h3 class="text-lg font-medium">Sub-Teams (${subTeams.length})</h3>
            </div>
            
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              ${subTeams.map(subTeam => `
                <div class="bg-white border border-gray-200 rounded-lg shadow-sm p-4 cursor-pointer" onclick="ui.showTeamDetails(${subTeam.id})">
                  <div class="flex items-center space-x-3">
                    <div class="w-8 h-8 rounded-full flex items-center justify-center text-white bg-${subTeam.stream}-600">
                      ${subTeam.name.charAt(0)}
                    </div>
                    <div>
                      <h4 class="font-medium">${subTeam.name}</h4>
                      <p class="text-xs text-gray-500">${subTeam.personnel ? subTeam.personnel.length : 0} members</p>
                    </div>
                  </div>
                </div>
              `).join('')}
            </div>
          </div>
        ` : ''}
        
        <div>
          <div class="flex justify-between items-center mb-4">
            <h3 class="text-lg font-medium">Personnel (${team.personnel.length})</h3>
            <button class="btn-primary btn-sm" onclick="ui.showAddPersonnelModal(${team.id})">
              <i class="fas fa-user-plus mr-2"></i> Add Personnel
            </button>
          </div>
          
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            ${team.personnel.map(person => `
              <div class="bg-gray-50 p-4 rounded-md hover:shadow-md transition-shadow">
                <div class="flex justify-between items-start">
                  <div>
                    <p class="font-medium">${person.name}</p>
                    <p class="text-sm text-gray-600">${person.role}</p>
                    <p class="text-sm text-gray-600 mt-1">Client: ${person.client}</p>
                  </div>
                  <div class="flex space-x-1">
                    <button class="btn-icon btn-sm" onclick="ui.editPersonnel(${person.id})">
                      <i class="fas fa-user-edit"></i>
                    </button>
                    <button class="btn-icon btn-sm" onclick="ui.removePersonnel(${person.id}, ${team.id})">
                      <i class="fas fa-user-minus"></i>
                    </button>
                  </div>
                </div>
                ${person.skills ? `
                <div class="mt-3 pt-3 border-t">
                  <p class="text-xs text-gray-500 mb-1">Skills:</p>
                  <div class="flex flex-wrap gap-1">
                    ${Object.entries(person.skills).slice(0, 3).map(([id, level]) => {
                      const skill = window.appData.skills?.find(s => s.id == id);
                      return skill ? `
                        <span class="px-2 py-0.5 text-xs rounded-full bg-${team.stream} bg-opacity-10 text-${team.stream}">
                          ${skill.name}: ${level}
                        </span>
                      ` : '';
                    }).join('')}
                    ${Object.keys(person.skills).length > 3 ? `
                      <span class="px-2 py-0.5 text-xs rounded-full bg-gray-100 text-gray-600">
                        +${Object.keys(person.skills).length - 3} more
                      </span>
                    ` : ''}
                  </div>
                </div>
                ` : ''}
              </div>
            `).join('')}
          </div>
        </div>
        
        <div class="mt-6 flex justify-end space-x-3">
          <button class="btn-secondary" onclick="ui.editTeam(${team.id})">
            <i class="fas fa-edit mr-2"></i> Edit Team
          </button>
          <button class="btn-primary" onclick="ui.showAddSubTeamModal(${team.id})">
            <i class="fas fa-plus mr-2"></i> Add Sub-Team
          </button>
        </div>
      </div>
    `;
    document.body.appendChild(modal);
    
    // Add CSS for line clamp if not already added
    if (!document.getElementById('line-clamp-css')) {
      const style = document.createElement('style');
      style.id = 'line-clamp-css';
      style.textContent = `
        .line-clamp-2 {
          display: -webkit-box;
          -webkit-line-clamp: 2;
          -webkit-box-orient: vertical;
          overflow: hidden;
        }
        .tooltip-trigger {
          position: relative;
        }
        .tooltip {
          visibility: hidden;
          position: absolute;
          top: -30px;
          left: 50%;
          transform: translateX(-50%);
          background-color: #333;
          color: white;
          padding: 4px 8px;
          border-radius: 4px;
          font-size: 12px;
          white-space: nowrap;
          opacity: 0;
          transition: opacity 0.3s;
          z-index: 10;
        }
        .tooltip-trigger:hover .tooltip {
          visibility: visible;
          opacity: 1;
        }
      `;
      document.head.appendChild(style);
    }
  },
  
  // Create a sub-team
  showAddSubTeamModal(parentTeamId) {
    const parentTeam = window.appData.teams.find(t => t.id === parentTeamId);
    if (!parentTeam) return;
    
    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <h2 class="text-xl font-semibold mb-4">Add Sub-Team to ${parentTeam.name}</h2>
        <form id="addSubTeamForm">
          <div class="form-group">
            <label for="teamName">Team Name</label>
            <input type="text" id="teamName" class="form-input" required>
          </div>
          <div class="form-group">
            <label for="teamStream">Stream</label>
            <select id="teamStream" class="form-select" required>
              <option value="${parentTeam.stream}" selected>${parentTeam.stream.toUpperCase()}</option>
              <option value="bbv">BBV</option>
              <option value="add">ADD</option>
              <option value="arb">ARB</option>
              <option value="shared">Shared</option>
            </select>
          </div>
          <div class="form-group">
            <label for="teamDescription">Description</label>
            <textarea id="teamDescription" class="form-textarea" rows="3" required></textarea>
          </div>
          <div class="form-group">
            <label for="teamResponsibilities">Responsibilities</label>
            <textarea id="teamResponsibilities" class="form-textarea" rows="3" required></textarea>
          </div>
          <div class="flex justify-end space-x-2 mt-4">
            <button type="button" class="btn-secondary" onclick="ui.hideModal()">Cancel</button>
            <button type="submit" class="btn-primary">Add Sub-Team</button>
          </div>
        </form>
      </div>
    `;
    document.body.appendChild(modal);
    
    // Handle form submission
    document.getElementById('addSubTeamForm').addEventListener('submit', e => {
      e.preventDefault();
      
      // Generate a new ID
      const newId = Date.now();
      
      // Create new team
      const newTeam = {
        id: newId,
        parentTeamId: parentTeamId,
        name: document.getElementById('teamName').value,
        stream: document.getElementById('teamStream').value,
        description: document.getElementById('teamDescription').value,
        responsibilities: document.getElementById('teamResponsibilities').value,
        performance: 0,
        personnel: []
      };
      
      // Add to teams array
      if (!window.appData.teams) window.appData.teams = [];
      window.appData.teams.push(newTeam);
      
      // Save changes
      this.saveChanges();
      
      // Hide modal
      this.hideModal();
      
      // Show success message
      this.showToast('Sub-team added successfully', 'success');
      
      // Open the new team details
      this.showTeamDetails(newId);
    });
  },
  
  loadTeams() {
    try {
      console.log('Loading teams content...');
      
      const tabContent = document.getElementById('tabContent');
      if (!tabContent) {
        console.error('Tab content element not found');
        return;
      }

      // Check if already loading to prevent duplicate loads
      if (tabContent.dataset.loading === 'true' && tabContent.dataset.currentTab === 'teams') {
        console.log('Teams already loading, skipping duplicate load request');
        return;
      }
      
      // Set loading state
      tabContent.dataset.loading = 'true';
      tabContent.dataset.currentTab = 'teams';
      
      // Clear any existing content first - important to avoid content from other tabs persisting
      tabContent.innerHTML = `
        <div class="flex justify-center items-center p-12">
          <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
          <p class="ml-4 text-gray-500">Loading teams content...</p>
        </div>
      `;

      // Use a setTimeout to allow the loading indicator to render
      setTimeout(() => {
        try {
          // Ensure appData and teams array exists - defensive coding
          if (!window.appData) window.appData = {};
          if (!window.appData.teams) window.appData.teams = [];
          
          // Check if a stream filter was set from dashboard navigation
          const activeFilter = sessionStorage.getItem('activeFilter');
          let teams = window.appData.teams;
          
          // Filter teams if an active filter is set
          if (activeFilter) {
            teams = teams.filter(team => team && team.stream === activeFilter);
            console.log(`Applying stream filter: ${activeFilter}, filtered to ${teams.length} teams`);
          }

          // Generate team cards with safe access to properties
          const teamCards = teams.length > 0 ? teams.map(team => {
            // Ensure team has all required properties
            if (!team) return '';
            
            // Ensure personnel exists
            if (!team.personnel) team.personnel = [];
            
            return `
              <div class="bg-white rounded-lg shadow-sm hover:shadow transition-all p-4 border border-gray-200 cursor-pointer team-card" data-team-id="${team.id || ''}">
                <div class="flex items-center space-x-3 mb-3">
                  <div class="w-10 h-10 rounded-full flex items-center justify-center text-white bg-${team.stream || 'gray'}-600">
                    ${team.name ? team.name.charAt(0) : '?'}
                  </div>
                  <div>
                    <h3 class="font-semibold">${team.name || 'Unnamed Team'}</h3>
                    <p class="text-xs text-gray-500">${(team.stream || 'unknown').toUpperCase()} • ${team.personnel.length} members</p>
                  </div>
                </div>
                
                <p class="text-sm text-gray-600 mb-4">${team.description || 'No description available'}</p>
                
                <div class="text-xs text-gray-500 mb-1 flex justify-between">
                  <span>Performance</span>
                  <span>${team.performance || 0}%</span>
                </div>
                
                <div class="w-full bg-gray-200 rounded-full h-2 mb-4">
                  <div class="bg-${team.stream || 'blue'}-600 h-2 rounded-full" style="width: ${team.performance || 0}%"></div>
                </div>
                
                <div class="flex justify-between">
                  <button class="text-blue-600 text-sm hover:text-blue-800 view-team-btn" data-team-id="${team.id || ''}">
                    View Details
                  </button>
                  <div>
                    <button class="text-gray-500 hover:text-blue-600 mx-2 edit-team-btn" data-team-id="${team.id || ''}">
                      <i class="fas fa-edit"></i>
                    </button>
                    <button class="text-gray-500 hover:text-red-600 delete-team-btn" data-team-id="${team.id || ''}">
                      <i class="fas fa-trash-alt"></i>
                    </button>
                  </div>
                </div>
              </div>
            `;
          }).join('') : '<p class="col-span-full text-center py-8 text-gray-500">No teams available</p>';

          // Render the final teams tab content with filter info if active
          tabContent.innerHTML = `
            <div class="p-4">
              <div class="flex justify-between items-center mb-6">
                <div>
                  <h2 class="text-2xl font-bold">Teams</h2>
                  ${activeFilter ? `
                    <div class="flex items-center mt-2">
                      <span class="text-sm text-gray-600 mr-2">Filtered by: ${activeFilter.toUpperCase()}</span>
                      <button class="text-xs text-blue-600 hover:text-blue-800 flex items-center" id="clearFilterBtn">
                        <i class="fas fa-times-circle mr-1"></i> Clear filter
                      </button>
                    </div>
                  ` : ''}
                </div>
                <button class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition flex items-center" id="addTeamButton">
                  <i class="fas fa-plus mr-2"></i> Add Team
                </button>
              </div>
              
              <!-- Team Cards -->
              <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6" id="teamsGrid">
                ${teamCards}
              </div>
            </div>
          `;
          
          // Add event listeners to team actions
          this.addTeamEventListeners();
          
          // Add event listener to clear filter button if it exists
          const clearFilterBtn = document.getElementById('clearFilterBtn');
          if (clearFilterBtn) {
            clearFilterBtn.addEventListener('click', () => {
              sessionStorage.removeItem('activeFilter');
              this.loadTeams();
            });
          }
          
          // Reset loading state
          tabContent.dataset.loading = 'false';
          
          console.log('Teams content loaded successfully');
        } catch (error) {
          console.error('Error rendering teams:', error);
          
          // Show error message
          tabContent.innerHTML = `
            <div class="p-8 text-center">
              <div class="text-red-500 text-xl mb-4">
                <i class="fas fa-exclamation-triangle mr-2"></i> 
                Error loading Teams
              </div>
              <p class="mb-4">${error.message || 'An unknown error occurred'}</p>
              <button class="px-4 py-2 bg-blue-600 text-white rounded" onclick="ui.switchTab('teams')">
                <i class="fas fa-sync-alt mr-2"></i> Try Again
              </button>
            </div>
          `;
          
          // Reset loading state
          tabContent.dataset.loading = 'false';
        }
      }, 150); // Slightly longer delay for better reliability
    } catch (error) {
      console.error('Critical error in loadTeams:', error);
      
      // Show error message
      const tabContent = document.getElementById('tabContent');
      if (tabContent) {
        tabContent.innerHTML = `
          <div class="p-8 text-center">
            <div class="text-red-500 text-xl mb-4">
              <i class="fas fa-exclamation-triangle mr-2"></i> 
              Critical Error Loading Teams
            </div>
            <p class="mb-4">${error.message || 'An unknown error occurred'}</p>
            <button class="px-4 py-2 bg-blue-600 text-white rounded" onclick="location.reload()">
              <i class="fas fa-sync-alt mr-2"></i> Refresh Page
            </button>
          </div>
        `;
        
        // Reset loading state
        tabContent.dataset.loading = 'false';
      }
    }
  },
  
  // Add a new helper method to attach event listeners to team elements
  addTeamEventListeners() {
    try {
      // Add team button
      const addTeamButton = document.getElementById('addTeamButton');
      if (addTeamButton) {
        addTeamButton.addEventListener('click', () => this.showAddTeamModal());
      }
      
      // Make entire team cards clickable
      const teamCards = document.querySelectorAll('.team-card');
      teamCards.forEach(card => {
        const teamId = parseInt(card.getAttribute('data-team-id'));
        if (!isNaN(teamId)) {
          card.addEventListener('click', (e) => {
            // Only handle click if it's directly on the card (not on a button)
            if (e.target.closest('button') === null) {
              this.showTeamDetails(teamId);
            }
          });
        }
      });
      
      // View team buttons
      const viewTeamBtns = document.querySelectorAll('.view-team-btn');
      viewTeamBtns.forEach(btn => {
        const teamIdAttr = btn.getAttribute('data-team-id');
        if (teamIdAttr) {
          const teamId = parseInt(teamIdAttr);
          if (!isNaN(teamId)) {
            btn.addEventListener('click', (e) => {
              e.stopPropagation(); // Prevent card click
              this.showTeamDetails(teamId);
            });
          }
        }
      });
      
      // Edit team buttons
      const editTeamBtns = document.querySelectorAll('.edit-team-btn');
      editTeamBtns.forEach(btn => {
        const teamIdAttr = btn.getAttribute('data-team-id');
        if (teamIdAttr) {
          const teamId = parseInt(teamIdAttr);
          if (!isNaN(teamId)) {
            btn.addEventListener('click', (e) => {
              e.stopPropagation(); // Prevent card click
              this.editTeam(teamId);
            });
          }
        }
      });
      
      // Delete team buttons
      const deleteTeamBtns = document.querySelectorAll('.delete-team-btn');
      deleteTeamBtns.forEach(btn => {
        const teamIdAttr = btn.getAttribute('data-team-id');
        if (teamIdAttr) {
          const teamId = parseInt(teamIdAttr);
          if (!isNaN(teamId)) {
            btn.addEventListener('click', (e) => {
              e.stopPropagation(); // Prevent card click
              this.deleteTeam(teamId);
            });
          }
        }
      });
    } catch (error) {
      console.error('Error setting up team event listeners:', error);
      this.showToast('Error setting up team interactions', 'error');
    }
  },
  
  // Helper functions for team statistics
  countAllPersonnel() {
    let count = 0;
    if (window.appData && window.appData.teams) {
      window.appData.teams.forEach(team => {
        if (team.personnel) count += team.personnel.length;
      });
    }
    return count;
  },
  
  calculateAverageTeamSize() {
    if (!window.appData || !window.appData.teams || window.appData.teams.length === 0) {
      return 0;
    }
    const totalPersonnel = this.countAllPersonnel();
    return Math.round(totalPersonnel / window.appData.teams.length);
  },
  
  calculateAveragePerformance() {
    if (!window.appData || !window.appData.teams || window.appData.teams.length === 0) {
      return 0;
    }
    const totalPerformance = window.appData.teams.reduce((sum, team) => sum + (team.performance || 0), 0);
    return Math.round(totalPerformance / window.appData.teams.length);
  },
  
  // Simple team rendering
  renderTeamsSimple() {
    if (!window.appData || !window.appData.teams || window.appData.teams.length === 0) {
      return '<div class="col-span-full text-center py-8 text-gray-500">No teams available</div>';
    }
    
    return window.appData.teams.map(team => `
      <div class="bg-white rounded-lg shadow-sm hover:shadow transition-all p-4 border border-gray-200">
        <div class="flex items-center space-x-3 mb-3">
          <div class="w-10 h-10 rounded-full flex items-center justify-center text-white bg-gray-600">
            ${team.name.charAt(0)}
          </div>
          <div>
            <h3 class="font-semibold">${team.name}</h3>
            <p class="text-xs text-gray-500">${team.stream.toUpperCase()} • ${team.personnel ? team.personnel.length : 0} members</p>
          </div>
        </div>
        
        <p class="text-sm text-gray-600 mb-4">${team.description}</p>
        
        <div class="text-xs text-gray-500 mb-1 flex justify-between">
          <span>Performance</span>
          <span>${team.performance || 0}%</span>
        </div>
        
        <div class="w-full bg-gray-200 rounded-full h-2 mb-4">
          <div class="bg-blue-600 h-2 rounded-full" style="width: ${team.performance || 0}%"></div>
        </div>
        
        <div class="flex justify-between">
          <button class="text-blue-600 text-sm hover:text-blue-800" onclick="ui.showTeamDetails(${team.id})">
            View Details
          </button>
          <div>
            <button class="text-gray-500 hover:text-blue-600 mx-2" onclick="ui.editTeam(${team.id})">
              <i class="fas fa-edit"></i>
            </button>
            <button class="text-gray-500 hover:text-red-600" onclick="ui.deleteTeam(${team.id})">
              <i class="fas fa-trash-alt"></i>
            </button>
          </div>
        </div>
      </div>
    `).join('');
  },
  
  // Export teams data as CSV or JSON
  exportTeamsCSV() {
    let csvContent = "data:text/csv;charset=utf-8,";
    
    // Add headers
    csvContent += "Team ID,Team Name,Stream,Personnel Count,Performance,Description,Responsibilities\n";
    
    // Add team data
    window.appData.teams.forEach(team => {
      csvContent += [
        team.id,
        `"${team.name.replace(/"/g, '""')}"`,
        team.stream,
        team.personnel.length,
        team.performance || 0,
        `"${team.description.replace(/"/g, '""')}"`,
        `"${team.responsibilities.replace(/"/g, '""')}"`
      ].join(',') + '\n';
    });
    
    // Create download link
    const encodedUri = encodeURI(csvContent);
    const link = document.createElement("a");
    link.setAttribute("href", encodedUri);
    link.setAttribute("download", "teams_data.csv");
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
    this.hideModal();
    this.showToast('Teams exported as CSV', 'success');
  },
  
  exportTeamsJSON() {
    const data = JSON.stringify(window.appData.teams, null, 2);
    const blob = new Blob([data], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    
    const link = document.createElement("a");
    link.setAttribute("href", url);
    link.setAttribute("download", "teams_data.json");
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
    
    this.hideModal();
    this.showToast('Teams exported as JSON', 'success');
  },
  
  sortTeams() {
    const sortBy = document.getElementById('sortTeams').value;
    const grid = document.getElementById('teamsGrid');
    const cards = Array.from(grid.querySelectorAll('.team-card'));
    
    cards.sort((a, b) => {
      const aId = parseInt(a.getAttribute('data-id'));
      const bId = parseInt(b.getAttribute('data-id'));
      const aTeam = window.appData.teams.find(t => t.id === aId);
      const bTeam = window.appData.teams.find(t => t.id === bId);
      
      if (!aTeam || !bTeam) return 0;
      
      switch (sortBy) {
        case 'name':
          return aTeam.name.localeCompare(bTeam.name);
        case 'size':
          return bTeam.personnel.length - aTeam.personnel.length;
        case 'performance':
          return (bTeam.performance || 0) - (aTeam.performance || 0);
        default:
          return 0;
      }
    });
    
    // Re-append cards in the sorted order
    cards.forEach(card => grid.appendChild(card));
  },

  showAddTeamModal() {
    try {
      const modal = document.createElement('div');
      modal.className = 'modal';
      modal.innerHTML = `
        <div class="modal-content">
          <h2 class="text-xl font-semibold mb-4">Add New Team</h2>
          <form id="addTeamForm">
            <div class="form-group">
              <label for="teamName">Team Name</label>
              <input type="text" id="teamName" required>
            </div>
            <div class="form-group">
              <label for="teamStream">Stream</label>
              <select id="teamStream" required>
                <option value="bbv">BBV</option>
                <option value="add">ADD</option>
                <option value="arb">ARB</option>
                <option value="shared">Shared</option>
              </select>
            </div>
            <div class="form-group">
              <label for="teamDescription">Description</label>
              <textarea id="teamDescription" rows="3" required></textarea>
            </div>
            <div class="form-group">
              <label for="teamResponsibilities">Responsibilities</label>
              <textarea id="teamResponsibilities" rows="3" required></textarea>
            </div>
            <div class="flex justify-end space-x-2 mt-4">
              <button type="button" class="btn-secondary" onclick="ui.hideModal()">Cancel</button>
              <button type="submit" class="btn-primary">Add Team</button>
            </div>
          </form>
        </div>
      `;
      document.body.appendChild(modal);

      const form = modal.querySelector('#addTeamForm');
      if (form) {
        form.addEventListener('submit', (e) => {
          e.preventDefault();
          try {
            // Ensure appData and teams exist
            if (!window.appData) window.appData = {};
            if (!window.appData.teams) window.appData.teams = [];
            
            const team = {
              id: Date.now(),
              name: form.querySelector('#teamName').value.trim(),
              stream: form.querySelector('#teamStream').value,
              description: form.querySelector('#teamDescription').value.trim(),
              responsibilities: form.querySelector('#teamResponsibilities').value.trim(),
              performance: 0,
              personnel: []
            };
            
            window.appData.teams.push(team);
            
            this.saveChanges();
            this.hideModal();
            this.showToast('Team added successfully', 'success');
            this.loadTeams();
          } catch (formError) {
            console.error('Error adding team:', formError);
            this.showToast('Error adding team: ' + (formError.message || 'Unknown error'), 'error');
          }
        });
      }
    } catch (error) {
      console.error('Error showing add team modal:', error);
      this.showToast('Could not open add team form', 'error');
    }
  },

  editTeam(teamId) {
    const team = window.appData.teams.find(t => t.id === teamId);
    if (!team) return;

    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <h2 class="text-xl font-semibold mb-4">Edit Team</h2>
        <form id="editTeamForm">
          <div class="form-group">
            <label for="teamName">Team Name</label>
            <input type="text" id="teamName" value="${team.name}" required>
          </div>
          <div class="form-group">
            <label for="teamStream">Stream</label>
            <select id="teamStream" required>
              <option value="bbv" ${team.stream === 'bbv' ? 'selected' : ''}>BBV</option>
              <option value="add" ${team.stream === 'add' ? 'selected' : ''}>ADD</option>
              <option value="arb" ${team.stream === 'arb' ? 'selected' : ''}>ARB</option>
              <option value="shared" ${team.stream === 'shared' ? 'selected' : ''}>Shared</option>
            </select>
          </div>
          <div class="form-group">
            <label for="teamDescription">Description</label>
            <textarea id="teamDescription" rows="3" required>${team.description}</textarea>
          </div>
          <div class="form-group">
            <label for="teamResponsibilities">Responsibilities</label>
            <textarea id="teamResponsibilities" rows="3" required>${team.responsibilities}</textarea>
          </div>
          <div class="form-group">
            <label for="teamPerformance">Performance Score</label>
            <input type="number" id="teamPerformance" min="0" max="100" value="${team.performance}" required>
          </div>
          <div class="flex justify-end space-x-2 mt-4">
            <button type="button" class="btn-secondary" onclick="ui.hideModal()">Cancel</button>
            <button type="submit" class="btn-primary">Save Changes</button>
          </div>
        </form>
      </div>
    `;
    document.body.appendChild(modal);

    const form = modal.querySelector('#editTeamForm');
    form.addEventListener('submit', (e) => {
      e.preventDefault();
      team.name = form.querySelector('#teamName').value;
      team.stream = form.querySelector('#teamStream').value;
      team.description = form.querySelector('#teamDescription').value;
      team.responsibilities = form.querySelector('#teamResponsibilities').value;
      team.performance = parseInt(form.querySelector('#teamPerformance').value);
      
      this.saveChanges();
      this.hideModal();
      this.showToast('Team updated successfully', 'success');
      this.loadTeams();
    });
  },

  deleteTeam(teamId) {
    if (confirm('Are you sure you want to delete this team? This action cannot be undone.')) {
      window.appData.teams = window.appData.teams.filter(t => t.id !== teamId);
      this.saveChanges();
      this.showToast('Team deleted successfully', 'success');
      this.loadTeams();
    }
  },

  showAddPersonnelModal(teamId) {
    const team = window.appData.teams.find(t => t.id === teamId);
    if (!team) return;

    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <h2 class="text-xl font-semibold mb-4">Add Personnel to ${team.name}</h2>
        <form id="addPersonnelForm">
          <div class="form-group">
            <label for="personnelName">Name</label>
            <input type="text" id="personnelName" required>
          </div>
          <div class="form-group">
            <label for="personnelRole">Role</label>
            <input type="text" id="personnelRole" required>
          </div>
          <div class="form-group">
            <label for="personnelClient">Client</label>
            <input type="text" id="personnelClient" required>
          </div>
          <div class="flex justify-end space-x-2 mt-4">
            <button type="button" class="btn-secondary" onclick="ui.hideModal()">Cancel</button>
            <button type="submit" class="btn-primary">Add Personnel</button>
          </div>
        </form>
      </div>
    `;
    document.body.appendChild(modal);

    const form = modal.querySelector('#addPersonnelForm');
    form.addEventListener('submit', (e) => {
      e.preventDefault();
      const personnel = {
        id: Date.now(),
        name: form.querySelector('#personnelName').value,
        role: form.querySelector('#personnelRole').value,
        client: form.querySelector('#personnelClient').value
      };
      
      team.personnel.push(personnel);
      this.saveChanges();
      this.hideModal();
      this.showToast('Personnel added successfully', 'success');
      this.loadTeams();
    });
  },

  editPersonnel(personnelId) {
    const team = window.appData.teams.find(t => t.personnel.some(p => p.id === personnelId));
    const personnel = team?.personnel.find(p => p.id === personnelId);
    if (!personnel) return;

    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <h2 class="text-xl font-semibold mb-4">Edit Personnel</h2>
        <form id="editPersonnelForm">
          <div class="form-group">
            <label for="personnelName">Name</label>
            <input type="text" id="personnelName" value="${personnel.name}" required>
          </div>
          <div class="form-group">
            <label for="personnelRole">Role</label>
            <input type="text" id="personnelRole" value="${personnel.role}" required>
          </div>
          <div class="form-group">
            <label for="personnelClient">Client</label>
            <input type="text" id="personnelClient" value="${personnel.client}" required>
          </div>
          <div class="flex justify-end space-x-2 mt-4">
            <button type="button" class="btn-secondary" onclick="ui.hideModal()">Cancel</button>
            <button type="submit" class="btn-primary">Save Changes</button>
          </div>
        </form>
      </div>
    `;
    document.body.appendChild(modal);

    const form = modal.querySelector('#editPersonnelForm');
    form.addEventListener('submit', (e) => {
      e.preventDefault();
      personnel.name = form.querySelector('#personnelName').value;
      personnel.role = form.querySelector('#personnelRole').value;
      personnel.client = form.querySelector('#personnelClient').value;
      
      this.saveChanges();
      this.hideModal();
      this.showToast('Personnel updated successfully', 'success');
      this.loadTeams();
    });
  },

  removePersonnel(personnelId, teamId) {
    const team = window.appData.teams.find(t => t.id === teamId);
    if (!team) return;

    if (confirm('Are you sure you want to remove this personnel? This action cannot be undone.')) {
      team.personnel = team.personnel.filter(p => p.id !== personnelId);
      this.saveChanges();
      this.showToast('Personnel removed successfully', 'success');
      this.loadTeams();
    }
  },

  loadOrgChart() {
    try {
      const tabContent = document.getElementById('tabContent');
      if (!tabContent) {
        console.error('Tab content element not found');
        return;
      }
      
      // Check if already loading
      if (tabContent.dataset.loading === 'true') {
        console.log('Organization chart already loading, skipping duplicate load');
        return;
      }
      
      // Set loading state
      tabContent.dataset.loading = 'true';
      
      tabContent.innerHTML = `
        <div class="p-4 space-y-6">
          <div class="flex flex-wrap items-center justify-between gap-4">
            <div>
              <h2 class="text-2xl font-semibold">Organization Chart</h2>
              <p class="text-gray-600 mt-1">Interactive visualization of the quality organization structure</p>
            </div>
            <div class="flex gap-2">
              <div class="relative">
                <select id="clientFilter" class="form-select text-sm pr-8 py-2 pl-3 border rounded-lg">
                  <option value="all">All Clients</option>
                  ${this.getUniqueClients().map(client => 
                    `<option value="${client}">${client}</option>`).join('')}
                </select>
              </div>
              <div class="relative">
                <select id="streamFilter" class="form-select text-sm pr-8 py-2 pl-3 border rounded-lg">
                  <option value="all">All Streams</option>
                  <option value="bbv">BBV</option>
                  <option value="add">ADD</option>
                  <option value="arb">ARB</option>
                  <option value="shared">Shared</option>
                </select>
              </div>
              <button id="exportOrgChartBtn" class="btn btn-secondary text-sm py-2 px-3 rounded-lg border bg-white hover:bg-gray-50">
                <i class="fas fa-download mr-1"></i> Export
              </button>
              <div class="dropdown relative inline-block">
                <button id="layoutOptionsBtn" class="btn btn-secondary text-sm py-2 px-3 rounded-lg border bg-white hover:bg-gray-50">
                  <i class="fas fa-sitemap mr-1"></i> Layout <i class="fas fa-caret-down ml-1"></i>
                </button>
                <div id="layoutDropdown" class="dropdown-content hidden absolute right-0 mt-2 bg-white border rounded-lg shadow-lg z-10 w-48">
                  <div class="p-2">
                    <button id="verticalLayout" class="block w-full text-left p-2 hover:bg-gray-100 rounded">
                      <i class="fas fa-arrows-alt-v mr-2"></i> Vertical
                    </button>
                    <button id="horizontalLayout" class="block w-full text-left p-2 hover:bg-gray-100 rounded">
                      <i class="fas fa-arrows-alt-h mr-2"></i> Horizontal
                    </button>
                    <button id="compactLayout" class="block w-full text-left p-2 hover:bg-gray-100 rounded">
                      <i class="fas fa-compress-arrows-alt mr-2"></i> Compact
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <div class="flex flex-wrap gap-4 mb-2">
            <div class="p-2 bg-white rounded-lg shadow-sm flex items-center">
              <div class="mr-2 text-sm font-medium">Zoom:</div>
              <button id="zoomOut" class="p-1 rounded hover:bg-gray-100"><i class="fas fa-minus"></i></button>
              <div id="zoomLevel" class="px-2 text-sm">100%</div>
              <button id="zoomIn" class="p-1 rounded hover:bg-gray-100"><i class="fas fa-plus"></i></button>
              <button id="zoomReset" class="ml-2 p-1 px-2 text-xs bg-gray-100 rounded hover:bg-gray-200">Reset</button>
            </div>
            
            <div class="p-2 bg-white rounded-lg shadow-sm flex items-center">
              <div class="mr-2 text-sm font-medium">Show:</div>
              <label class="inline-flex items-center cursor-pointer mr-3">
                <input type="checkbox" id="showNames" class="form-checkbox" checked>
                <span class="ml-1 text-sm">Names</span>
              </label>
              <label class="inline-flex items-center cursor-pointer mr-3">
                <input type="checkbox" id="showRoles" class="form-checkbox" checked>
                <span class="ml-1 text-sm">Roles</span>
              </label>
              <label class="inline-flex items-center cursor-pointer">
                <input type="checkbox" id="showClients" class="form-checkbox" checked>
                <span class="ml-1 text-sm">Clients</span>
              </label>
            </div>
            
            <div class="flex-grow"></div>
            
            <div class="p-2 bg-white rounded-lg shadow-sm flex items-center">
              <input type="text" id="searchOrgChart" placeholder="Search..." 
                class="border rounded px-3 py-1 text-sm focus:outline-none focus:ring-2 focus:ring-blue-300">
            </div>
          </div>
          
          <div class="bg-white p-4 rounded-lg shadow-md border border-gray-200">
            <div id="orgChartContainer" class="w-full" style="height: 700px; overflow: auto;">
              <div id="orgChart" class="w-full h-full"></div>
            </div>
          </div>
          
          <div id="nodeDetails" class="hidden bg-white p-4 rounded-lg shadow-md border border-gray-200 mt-4">
            <div class="flex justify-between items-start">
              <h3 class="text-lg font-semibold" id="detailsTitle">Node Details</h3>
              <button id="closeDetails" class="text-gray-400 hover:text-gray-600">
                <i class="fas fa-times"></i>
              </button>
            </div>
            <div id="detailsContent" class="mt-3"></div>
          </div>
        </div>
      `;
      
      // Set up event listeners for controls
      this.setupOrgChartControls();
      
      // Initialize the org chart
      this.initializeOrgChart();
      
      // Reset loading state
      tabContent.dataset.loading = 'false';
    } catch (error) {
      console.error('Error loading organization chart:', error);
      
      const tabContent = document.getElementById('tabContent');
      if (tabContent) {
        tabContent.innerHTML = `
          <div class="p-8 text-center">
            <div class="text-red-500 text-xl mb-4">
              <i class="fas fa-exclamation-triangle mr-2"></i> 
              Error Loading Organization Chart
            </div>
            <p class="mb-4">${error.message || 'An unknown error occurred'}</p>
            <button class="px-4 py-2 bg-blue-600 text-white rounded" onclick="ui.switchTab('orgchart')">
              <i class="fas fa-sync-alt mr-2"></i> Try Again
            </button>
          </div>
        `;
        
        // Reset loading state
        tabContent.dataset.loading = 'false';
      }
    }
  },

  // Set up org chart controls
  setupOrgChartControls() {
    console.log('Setting up org chart controls');
    
    // Client filter
    const clientFilter = document.getElementById('clientFilter');
    const streamFilter = document.getElementById('streamFilter');
    
    if (clientFilter && streamFilter) {
      // Get unique clients
      const clients = this.getUniqueClients();
      
      // Populate client filter
      clientFilter.innerHTML = `
        <option value="all">All Clients</option>
        ${clients.map(client => `<option value="${client}">${client}</option>`).join('')}
      `;
      
      // Add enhanced detail filter
      const detailLevel = document.getElementById('detailLevelFilter') || document.createElement('select');
      if (!document.getElementById('detailLevelFilter')) {
        detailLevel.id = 'detailLevelFilter';
        detailLevel.className = 'form-select px-3 py-2 border rounded-md text-sm';
        detailLevel.innerHTML = `
          <option value="high">High Detail</option>
          <option value="medium" selected>Medium Detail</option>
          <option value="low">Low Detail</option>
        `;
        
        // Add after stream filter
        streamFilter.parentNode.appendChild(detailLevel);
        
        // Add label
        const label = document.createElement('label');
        label.htmlFor = 'detailLevelFilter';
        label.className = 'block text-sm font-medium text-gray-700 mr-2';
        label.innerText = 'Detail Level:';
        streamFilter.parentNode.insertBefore(label, detailLevel);
      }
      
      // Event listeners - use a combined update function for efficiency
      const updateChart = () => {
        const clientValue = clientFilter.value;
        const streamValue = streamFilter.value;
        const detailValue = detailLevel.value;
        
        // Update the org chart with new filters
        this.prepareOrgChartData(clientValue, streamValue, detailValue);
      };
      
      clientFilter.addEventListener('change', updateChart);
      streamFilter.addEventListener('change', updateChart);
      detailLevel.addEventListener('change', updateChart);
      
      // Enhanced export options
      const exportContainer = document.querySelector('.export-options') || document.createElement('div');
      if (!document.querySelector('.export-options')) {
        exportContainer.className = 'export-options mt-4 flex flex-wrap gap-2';
        exportContainer.innerHTML = `
          <button id="exportOrgChartSvg" class="btn btn-sm btn-outline">
            <i class="fas fa-file-code mr-1"></i> Export SVG
          </button>
          <button id="exportOrgChartPng" class="btn btn-sm btn-outline">
            <i class="fas fa-file-image mr-1"></i> Export PNG
          </button>
          <button id="exportOrgChartPdf" class="btn btn-sm btn-outline">
            <i class="fas fa-file-pdf mr-1"></i> Export PDF
          </button>
          <button id="exportOrgChartData" class="btn btn-sm btn-outline">
            <i class="fas fa-file-csv mr-1"></i> Export Data
          </button>
        `;
        
        // Add export container to the chart controls
        const controlsContainer = document.querySelector('.org-chart-controls') || streamFilter.parentNode.parentNode;
        controlsContainer.appendChild(exportContainer);
        
        // Add event listeners for new export buttons
        document.getElementById('exportOrgChartSvg').addEventListener('click', () => this.exportOrgChartSvg());
        document.getElementById('exportOrgChartPng').addEventListener('click', () => this.exportOrgChartPng());
        document.getElementById('exportOrgChartPdf').addEventListener('click', () => this.exportOrgChartPdf());
        document.getElementById('exportOrgChartData').addEventListener('click', () => this.exportOrgChartData());
      }
    }
  },
  
  // Get unique client names from personnel
  getUniqueClients() {
    const clients = new Set();
    
    if (window.appData && window.appData.teams) {
      window.appData.teams.forEach(team => {
        if (team && team.personnel) {
          team.personnel.forEach(person => {
            if (person && person.client) {
              clients.add(person.client);
            }
          });
        }
      });
    }
    
    return Array.from(clients).sort();
  },

  // Initialize the d3.js org chart visualization
  initializeOrgChart() {
    // Check if d3 is loaded
    if (typeof d3 === 'undefined') {
      console.error('D3.js library not loaded. Cannot initialize org chart.');
      const orgChart = document.getElementById('orgChart');
      if (orgChart) {
        orgChart.innerHTML = `
          <div class="flex flex-col items-center justify-center h-full p-8 text-center">
            <i class="fas fa-exclamation-circle text-red-500 text-3xl mb-4"></i>
            <h3 class="font-bold">Cannot load organization chart</h3>
            <p class="text-gray-500 mt-2">Required libraries are not available.</p>
          </div>
        `;
      }
      return;
    }
    
    // Parse filter values
    const clientFilter = document.getElementById('clientFilter')?.value || 'all';
    const streamFilter = document.getElementById('streamFilter')?.value || 'all';
    
    // Display options
    const showNames = document.getElementById('showNames')?.checked ?? true;
    const showRoles = document.getElementById('showRoles')?.checked ?? true;
    const showClients = document.getElementById('showClients')?.checked ?? true;
    
    // Cache current layout
    this.currentOrgChartLayout = this.currentOrgChartLayout || 'vertical';
    
    // Clear any existing SVG
    const orgChart = document.getElementById('orgChart');
    if (!orgChart) return;
    
    d3.select("#orgChart").selectAll("*").remove();

    // Prepare the data
    const data = this.prepareOrgChartData(clientFilter, streamFilter);
    if (!data || !data.children || data.children.length === 0) {
      orgChart.innerHTML = `
        <div class="flex flex-col items-center justify-center h-full p-8 text-center">
          <i class="fas fa-users text-gray-400 text-3xl mb-4"></i>
          <h3 class="font-bold">No organization data</h3>
          <p class="text-gray-500 mt-2">Add teams and personnel to see the organization chart.</p>
        </div>
      `;
      return;
    }

    // Set up the SVG
    const width = orgChart.clientWidth;
    const height = orgChart.clientHeight || 600;
    
    const svg = d3.select("#orgChart")
      .append("svg")
      .attr("width", "100%")
      .attr("height", "100%")
      .attr("viewBox", `0 0 ${width} ${height}`)
      .attr("preserveAspectRatio", "xMidYMid meet");

    // Create a group for zooming and panning
    const g = svg.append("g");
    
    // Create the chart layout based on current orientation
    let treeLayout;
    
    if (this.currentOrgChartLayout === 'horizontal') {
      treeLayout = d3.tree()
        .size([height - 100, width - 200]);
    } else if (this.currentOrgChartLayout === 'compact') {
      treeLayout = d3.cluster()
        .size([2 * Math.PI, Math.min(width, height) / 2 - 120]);
    } else {
      // Default to vertical layout
      treeLayout = d3.tree()
        .size([width - 100, height - 200]);
    }

    // Create the root node
    const root = d3.hierarchy(data);
    
    // Generate the tree layout
    let treeData;
    
    if (this.currentOrgChartLayout === 'compact') {
      // For radial layout
      treeData = treeLayout(root);
      
      // Position nodes in a circle
      g.attr("transform", `translate(${width / 2},${height / 2})`);
      
      // Add links
      g.selectAll(".link")
        .data(treeData.links())
        .enter()
        .append("path")
        .attr("class", "link")
        .attr("d", d3.linkRadial()
          .angle(d => d.x)
          .radius(d => d.y))
        .style("fill", "none")
        .style("stroke", "#ccc")
        .style("stroke-width", "1.5px");
      
      // Add nodes
      const node = g.selectAll(".node")
        .data(treeData.descendants())
        .enter()
        .append("g")
        .attr("class", "node")
        .attr("transform", d => `translate(${d.y * Math.sin(d.x)},${-d.y * Math.cos(d.x)})`)
        .on("click", (event, d) => this.showNodeDetails(d.data));
      
      // Add node circles
      node.append("circle")
        .attr("r", d => d.data.type === 'team' ? 15 : 10)
        .style("fill", d => {
          const stream = d.data.stream || 'default';
          return window.config?.colors?.[stream] || '#ccc';
        })
        .style("stroke", "#fff")
        .style("stroke-width", "2px");
      
      // Add node labels
      if (showNames) {
        node.append("text")
          .attr("dy", d => d.data.type === 'team' ? -20 : -15)
          .attr("text-anchor", "middle")
          .attr("font-size", d => d.data.type === 'team' ? "12px" : "10px")
          .attr("font-weight", d => d.data.type === 'team' ? "bold" : "normal")
          .text(d => d.data.name)
          .style("fill", "#333");
      }
      
      // Add role labels
      if (showRoles && showNames) {
        node.append("text")
          .attr("dy", -5)
          .attr("text-anchor", "middle")
          .attr("font-size", "9px")
          .text(d => d.data.role || "")
          .style("fill", "#666");
      }
      
      // Add client labels
      if (showClients && showNames) {
        node.append("text")
          .attr("dy", 20)
          .attr("text-anchor", "middle")
          .attr("font-size", "8px")
          .attr("font-style", "italic")
          .text(d => d.data.client || "")
          .style("fill", "#999");
      }
      
    } else if (this.currentOrgChartLayout === 'horizontal') {
      // For horizontal layout
      treeData = treeLayout(root);
      
      // Add links
      g.selectAll(".link")
        .data(treeData.links())
        .enter()
        .append("path")
        .attr("class", "link")
        .attr("d", d3.linkHorizontal()
          .x(d => d.y)
          .y(d => d.x))
        .style("fill", "none")
        .style("stroke", "#ccc")
        .style("stroke-width", "1.5px");

      // Add nodes
      const node = g.selectAll(".node")
        .data(treeData.descendants())
        .enter()
        .append("g")
        .attr("class", "node")
        .attr("transform", d => `translate(${d.y},${d.x})`)
        .on("click", (event, d) => this.showNodeDetails(d.data));
      
      // Add node circles
      node.append("circle")
        .attr("r", d => d.data.type === 'team' ? 15 : 10)
        .style("fill", d => {
          const stream = d.data.stream || 'default';
          return window.config?.colors?.[stream] || '#ccc';
        })
        .style("stroke", "#fff")
        .style("stroke-width", "2px");
      
      // Add node labels
      if (showNames) {
        node.append("text")
          .attr("dx", d => d.children ? -8 : 8)
          .attr("dy", 4)
          .attr("text-anchor", d => d.children ? "end" : "start")
          .attr("font-size", d => d.data.type === 'team' ? "12px" : "10px")
          .attr("font-weight", d => d.data.type === 'team' ? "bold" : "normal")
          .text(d => d.data.name)
          .style("fill", "#333");
      }
      
      // Add role labels
      if (showRoles) {
        node.append("text")
          .attr("dx", d => d.children ? -8 : 8)
          .attr("dy", 18)
          .attr("text-anchor", d => d.children ? "end" : "start")
          .attr("font-size", "9px")
          .text(d => d.data.role || "")
          .style("fill", "#666");
      }
      
      // Add client labels
      if (showClients) {
        node.append("text")
          .attr("dx", d => d.children ? -8 : 8)
          .attr("dy", 30)
          .attr("text-anchor", d => d.children ? "end" : "start")
          .attr("font-size", "8px")
          .attr("font-style", "italic")
          .text(d => d.data.client || "")
          .style("fill", "#999");
      }
      
    } else {
      // For vertical layout (default)
      treeData = treeLayout(root);
      
      // Add links
      g.selectAll(".link")
        .data(treeData.links())
        .enter()
        .append("path")
        .attr("class", "link")
        .attr("d", d3.linkVertical()
          .x(d => d.x)
          .y(d => d.y))
        .style("fill", "none")
        .style("stroke", "#ccc")
        .style("stroke-width", "1.5px");

      // Add nodes
      const node = g.selectAll(".node")
        .data(treeData.descendants())
        .enter()
        .append("g")
        .attr("class", "node")
        .attr("transform", d => `translate(${d.x},${d.y})`)
        .on("click", (event, d) => this.showNodeDetails(d.data));
        
      // Add node rectangles with rounded corners for teams
      node.filter(d => d.data.type === 'team')
        .append("rect")
        .attr("x", -50)
        .attr("y", -20)
        .attr("width", 100)
        .attr("height", 40)
        .attr("rx", 5)
        .attr("ry", 5)
        .style("fill", d => {
          const stream = d.data.stream || 'default';
          return window.config?.colors?.[stream] || '#ccc';
        })
        .style("stroke", "#fff")
        .style("stroke-width", "2px");
        
      // Add node circles for personnel
      node.filter(d => d.data.type !== 'team')
        .append("circle")
        .attr("r", 10)
        .style("fill", d => {
          const stream = d.data.stream || 'default';
          return window.config?.colors?.[stream] || '#ccc';
        })
        .style("stroke", "#fff")
        .style("stroke-width", "2px");
      
      // Add node labels
      if (showNames) {
        // Team labels
        node.filter(d => d.data.type === 'team')
          .append("text")
          .attr("text-anchor", "middle")
          .attr("dominant-baseline", "central")
          .attr("font-size", "11px")
          .attr("font-weight", "bold")
          .attr("fill", "white")
          .text(d => {
            const name = d.data.name || "";
            return name.length > 15 ? name.substring(0, 12) + "..." : name;
          });
          
        // Personnel labels
        node.filter(d => d.data.type !== 'team')
          .append("text")
          .attr("dy", -15)
          .attr("text-anchor", "middle")
          .attr("font-size", "10px")
          .text(d => d.data.name)
          .style("fill", "#333");
      }
      
      // Add role labels for personnel
      if (showRoles) {
        node.filter(d => d.data.type !== 'team')
          .append("text")
          .attr("dy", 20)
          .attr("text-anchor", "middle")
          .attr("font-size", "8px")
          .text(d => d.data.role || "")
          .style("fill", "#666");
      }
      
      // Add client labels for personnel
      if (showClients) {
        node.filter(d => d.data.type !== 'team' && d.data.client)
          .append("text")
          .attr("dy", 32)
          .attr("text-anchor", "middle")
          .attr("font-size", "8px")
          .attr("font-style", "italic")
          .text(d => d.data.client || "")
          .style("fill", "#999");
      }
    }

    // Add zoom behavior
    const zoom = d3.zoom()
      .scaleExtent([0.1, 3])
      .on("zoom", (event) => {
        g.attr("transform", event.transform);
        // Update zoom level display
        document.getElementById('zoomLevel').textContent = `${Math.round(event.transform.k * 100)}%`;
      });

    svg.call(zoom);

    // Center the visualization initially
    const svgNode = svg.node();
    if (svgNode) {
      const bounds = g.node().getBBox();
      const transX = width / 2 - (bounds.x + bounds.width / 2);
      const transY = 40; // Add top margin
      
      svg.call(zoom.transform, d3.zoomIdentity
        .translate(transX, transY)
        .scale(0.8));
      
      // Update zoom level display
      document.getElementById('zoomLevel').textContent = '80%';
    }
    
    // Store references for later use
    this.orgChartSvg = svg;
    this.orgChartZoom = zoom;
  },

  // Prepare hierarchical data for org chart
  prepareOrgChartData(clientFilter = 'all', streamFilter = 'all') {
    // Check if we have teams data
    if (!window.appData || !window.appData.teams || !Array.isArray(window.appData.teams) || window.appData.teams.length === 0) {
      return null;
    }
    
    // Filter teams by stream if specified
    let filteredTeams = window.appData.teams;
    if (streamFilter !== 'all') {
      filteredTeams = filteredTeams.filter(team => team && team.stream === streamFilter);
    }
    
    // Create the organizational structure
    const root = {
      name: "Quality Organization",
      stream: "root",
      type: "organization",
      children: []
    };
    
    // Group teams by stream
    const streamGroups = {};
    
    filteredTeams.forEach(team => {
      if (!team) return;
      
      const stream = team.stream || "unknown";
      
      if (!streamGroups[stream]) {
        streamGroups[stream] = {
          name: stream.toUpperCase() + " Stream",
          stream: stream,
          type: "stream",
          children: []
        };
        root.children.push(streamGroups[stream]);
      }
      
      // Create team node
      const teamNode = {
        id: team.id,
        name: team.name || "Unnamed Team",
        stream: stream,
        type: "team",
        description: team.description,
        responsibilities: team.responsibilities,
        performance: team.performance,
        children: []
      };
      
      // Add personnel nodes filtered by client if needed
      if (Array.isArray(team.personnel)) {
        team.personnel.forEach(person => {
          if (!person) return;
          
          // Apply client filter
          if (clientFilter !== 'all' && person.client !== clientFilter) {
            return;
          }
          
          teamNode.children.push({
            id: person.id,
            name: person.name || "Unnamed",
            stream: stream,
            type: "person",
            role: person.role,
            client: person.client,
            skills: person.skills
          });
        });
      }
      
      // Only add team if it has personnel after filtering
      if (clientFilter === 'all' || teamNode.children.length > 0) {
        streamGroups[stream].children.push(teamNode);
      }
    });
    
    // Remove empty streams
    root.children = root.children.filter(stream => stream.children.length > 0);
    
    return root;
  },

  // Change org chart layout
  changeOrgChartLayout(layout) {
    if (layout !== this.currentOrgChartLayout) {
      this.currentOrgChartLayout = layout;
      this.updateOrgChart();
    }
  },

  // Update the org chart
  updateOrgChart() {
    this.initializeOrgChart();
  },

  // Zoom org chart
  zoomOrgChart(factor) {
    if (!this.orgChartSvg || !this.orgChartZoom) return;
    
    const currentTransform = d3.zoomTransform(this.orgChartSvg.node());
    const newScale = currentTransform.k * factor;
    
    this.orgChartSvg.transition()
      .duration(300)
      .call(this.orgChartZoom.transform, d3.zoomIdentity
        .translate(currentTransform.x, currentTransform.y)
        .scale(newScale));
    
    // Update zoom level display
    document.getElementById('zoomLevel').textContent = `${Math.round(newScale * 100)}%`;
  },

  // Reset org chart zoom
  resetOrgChartZoom() {
    if (!this.orgChartSvg || !this.orgChartZoom) return;
    
    const width = document.getElementById('orgChart').clientWidth;
    const g = this.orgChartSvg.select("g");
    const bounds = g.node().getBBox();
    const transX = width / 2 - (bounds.x + bounds.width / 2);
    const transY = 40; // Add top margin
    
    this.orgChartSvg.transition()
      .duration(500)
      .call(this.orgChartZoom.transform, d3.zoomIdentity
        .translate(transX, transY)
        .scale(0.8));
    
    // Update zoom level display
    document.getElementById('zoomLevel').textContent = '80%';
  },

  // Search in org chart
  searchOrgChart(searchTerm) {
    if (!searchTerm) {
      // Reset all nodes to normal opacity
      d3.selectAll(".node")
        .style("opacity", 1)
        .select("circle, rect")
        .style("stroke", "#fff");
      return;
    }
    
    searchTerm = searchTerm.toLowerCase();
    
    d3.selectAll(".node").each(function(d) {
      // Check if node data matches search term
      const node = d3.select(this);
      const data = d.data;
      
      const nameMatch = (data.name || "").toLowerCase().includes(searchTerm);
      const roleMatch = (data.role || "").toLowerCase().includes(searchTerm);
      const clientMatch = (data.client || "").toLowerCase().includes(searchTerm);
      
      const matches = nameMatch || roleMatch || clientMatch;
      
      // Highlight matching nodes
      node.style("opacity", matches ? 1 : 0.2);
      node.select("circle, rect")
        .style("stroke", matches ? "#ff6b6b" : "#fff")
        .style("stroke-width", matches ? 3 : 2);
    });
  },

  // Export org chart as SVG
  exportOrgChart() {
    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <h2 class="text-xl font-semibold mb-4">Export Organization Chart</h2>
        <div class="space-y-4">
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <button class="btn-secondary p-6 text-center flex flex-col items-center justify-center" id="exportSvgBtn">
              <i class="fas fa-file-image text-3xl mb-2"></i>
              <span class="text-lg font-medium">SVG Format</span>
              <span class="text-sm text-gray-500">Vector graphic for high-quality prints</span>
            </button>
            <button class="btn-secondary p-6 text-center flex flex-col items-center justify-center" id="exportPngBtn">
              <i class="fas fa-image text-3xl mb-2"></i>
              <span class="text-lg font-medium">PNG Format</span>
              <span class="text-sm text-gray-500">Image for presentations and documents</span>
            </button>
          </div>
        </div>
        <div class="flex justify-end mt-4">
          <button class="btn-secondary" onclick="ui.hideModal()">Cancel</button>
        </div>
      </div>
    `;
    document.body.appendChild(modal);
    
    // Add export button handlers
    document.getElementById('exportSvgBtn').addEventListener('click', () => {
      this.exportOrgChartSvg();
      this.hideModal();
    });
    
    document.getElementById('exportPngBtn').addEventListener('click', () => {
      this.exportOrgChartPng();
      this.hideModal();
    });
  },
  
  // Export org chart as SVG
  exportOrgChartSvg() {
    const svg = document.querySelector("#orgChart svg");
    if (!svg) {
      this.showToast('Error: SVG element not found', 'error');
      return;
    }
    
    try {
      // Get client and stream filter values for filename
      const clientFilter = document.getElementById('clientFilter')?.value || 'all';
      const streamFilter = document.getElementById('streamFilter')?.value || 'all';
      
      // Clone the SVG to avoid modifying the original
      const svgClone = svg.cloneNode(true);
      
      // Add CSS styles to the SVG
      const style = document.createElement('style');
      style.textContent = `
        .node circle, .node rect {
          stroke: #fff;
          stroke-width: 2px;
        }
        .link {
          fill: none;
          stroke: #ccc;
          stroke-width: 1.5px;
        }
        text {
          font-family: Arial, sans-serif;
        }
      `;
      svgClone.appendChild(style);
      
      // Set explicit width and height
      svgClone.setAttribute('width', '1200');
      svgClone.setAttribute('height', '800');
      
      // Add title and metadata
      const title = document.createElement('title');
      title.textContent = 'Quality Organization Chart';
      svgClone.appendChild(title);
      
      const metadata = document.createElement('metadata');
      metadata.innerHTML = `<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
        <rdf:Description>
          <dc:title xmlns:dc="http://purl.org/dc/elements/1.1/">Quality Organization Chart</dc:title>
          <dc:date xmlns:dc="http://purl.org/dc/elements/1.1/">${new Date().toISOString()}</dc:date>
        </rdf:Description>
      </rdf:RDF>`;
      svgClone.appendChild(metadata);
      
      // Add footer text with generation info
      const footer = document.createElementNS("http://www.w3.org/2000/svg", "text");
      footer.setAttribute("x", "10");
      footer.setAttribute("y", "790");
      footer.setAttribute("font-size", "10");
      footer.setAttribute("fill", "#999");
      footer.textContent = `Generated: ${new Date().toLocaleString()}`;
      svgClone.appendChild(footer);
      
      // Add filter info if applicable
      if (clientFilter !== 'all' || streamFilter !== 'all') {
        const filterInfo = document.createElementNS("http://www.w3.org/2000/svg", "text");
        filterInfo.setAttribute("x", "10");
        filterInfo.setAttribute("y", "770");
        filterInfo.setAttribute("font-size", "10");
        filterInfo.setAttribute("fill", "#999");
        
        let filterText = 'Filtered by: ';
        if (streamFilter !== 'all') filterText += `Stream: ${streamFilter.toUpperCase()} `;
        if (clientFilter !== 'all') filterText += `Client: ${clientFilter}`;
        
        filterInfo.textContent = filterText;
        svgClone.appendChild(filterInfo);
      }
      
      // Convert to SVG string
      const serializer = new XMLSerializer();
      const source = serializer.serializeToString(svgClone);
      
      // Create and trigger download
      const blob = new Blob([source], { type: "image/svg+xml" });
      const url = URL.createObjectURL(blob);
      
      // Generate filename based on filters
      let filename = 'org-chart';
      if (streamFilter !== 'all') filename += `-${streamFilter}`;
      if (clientFilter !== 'all') filename += `-${clientFilter.replace(/\s+/g, '-')}`;
      
      const a = document.createElement("a");
      a.href = url;
      a.download = `${filename}.svg`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      
      this.showToast('SVG exported successfully', 'success');
    } catch (error) {
      console.error('Error exporting SVG:', error);
      this.showToast('Error exporting SVG: ' + error.message, 'error');
    }
  },
  
  // Export org chart as PNG
  exportOrgChartPng() {
    const svg = document.querySelector("#orgChart svg");
    if (!svg) {
      this.showToast('Error: SVG element not found', 'error');
      return;
    }
    
    try {
      // Check if html2canvas is loaded
      if (typeof html2canvas === 'undefined') {
        this.showToast('Error: html2canvas library not loaded', 'error');
        return;
      }
      
      // Get client and stream filter values for filename
      const clientFilter = document.getElementById('clientFilter')?.value || 'all';
      const streamFilter = document.getElementById('streamFilter')?.value || 'all';
      
      // Generate filename based on filters
      let filename = 'org-chart';
      if (streamFilter !== 'all') filename += `-${streamFilter}`;
      if (clientFilter !== 'all') filename += `-${clientFilter.replace(/\s+/g, '-')}`;
      
      // Use html2canvas to create PNG
      html2canvas(svg).then(canvas => {
        // Create and trigger download
        const link = document.createElement('a');
        link.download = `${filename}.png`;
        link.href = canvas.toDataURL('image/png');
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        
        this.showToast('PNG exported successfully', 'success');
      }).catch(error => {
        console.error('Error creating PNG:', error);
        this.showToast('Error creating PNG: ' + error.message, 'error');
      });
    } catch (error) {
      console.error('Error exporting PNG:', error);
      this.showToast('Error exporting PNG: ' + error.message, 'error');
    }
  },
  
  // Show node details
  showNodeDetails(nodeData) {
    if (!nodeData) return;
    
    const detailsDiv = document.getElementById('nodeDetails');
    const titleDiv = document.getElementById('detailsTitle');
    const contentDiv = document.getElementById('detailsContent');
    
    if (!detailsDiv || !titleDiv || !contentDiv) return;
    
    // Set title based on node type
    titleDiv.textContent = nodeData.type === 'team' ? 'Team Details' : 'Personnel Details';
    
    // Create content based on node type
    let content = '';
    
    if (nodeData.type === 'team') {
      content = `
        <div class="space-y-4">
          <div>
            <h4 class="font-semibold">Name</h4>
            <p>${this.sanitizeHtml(nodeData.name)}</p>
          </div>
          <div>
            <h4 class="font-semibold">Stream</h4>
            <p class="capitalize">${this.sanitizeHtml(nodeData.stream)}</p>
          </div>
          ${nodeData.description ? `
            <div>
              <h4 class="font-semibold">Description</h4>
              <p>${this.sanitizeHtml(nodeData.description)}</p>
            </div>
          ` : ''}
          ${nodeData.responsibilities ? `
            <div>
              <h4 class="font-semibold">Responsibilities</h4>
              <p>${this.sanitizeHtml(nodeData.responsibilities)}</p>
            </div>
          ` : ''}
          ${nodeData.performance !== undefined ? `
            <div>
              <h4 class="font-semibold">Performance</h4>
              <div class="w-full bg-gray-200 rounded-full h-2 mb-1">
                <div class="bg-${nodeData.stream}-600 h-2 rounded-full" style="width: ${nodeData.performance}%"></div>
              </div>
              <p class="text-right text-sm text-gray-600">${nodeData.performance}%</p>
            </div>
          ` : ''}
          <div class="flex justify-end">
            <button class="btn-primary" onclick="ui.viewTeamDetails(${nodeData.id})">View Full Details</button>
          </div>
        </div>
      `;
    } else {
      content = `
        <div class="space-y-4">
          <div>
            <h4 class="font-semibold">Name</h4>
            <p>${this.sanitizeHtml(nodeData.name)}</p>
          </div>
          ${nodeData.role ? `
            <div>
              <h4 class="font-semibold">Role</h4>
              <p>${this.sanitizeHtml(nodeData.role)}</p>
            </div>
          ` : ''}
          ${nodeData.client ? `
            <div>
              <h4 class="font-semibold">Client</h4>
              <p>${this.sanitizeHtml(nodeData.client)}</p>
            </div>
          ` : ''}
          ${nodeData.skills && Object.keys(nodeData.skills).length > 0 ? `
            <div>
              <h4 class="font-semibold">Skills</h4>
              <div class="flex flex-wrap gap-1 mt-2">
                ${Object.entries(nodeData.skills).map(([skill, level]) => `
                  <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-${nodeData.stream}-100 text-${nodeData.stream}-800">
                    ${this.sanitizeHtml(skill)}: ${level}
                  </span>
                `).join('')}
              </div>
            </div>
          ` : ''}
        </div>
      `;
    }
    
    contentDiv.innerHTML = content;
    detailsDiv.classList.remove('hidden');
  },
  
  // View team details from org chart node
  viewTeamDetails(teamId) {
    // Hide the node details panel
    document.getElementById('nodeDetails')?.classList.add('hidden');
    
    // Show the team details
    this.showTeamDetails(teamId);
  },

  loadDocumentation() {
    const tabContent = document.getElementById('tabContent');
    if (!tabContent) return;
    
    // Check if already loading
    if (tabContent.dataset.loading === 'true') {
      console.log('Documentation already loading, skipping duplicate load');
      return;
    }

    // Set loading state
    tabContent.dataset.loading = 'true';
    
    tabContent.innerHTML = `
      <div class="space-y-6">
        <div class="flex justify-between items-center">
          <h2 class="text-2xl font-semibold">Documentation</h2>
          <button class="btn-primary" onclick="ui.showAddDocumentModal()">
            <i class="fas fa-plus mr-2"></i> Add Document
          </button>
        </div>

        <!-- Document Filters -->
        <div class="flex space-x-4 mb-4">
          <select id="docTypeFilter" class="form-select" onchange="ui.filterDocuments()">
            <option value="">All Types</option>
            <option value="manual">Quality Manual</option>
            <option value="procedure">Procedure</option>
            <option value="form">Form</option>
            <option value="report">Report</option>
          </select>
          <select id="docStatusFilter" class="form-select" onchange="ui.filterDocuments()">
            <option value="">All Statuses</option>
            <option value="draft">Draft</option>
            <option value="review">In Review</option>
            <option value="approved">Approved</option>
            <option value="archived">Archived</option>
          </select>
          <input type="text" id="docSearch" class="form-input flex-1" 
                 placeholder="Search documents..." oninput="ui.filterDocuments()">
        </div>

        <!-- Documents Grid -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6" id="documentsGrid">
          ${this.renderDocumentationCards()}
        </div>
      </div>
    `;
    
    // Reset loading state
    tabContent.dataset.loading = 'false';
  },

  renderDocumentationCards() {
    if (!window.appData || !window.appData.documents || !Array.isArray(window.appData.documents) || window.appData.documents.length === 0) {
      return '<p class="text-gray-500 text-center py-8">No documents found. Use the "Add Document" button to create your first document.</p>';
    }
    
    return window.appData.documents.map(doc => `
      <div class="card document-card" data-type="${doc.type}" data-status="${doc.status}">
        <div class="flex justify-between items-start mb-4">
          <div>
            <h3 class="text-xl font-semibold">${doc.title}</h3>
            <p class="text-sm text-gray-600">${doc.type.charAt(0).toUpperCase() + doc.type.slice(1)}</p>
          </div>
          <div class="flex space-x-2">
            <button class="btn-icon" onclick="ui.editDocument(${doc.id})">
              <i class="fas fa-edit"></i>
            </button>
            <button class="btn-icon" onclick="ui.deleteDocument(${doc.id})">
              <i class="fas fa-trash"></i>
            </button>
          </div>
        </div>

        <div class="space-y-4">
          <div>
            <p class="text-gray-600">${doc.description}</p>
          </div>

          <div class="flex items-center justify-between">
            <div class="flex items-center space-x-2">
              <span class="px-2 py-1 text-xs rounded-full ${
                doc.status === 'approved' ? 'bg-green-100 text-green-800' :
                doc.status === 'review' ? 'bg-yellow-100 text-yellow-800' :
                doc.status === 'draft' ? 'bg-gray-100 text-gray-800' :
                'bg-red-100 text-red-800'
              }">
                ${doc.status.charAt(0).toUpperCase() + doc.status.slice(1)}
              </span>
              <span class="text-sm text-gray-500">v${doc.version}</span>
            </div>
            <span class="text-sm text-gray-500">Last updated: ${doc.lastUpdated}</span>
          </div>

          <div class="flex items-center justify-between">
            <div class="flex items-center space-x-2">
              <button class="btn-secondary btn-sm" onclick="ui.viewDocument(${doc.id})">
                <i class="fas fa-eye mr-2"></i> View
              </button>
              <button class="btn-secondary btn-sm" onclick="ui.downloadDocument(${doc.id})">
                <i class="fas fa-download mr-2"></i> Download
              </button>
            </div>
            <button class="btn-secondary btn-sm" onclick="ui.showVersionHistory(${doc.id})">
              <i class="fas fa-history mr-2"></i> History
            </button>
          </div>
        </div>
      </div>
    `).join('');
  },

  filterDocuments() {
    const typeFilter = document.getElementById("docTypeFilter").value;
    const statusFilter = document.getElementById("docStatusFilter").value;
    const searchTerm = document.getElementById("docSearch").value.toLowerCase();
    const cards = document.querySelectorAll(".document-card");

    cards.forEach(card => {
      const type = card.getAttribute("data-type");
      const status = card.getAttribute("data-status");
      const title = card.querySelector("h3").textContent.toLowerCase();
      const description = card.querySelector(".text-gray-600").textContent.toLowerCase();
      
      const matchesType = !typeFilter || type === typeFilter;
      const matchesStatus = !statusFilter || status === statusFilter;
      const matchesSearch = !searchTerm || 
        title.includes(searchTerm) || 
        description.includes(searchTerm);
      
      card.style.display = matchesType && matchesStatus && matchesSearch ? "" : "none";
    });
  },

  showAddDocumentModal() {
    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <h2 class="text-xl font-semibold mb-4">Add New Document</h2>
        <form id="addDocumentForm">
          <div class="form-group">
            <label for="docTitle">Title</label>
            <input type="text" id="docTitle" required>
          </div>
          <div class="form-group">
            <label for="docType">Type</label>
            <select id="docType" required>
              <option value="manual">Quality Manual</option>
              <option value="procedure">Procedure</option>
              <option value="form">Form</option>
              <option value="report">Report</option>
            </select>
          </div>
          <div class="form-group">
            <label for="docDescription">Description</label>
            <textarea id="docDescription" rows="3" required></textarea>
          </div>
          <div class="form-group">
            <label for="docFile">Document File</label>
            <input type="file" id="docFile" required>
          </div>
          <div class="flex justify-end space-x-2 mt-4">
            <button type="button" class="btn-secondary" onclick="ui.hideModal()">Cancel</button>
            <button type="submit" class="btn-primary">Add Document</button>
          </div>
        </form>
      </div>
    `;
    document.body.appendChild(modal);

    const form = modal.querySelector('#addDocumentForm');
    form.addEventListener('submit', (e) => {
      e.preventDefault();
      const file = form.querySelector('#docFile').files[0];
      const reader = new FileReader();

      reader.onload = (event) => {
        const doc = {
          id: Date.now(),
          title: form.querySelector('#docTitle').value,
          type: form.querySelector('#docType').value,
          description: form.querySelector('#docDescription').value,
          content: event.target.result,
          version: 1,
          status: 'draft',
          lastUpdated: new Date().toISOString().split('T')[0],
          history: [{
            version: 1,
            date: new Date().toISOString().split('T')[0],
            changes: 'Initial version',
            author: window.appData.state.userName
          }]
        };
        
        if (!window.appData.documents) window.appData.documents = [];
        window.appData.documents.push(doc);
        
        this.saveChanges();
        this.hideModal();
        this.showToast('Document added successfully', 'success');
        this.loadDocumentation();
      };

      reader.readAsText(file);
    });
  },

  editDocument(docId) {
    const doc = window.appData.documents.find(d => d.id === docId);
    if (!doc) return;

    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <h2 class="text-xl font-semibold mb-4">Edit Document</h2>
        <form id="editDocumentForm">
          <div class="form-group">
            <label for="docTitle">Title</label>
            <input type="text" id="docTitle" value="${doc.title}" required>
          </div>
          <div class="form-group">
            <label for="docType">Type</label>
            <select id="docType" required>
              <option value="manual" ${doc.type === 'manual' ? 'selected' : ''}>Quality Manual</option>
              <option value="procedure" ${doc.type === 'procedure' ? 'selected' : ''}>Procedure</option>
              <option value="form" ${doc.type === 'form' ? 'selected' : ''}>Form</option>
              <option value="report" ${doc.type === 'report' ? 'selected' : ''}>Report</option>
            </select>
          </div>
          <div class="form-group">
            <label for="docDescription">Description</label>
            <textarea id="docDescription" rows="3" required>${doc.description}</textarea>
          </div>
          <div class="form-group">
            <label for="docStatus">Status</label>
            <select id="docStatus" required>
              <option value="draft" ${doc.status === 'draft' ? 'selected' : ''}>Draft</option>
              <option value="review" ${doc.status === 'review' ? 'selected' : ''}>In Review</option>
              <option value="approved" ${doc.status === 'approved' ? 'selected' : ''}>Approved</option>
              <option value="archived" ${doc.status === 'archived' ? 'selected' : ''}>Archived</option>
            </select>
          </div>
          <div class="flex justify-end space-x-2 mt-4">
            <button type="button" class="btn-secondary" onclick="ui.hideModal()">Cancel</button>
            <button type="submit" class="btn-primary">Save Changes</button>
          </div>
        </form>
      </div>
    `;
    document.body.appendChild(modal);

    const form = modal.querySelector('#editDocumentForm');
    form.addEventListener('submit', (e) => {
      e.preventDefault();
      doc.title = form.querySelector('#docTitle').value;
      doc.type = form.querySelector('#docType').value;
      doc.description = form.querySelector('#docDescription').value;
      doc.status = form.querySelector('#docStatus').value;
      doc.lastUpdated = new Date().toISOString().split('T')[0];
      
      this.saveChanges();
      this.hideModal();
      this.showToast('Document updated successfully', 'success');
      this.loadDocumentation();
    });
  },

  deleteDocument(docId) {
    if (confirm('Are you sure you want to delete this document? This action cannot be undone.')) {
      window.appData.documents = window.appData.documents.filter(d => d.id !== docId);
      this.saveChanges();
      this.showToast('Document deleted successfully', 'success');
      this.loadDocumentation();
    }
  },

  viewDocument(docId) {
    const doc = window.appData.documents.find(d => d.id === docId);
    if (!doc) return;

    const modal = document.createElement('div');
    modal.className = 'modal modal-lg';
    modal.innerHTML = `
      <div class="modal-content">
        <div class="flex justify-between items-center mb-4">
          <h2 class="text-xl font-semibold">${doc.title}</h2>
          <button class="btn-icon" onclick="ui.hideModal()">
            <i class="fas fa-times"></i>
          </button>
        </div>
        <div class="prose max-w-none">
          <pre class="whitespace-pre-wrap">${doc.content}</pre>
        </div>
      </div>
    `;
    document.body.appendChild(modal);
  },

  downloadDocument(docId) {
    const doc = window.appData.documents.find(d => d.id === docId);
    if (!doc) return;

    const blob = new Blob([doc.content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${doc.title.toLowerCase().replace(/\s+/g, '-')}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  },

  showVersionHistory(docId) {
    const doc = window.appData.documents.find(d => d.id === docId);
    if (!doc) return;

    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <h2 class="text-xl font-semibold mb-4">Version History - ${doc.title}</h2>
        <div class="space-y-4">
          ${doc.history.map(version => `
            <div class="border-b pb-4">
              <div class="flex justify-between items-start">
                <div>
                  <p class="font-medium">Version ${version.version}</p>
                  <p class="text-sm text-gray-600">${version.changes}</p>
                </div>
                <div class="text-right">
                  <p class="text-sm text-gray-500">${version.date}</p>
                  <p class="text-sm text-gray-500">by ${version.author}</p>
                </div>
              </div>
            </div>
          `).join('')}
        </div>
        <div class="flex justify-end mt-4">
          <button class="btn-secondary" onclick="ui.hideModal()">Close</button>
        </div>
      </div>
    `;
    document.body.appendChild(modal);
  },

  loadPlanning() {
    const tabContent = document.getElementById('tabContent');
    if (!tabContent) return;

    // Check if already loading
    if (tabContent.dataset.loading === 'true') {
      console.log('Planning already loading, skipping duplicate load');
      return;
    }

    // Set loading state
    tabContent.dataset.loading = 'true';

    tabContent.innerHTML = `
      <div class="space-y-6">
        <!-- Org Roll-out Header -->
        <div class="flex justify-between items-center">
          <div>
            <h2 class="text-2xl font-semibold">Organization Roll-out Plan</h2>
            <p class="text-gray-600 mt-1">Track the implementation of the new organizational structure</p>
          </div>
          <div class="flex space-x-4">
            <button class="btn-outline" onclick="ui.exportRolloutPlan()">
              <i class="fas fa-download mr-2"></i> Export
            </button>
            <button class="btn-primary" onclick="ui.showAddPhaseModal()">
              <i class="fas fa-plus mr-2"></i> Add Phase
            </button>
          </div>
        </div>

        <!-- Progress Overview -->
        <div class="bg-white p-6 rounded-lg shadow-sm border border-gray-200">
          <div class="flex justify-between items-center mb-4">
            <h3 class="text-lg font-semibold">Overall Progress</h3>
            <span class="text-lg font-bold">${this.calculateOverallProgress()}%</span>
          </div>
          <div class="w-full bg-gray-200 rounded-full h-2.5 mb-6">
            <div class="bg-blue-600 h-2.5 rounded-full" style="width: ${this.calculateOverallProgress()}%"></div>
          </div>
          
          <div class="grid grid-cols-1 md:grid-cols-4 gap-4 text-center">
            <div class="bg-blue-50 p-4 rounded-lg">
              <h4 class="text-sm font-medium text-blue-700 mb-2">Planning</h4>
              <p class="text-2xl font-bold text-blue-700">${this.calculatePhaseProgress('planning')}%</p>
            </div>
            <div class="bg-yellow-50 p-4 rounded-lg">
              <h4 class="text-sm font-medium text-yellow-700 mb-2">Transition</h4>
              <p class="text-2xl font-bold text-yellow-700">${this.calculatePhaseProgress('transition')}%</p>
            </div>
            <div class="bg-green-50 p-4 rounded-lg">
              <h4 class="text-sm font-medium text-green-700 mb-2">Implementation</h4>
              <p class="text-2xl font-bold text-green-700">${this.calculatePhaseProgress('implementation')}%</p>
            </div>
            <div class="bg-purple-50 p-4 rounded-lg">
              <h4 class="text-sm font-medium text-purple-700 mb-2">Review</h4>
              <p class="text-2xl font-bold text-purple-700">${this.calculatePhaseProgress('review')}%</p>
            </div>
          </div>
        </div>

        <!-- Timeline View -->
        <div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
          <div class="p-4 border-b border-gray-200">
            <h3 class="text-lg font-semibold">Implementation Timeline</h3>
          </div>
          <div class="p-4 overflow-x-auto">
            <div id="rolloutTimeline" class="w-full" style="min-width: 800px; height: 400px;">
              <!-- Timeline will be rendered here -->
            </div>
          </div>
        </div>

        <!-- Key Milestones -->
        <div class="bg-white rounded-lg shadow-sm border border-gray-200">
          <div class="p-4 border-b border-gray-200 flex justify-between items-center">
            <h3 class="text-lg font-semibold">Key Milestones</h3>
            <button class="btn-sm btn-secondary" onclick="ui.showAddMilestoneModal()">
              <i class="fas fa-plus mr-1"></i> Add Milestone
            </button>
          </div>
          <div class="p-0">
            <table class="w-full">
              <thead class="bg-gray-50">
                <tr>
                  <th class="px-4 py-2 text-left">Milestone</th>
                  <th class="px-4 py-2 text-left">Phase</th>
                  <th class="px-4 py-2 text-left">Due Date</th>
                  <th class="px-4 py-2 text-left">Status</th>
                  <th class="px-4 py-2 text-left">Owner</th>
                  <th class="px-4 py-2 text-right">Actions</th>
                </tr>
              </thead>
              <tbody>
                ${this.renderMilestones()}
              </tbody>
            </table>
          </div>
        </div>

        <!-- Detailed Tasks by Phase -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <!-- Planning Phase -->
          <div class="bg-white rounded-lg shadow-sm border border-gray-200">
            <div class="p-4 border-b border-gray-200 bg-blue-50">
              <h3 class="font-semibold">Planning Phase</h3>
            </div>
            <div class="p-4">
              <ul class="space-y-2">
                ${this.renderPhaseTasks('planning')}
              </ul>
            </div>
          </div>

          <!-- Transition Phase -->
          <div class="bg-white rounded-lg shadow-sm border border-gray-200">
            <div class="p-4 border-b border-gray-200 bg-yellow-50">
              <h3 class="font-semibold">Transition Phase</h3>
            </div>
            <div class="p-4">
              <ul class="space-y-2">
                ${this.renderPhaseTasks('transition')}
              </ul>
            </div>
          </div>

          <!-- Implementation Phase -->
          <div class="bg-white rounded-lg shadow-sm border border-gray-200">
            <div class="p-4 border-b border-gray-200 bg-green-50">
              <h3 class="font-semibold">Implementation Phase</h3>
            </div>
            <div class="p-4">
              <ul class="space-y-2">
                ${this.renderPhaseTasks('implementation')}
              </ul>
            </div>
          </div>

          <!-- Review Phase -->
          <div class="bg-white rounded-lg shadow-sm border border-gray-200">
            <div class="p-4 border-b border-gray-200 bg-purple-50">
              <h3 class="font-semibold">Review Phase</h3>
            </div>
            <div class="p-4">
              <ul class="space-y-2">
                ${this.renderPhaseTasks('review')}
              </ul>
            </div>
          </div>
        </div>
      </div>
    `;

    // Initialize the rollout data if it doesn't exist
    if (!window.appData.rollout) {
      this.initializeRolloutData();
    }

    // Render the timeline
    this.renderRolloutTimeline();
    
    // Reset loading state
    tabContent.dataset.loading = 'false';
  },

  initializeRolloutData() {
    // Create initial structure for rollout data if not exists
    if (!window.appData.rollout) {
      window.appData.rollout = {
        phases: {
          planning: {
            name: "Planning",
            progress: 75,
            tasks: [
              { id: 1, name: "Assessment of current structure", status: "complete", owner: "John Smith" },
              { id: 2, name: "Define new organizational structure", status: "complete", owner: "Sarah Johnson" },
              { id: 3, name: "Stakeholder alignment", status: "in_progress", owner: "John Smith" },
              { id: 4, name: "Documentation of roles & responsibilities", status: "in_progress", owner: "Michael Brown" }
            ]
          },
          transition: {
            name: "Transition",
            progress: 40,
            tasks: [
              { id: 5, name: "Communication plan", status: "complete", owner: "Sarah Johnson" },
              { id: 6, name: "Change management strategy", status: "in_progress", owner: "Jane Doe" },
              { id: 7, name: "Training plan development", status: "not_started", owner: "Michael Brown" }
            ]
          },
          implementation: {
            name: "Implementation",
            progress: 15,
            tasks: [
              { id: 8, name: "Team restructuring", status: "in_progress", owner: "John Smith" },
              { id: 9, name: "Role assignments", status: "not_started", owner: "Sarah Johnson" },
              { id: 10, name: "System access updates", status: "not_started", owner: "Robert Williams" }
            ]
          },
          review: {
            name: "Review",
            progress: 0,
            tasks: [
              { id: 11, name: "Effectiveness assessment", status: "not_started", owner: "John Smith" },
              { id: 12, name: "Gap analysis", status: "not_started", owner: "Jane Doe" },
              { id: 13, name: "Adjustment plan", status: "not_started", owner: "Sarah Johnson" }
            ]
          }
        },
        milestones: [
          { 
            id: 1, 
            name: "Organization structure approved", 
            phase: "planning", 
            dueDate: "2025-04-15", 
            status: "complete", 
            owner: "John Smith" 
          },
          { 
            id: 2, 
            name: "Communication rolled out", 
            phase: "transition", 
            dueDate: "2025-05-01", 
            status: "in_progress", 
            owner: "Sarah Johnson" 
          },
          { 
            id: 3, 
            name: "Team restructuring complete", 
            phase: "implementation", 
            dueDate: "2025-06-15", 
            status: "not_started", 
            owner: "John Smith" 
          },
          { 
            id: 4, 
            name: "Post-implementation review", 
            phase: "review", 
            dueDate: "2025-07-01", 
            status: "not_started", 
            owner: "Jane Doe" 
          }
        ]
      };
      this.saveChanges();
    }
  },

  calculateOverallProgress() {
    if (!window.appData || !window.appData.rollout || !window.appData.rollout.phases) return 0;
    
    const phases = window.appData.rollout.phases;
    if (Object.keys(phases).length === 0) return 0;
    
    const totalProgress = Object.values(phases).reduce((sum, phase) => sum + (phase.progress || 0), 0);
    return Math.round(totalProgress / Object.keys(phases).length);
  },

  calculatePhaseProgress(phaseId) {
    if (!window.appData || !window.appData.rollout || !window.appData.rollout.phases || !window.appData.rollout.phases[phaseId]) return 0;
    return window.appData.rollout.phases[phaseId].progress || 0;
  },

  renderMilestones() {
    if (!window.appData || !window.appData.rollout || !window.appData.rollout.milestones || window.appData.rollout.milestones.length === 0) {
      return '<tr><td colspan="6" class="px-4 py-4 text-center text-gray-500">No milestones defined yet</td></tr>';
    }
    
    return window.appData.rollout.milestones.map(milestone => {
      const statusClass = 
        milestone.status === 'complete' ? 'bg-green-100 text-green-800' :
        milestone.status === 'in_progress' ? 'bg-yellow-100 text-yellow-800' :
        'bg-gray-100 text-gray-800';
      
      return `
        <tr class="border-b">
          <td class="px-4 py-3">${milestone.name}</td>
          <td class="px-4 py-3 capitalize">${milestone.phase}</td>
          <td class="px-4 py-3">${milestone.dueDate}</td>
          <td class="px-4 py-3">
            <span class="px-2 py-1 rounded-full text-xs ${statusClass}">
              ${milestone.status.replace('_', ' ').replace(/\b\w/g, l => l.toUpperCase())}
            </span>
          </td>
          <td class="px-4 py-3">${milestone.owner}</td>
          <td class="px-4 py-3 text-right">
            <button class="btn-icon btn-sm" onclick="ui.editMilestone(${milestone.id})">
              <i class="fas fa-edit"></i>
            </button>
            <button class="btn-icon btn-sm" onclick="ui.deleteMilestone(${milestone.id})">
              <i class="fas fa-trash"></i>
            </button>
          </td>
        </tr>
      `;
    }).join('');
  },

  renderPhaseTasks(phaseId) {
    if (!window.appData || !window.appData.rollout || !window.appData.rollout.phases || !window.appData.rollout.phases[phaseId]) {
      return '<li class="text-gray-500 text-center">No tasks defined for this phase</li>';
    }
    
    const phase = window.appData.rollout.phases[phaseId];
    
    if (!phase.tasks || phase.tasks.length === 0) {
      return '<li class="text-gray-500 text-center">No tasks defined for this phase</li>';
    }
    
    return phase.tasks.map(task => {
      const statusIcon = 
        task.status === 'complete' ? '<i class="fas fa-check-circle text-green-500 mr-2"></i>' :
        task.status === 'in_progress' ? '<i class="fas fa-clock text-yellow-500 mr-2"></i>' :
        '<i class="far fa-circle text-gray-400 mr-2"></i>';
      
      return `
        <li class="flex items-center justify-between">
          <div class="flex items-center">
            ${statusIcon}
            <span class="${task.status === 'complete' ? 'line-through text-gray-500' : ''}">${task.name}</span>
          </div>
          <div class="text-sm text-gray-500">
            ${task.owner}
          </div>
        </li>
      `;
    }).join('');
  },

  renderRolloutTimeline() {
    const timelineEl = document.getElementById('rolloutTimeline');
    if (!timelineEl) return;
    
    // Create a simple timeline visualization
    let html = `<div class="relative">`;
    
    // Draw the timeline base line
    html += `<div class="absolute top-9 left-0 w-full h-1 bg-gray-200"></div>`;
    
    // Add milestones to the timeline
    if (window.appData && window.appData.rollout && window.appData.rollout.milestones && window.appData.rollout.milestones.length > 0) {
      const milestones = window.appData.rollout.milestones;
      const totalWidth = timelineEl.clientWidth - 40;
      
      // Sort milestones by due date
      const sortedMilestones = [...milestones].sort((a, b) => 
        new Date(a.dueDate) - new Date(b.dueDate)
      );
      
      // Find the earliest and latest dates
      const startDate = new Date(sortedMilestones[0].dueDate);
      const endDate = new Date(sortedMilestones[sortedMilestones.length - 1].dueDate);
      const totalDays = (endDate - startDate) / (1000 * 60 * 60 * 24);
      
      sortedMilestones.forEach((milestone, index) => {
        const date = new Date(milestone.dueDate);
        const daysDiff = (date - startDate) / (1000 * 60 * 60 * 24);
        const position = Math.floor((daysDiff / totalDays) * totalWidth);
        
        const statusColor = 
          milestone.status === 'complete' ? 'bg-green-500' :
          milestone.status === 'in_progress' ? 'bg-yellow-500' :
          'bg-gray-500';
        
        html += `
          <div class="absolute" style="left: ${position}px; top: 0;">
            <div class="${statusColor} w-5 h-5 rounded-full border-4 border-white shadow-sm"></div>
            <div class="mt-4 -ml-10 w-20 text-center">
              <div class="text-xs font-bold">${milestone.dueDate}</div>
              <div class="text-xs whitespace-normal" style="word-break: break-word;">${milestone.name}</div>
            </div>
          </div>
        `;
      });
    } else {
      // No milestones - show empty timeline with a message
      html += `
        <div class="absolute left-1/2 transform -translate-x-1/2 text-center" style="top: 20px;">
          <p class="text-gray-500">No milestones defined yet</p>
        </div>
      `;
    }
    
    html += `</div>`;
    timelineEl.innerHTML = html;
  },

  showAddPhaseModal() {
    // Implementation for adding a new phase
    this.showToast('Add Phase functionality will be implemented', 'info');
  },

  showAddMilestoneModal() {
    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <h2 class="text-xl font-semibold mb-4">Add New Milestone</h2>
        <form id="addMilestoneForm">
          <div class="form-group">
            <label for="milestoneName">Milestone Name</label>
            <input type="text" id="milestoneName" required>
          </div>
          <div class="form-group">
            <label for="milestonePhase">Phase</label>
            <select id="milestonePhase" required>
              <option value="planning">Planning</option>
              <option value="transition">Transition</option>
              <option value="implementation">Implementation</option>
              <option value="review">Review</option>
            </select>
          </div>
          <div class="form-group">
            <label for="milestoneDueDate">Due Date</label>
            <input type="date" id="milestoneDueDate" required>
          </div>
          <div class="form-group">
            <label for="milestoneStatus">Status</label>
            <select id="milestoneStatus" required>
              <option value="not_started">Not Started</option>
              <option value="in_progress">In Progress</option>
              <option value="complete">Complete</option>
            </select>
          </div>
          <div class="form-group">
            <label for="milestoneOwner">Owner</label>
            <input type="text" id="milestoneOwner" required>
          </div>
          <div class="flex justify-end space-x-2 mt-4">
            <button type="button" class="btn-secondary" onclick="ui.hideModal()">Cancel</button>
            <button type="submit" class="btn-primary">Add Milestone</button>
          </div>
        </form>
      </div>
    `;
    document.body.appendChild(modal);

    const form = modal.querySelector('#addMilestoneForm');
    form.addEventListener('submit', (e) => {
      e.preventDefault();
      
      // Initialize rollout data if needed
      if (!window.appData.rollout) {
        this.initializeRolloutData();
      }
      
      // Get the highest existing milestone ID
      const maxId = Math.max(...window.appData.rollout.milestones.map(m => m.id), 0);
      
      const milestone = {
        id: maxId + 1,
        name: form.querySelector('#milestoneName').value,
        phase: form.querySelector('#milestonePhase').value,
        dueDate: form.querySelector('#milestoneDueDate').value,
        status: form.querySelector('#milestoneStatus').value,
        owner: form.querySelector('#milestoneOwner').value
      };
      
      window.appData.rollout.milestones.push(milestone);
      
      this.saveChanges();
      this.hideModal();
      this.showToast('Milestone added successfully', 'success');
      this.loadPlanning();
    });
  },

  editMilestone(milestoneId) {
    if (!window.appData.rollout) return;
    
    const milestone = window.appData.rollout.milestones.find(m => m.id === milestoneId);
    if (!milestone) return;
    
    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <h2 class="text-xl font-semibold mb-4">Edit Milestone</h2>
        <form id="editMilestoneForm">
          <div class="form-group">
            <label for="milestoneName">Milestone Name</label>
            <input type="text" id="milestoneName" value="${milestone.name}" required>
          </div>
          <div class="form-group">
            <label for="milestonePhase">Phase</label>
            <select id="milestonePhase" required>
              <option value="planning" ${milestone.phase === 'planning' ? 'selected' : ''}>Planning</option>
              <option value="transition" ${milestone.phase === 'transition' ? 'selected' : ''}>Transition</option>
              <option value="implementation" ${milestone.phase === 'implementation' ? 'selected' : ''}>Implementation</option>
              <option value="review" ${milestone.phase === 'review' ? 'selected' : ''}>Review</option>
            </select>
          </div>
          <div class="form-group">
            <label for="milestoneDueDate">Due Date</label>
            <input type="date" id="milestoneDueDate" value="${milestone.dueDate}" required>
          </div>
          <div class="form-group">
            <label for="milestoneStatus">Status</label>
            <select id="milestoneStatus" required>
              <option value="not_started" ${milestone.status === 'not_started' ? 'selected' : ''}>Not Started</option>
              <option value="in_progress" ${milestone.status === 'in_progress' ? 'selected' : ''}>In Progress</option>
              <option value="complete" ${milestone.status === 'complete' ? 'selected' : ''}>Complete</option>
            </select>
          </div>
          <div class="form-group">
            <label for="milestoneOwner">Owner</label>
            <input type="text" id="milestoneOwner" value="${milestone.owner}" required>
          </div>
          <div class="flex justify-end space-x-2 mt-4">
            <button type="button" class="btn-secondary" onclick="ui.hideModal()">Cancel</button>
            <button type="submit" class="btn-primary">Save Changes</button>
          </div>
        </form>
      </div>
    `;
    document.body.appendChild(modal);

    const form = modal.querySelector('#editMilestoneForm');
    form.addEventListener('submit', (e) => {
      e.preventDefault();
      
      milestone.name = form.querySelector('#milestoneName').value;
      milestone.phase = form.querySelector('#milestonePhase').value;
      milestone.dueDate = form.querySelector('#milestoneDueDate').value;
      milestone.status = form.querySelector('#milestoneStatus').value;
      milestone.owner = form.querySelector('#milestoneOwner').value;
      
      this.saveChanges();
      this.hideModal();
      this.showToast('Milestone updated successfully', 'success');
      this.loadPlanning();
    });
  },

  deleteMilestone(milestoneId) {
    if (!window.appData.rollout) return;
    
    if (confirm('Are you sure you want to delete this milestone? This action cannot be undone.')) {
      window.appData.rollout.milestones = window.appData.rollout.milestones.filter(m => m.id !== milestoneId);
      
      this.saveChanges();
      this.showToast('Milestone deleted successfully', 'success');
      this.loadPlanning();
    }
  },

  exportRolloutPlan() {
    if (!window.appData.rollout) {
      this.showToast('No rollout data to export', 'error');
      return;
    }
    
    const data = JSON.stringify(window.appData.rollout, null, 2);
    const blob = new Blob([data], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    
    const link = document.createElement('a');
    link.setAttribute('href', url);
    link.setAttribute('download', 'organization_rollout_plan.json');
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
    
    this.showToast('Rollout plan exported successfully', 'success');
  },

  loadPersonnel() {
    try {
      console.log('Loading personnel content...');
      
      const tabContent = document.getElementById('tabContent');
      if (!tabContent) {
        console.error('Tab content element not found');
        return;
      }
      
      // Check if already loading
      if (tabContent.dataset.loading === 'true' && tabContent.dataset.currentTab === 'personnel') {
        console.log('Personnel already loading, skipping duplicate load request');
        return;
      }

      // Set loading state
      tabContent.dataset.loading = 'true';
      tabContent.dataset.currentTab = 'personnel';
      
      // Clear any existing content
      tabContent.innerHTML = `
        <div class="flex justify-center items-center p-12">
          <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
          <p class="ml-4 text-gray-500">Loading personnel content...</p>
        </div>
      `;
      
      // Use a timeout to ensure loading indicator is shown
      setTimeout(() => {
        try {
          // Ensure appData exists
          if (!window.appData) window.appData = {};
          if (!window.appData.teams) window.appData.teams = [];
          const teams = window.appData.teams;
          
          // Extract all personnel from teams
          const allPersonnel = [];
          teams.forEach(team => {
            if (team && team.personnel) {
              team.personnel.forEach(person => {
                if (person) {
                  allPersonnel.push({
                    ...person,
                    team: team.name || 'Unknown Team',
                    stream: team.stream || 'unknown'
                  });
                }
              });
            }
          });
          
          tabContent.innerHTML = `
            <div class="p-4">
              <div class="flex justify-between items-center mb-6">
                <h2 class="text-2xl font-bold">Personnel</h2>
                <div class="flex items-center gap-4">
                  <div class="relative">
                    <input type="text" id="personnelSearch" placeholder="Search personnel..." 
                      class="border rounded-lg pl-10 pr-4 py-2 w-64 focus:outline-none focus:ring-2 focus:ring-blue-400">
                    <i class="fas fa-search absolute left-3 top-3 text-gray-400"></i>
                  </div>
                  <button class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition flex items-center" id="addPersonBtn">
                    <i class="fas fa-plus mr-2"></i> Add Person
                  </button>
                </div>
              </div>
              
              <!-- Personnel Table -->
              <div class="bg-white rounded-lg shadow overflow-hidden">
                <table class="min-w-full divide-y divide-gray-200">
                  <thead class="bg-gray-50">
                    <tr>
                      <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                      <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Role</th>
                      <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Team</th>
                      <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Client</th>
                      <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                    </tr>
                  </thead>
                  <tbody class="bg-white divide-y divide-gray-200">
                    ${allPersonnel.length > 0 ? allPersonnel.map(person => `
                      <tr>
                        <td class="px-6 py-4 whitespace-nowrap">${person.name || 'Unknown'}</td>
                        <td class="px-6 py-4 whitespace-nowrap">${person.role || 'Unspecified'}</td>
                        <td class="px-6 py-4 whitespace-nowrap">
                          <span class="px-2 py-1 text-xs rounded-full text-white bg-gray-600">${person.team}</span>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">${person.client || 'None'}</td>
                        <td class="px-6 py-4 whitespace-nowrap">
                          <button class="text-blue-600 hover:text-blue-800 mr-2 edit-person-btn" data-person-id="${person.id}" title="Edit">
                            <i class="fas fa-edit"></i>
                          </button>
                          <button class="text-red-600 hover:text-red-800 delete-person-btn" data-person-id="${person.id}" title="Delete">
                            <i class="fas fa-trash-alt"></i>
                          </button>
                        </td>
                      </tr>
                    `).join('') : '<tr><td colspan="5" class="px-6 py-4 text-center text-gray-500">No personnel data available</td></tr>'}
                  </tbody>
                </table>
              </div>
            </div>
          `;
          
          // Add event listeners
          if (allPersonnel.length > 0) {
            this.addPersonnelEventListeners(allPersonnel);
          }
          
          // Reset loading state
          tabContent.dataset.loading = 'false';
          
          console.log('Personnel content loaded successfully');
        } catch (error) {
          console.error('Error loading personnel:', error);
          
          tabContent.innerHTML = `
            <div class="p-8 text-center">
              <div class="text-red-500 text-xl mb-4">
                <i class="fas fa-exclamation-triangle mr-2"></i> 
                Error loading Personnel
              </div>
              <p class="mb-4">${error.message || 'An unknown error occurred'}</p>
              <button class="px-4 py-2 bg-blue-600 text-white rounded" onclick="ui.switchTab('personnel')">
                <i class="fas fa-sync-alt mr-2"></i> Try Again
              </button>
            </div>
          `;
          
          // Reset loading state
          tabContent.dataset.loading = 'false';
        }
      }, 150); // Slightly longer delay for better reliability
    } catch (error) {
      console.error('Critical error in loadPersonnel:', error);
      
      const tabContent = document.getElementById('tabContent');
      if (tabContent) {
        tabContent.innerHTML = `
          <div class="p-8 text-center">
            <div class="text-red-500 text-xl mb-4">
              <i class="fas fa-exclamation-triangle mr-2"></i> 
              Critical Error Loading Personnel
            </div>
            <p class="mb-4">${error.message || 'An unknown error occurred'}</p>
            <button class="px-4 py-2 bg-blue-600 text-white rounded" onclick="location.reload()">
              <i class="fas fa-sync-alt mr-2"></i> Refresh Page
            </button>
          </div>
        `;
        
        // Reset loading state
        tabContent.dataset.loading = 'false';
      }
    }
  },

  // Add a helper method for personnel event listeners
  addPersonnelEventListeners(personnelList) {
    // Add search functionality
    const searchInput = document.getElementById('personnelSearch');
    if (searchInput) {
      searchInput.addEventListener('input', (e) => {
        const value = e.target.value.toLowerCase();
        const rows = document.querySelectorAll('tbody tr');
        
        rows.forEach(row => {
          const text = row.textContent.toLowerCase();
          row.style.display = text.includes(value) ? '' : 'none';
        });
      });
    }
    
    // Add person button
    const addPersonBtn = document.getElementById('addPersonBtn');
    if (addPersonBtn) {
      addPersonBtn.addEventListener('click', () => {
        // Check if teams exist before adding a person
        if (window.appData.teams && window.appData.teams.length > 0) {
          this.showAddPersonModal();
        } else {
          this.showToast('You need to create a team first before adding personnel', 'warning');
        }
      });
    }
    
    // Edit person buttons
    const editBtns = document.querySelectorAll('.edit-person-btn');
    editBtns.forEach(btn => {
      const personId = parseInt(btn.getAttribute('data-person-id'));
      btn.addEventListener('click', () => {
        // Find the person in the personnel list
        const person = personnelList.find(p => p.id === personId);
        if (person) {
          this.editPersonnel(personId);
        }
      });
    });
    
    // Delete person buttons
    const deleteBtns = document.querySelectorAll('.delete-person-btn');
    deleteBtns.forEach(btn => {
      const personId = parseInt(btn.getAttribute('data-person-id'));
      btn.addEventListener('click', () => {
        // Find the team that contains this person
        const team = window.appData.teams.find(t => 
          t.personnel && t.personnel.some(p => p.id === personId)
        );
        
        if (team) {
          this.removePersonnel(personId, team.id);
        }
      });
    });
  },

  // Helper function to show add person modal
  showAddPersonModal() {
    try {
      const teams = window.appData?.teams || [];
      
      if (teams.length === 0) {
        this.showToast('You need to create a team first before adding personnel', 'warning');
        return;
      }
      
      const modal = document.createElement('div');
      modal.className = 'modal';
      modal.innerHTML = `
        <div class="modal-content">
          <h2 class="text-xl font-semibold mb-4">Add New Person</h2>
          <form id="addPersonForm">
            <div class="form-group">
              <label for="personName">Name</label>
              <input type="text" id="personName" required>
            </div>
            <div class="form-group">
              <label for="personRole">Role</label>
              <input type="text" id="personRole" required>
            </div>
            <div class="form-group">
              <label for="personClient">Client</label>
              <input type="text" id="personClient" required>
            </div>
            <div class="form-group">
              <label for="personTeam">Team</label>
              <select id="personTeam" required>
                ${teams.map(team => `<option value="${team.id}">${team.name || 'Team #' + team.id}</option>`).join('')}
              </select>
            </div>
            <div class="flex justify-end space-x-2 mt-4">
              <button type="button" class="btn-secondary" onclick="ui.hideModal()">Cancel</button>
              <button type="submit" class="btn-primary">Add Person</button>
            </div>
          </form>
        </div>
      `;
      document.body.appendChild(modal);
      
      const form = modal.querySelector('#addPersonForm');
      if (form) {
        form.addEventListener('submit', (e) => {
          e.preventDefault();
          
          try {
            const teamId = parseInt(form.querySelector('#personTeam').value);
            const team = teams.find(t => t.id === teamId);
            
            if (team) {
              const personId = Date.now();
              const newPerson = {
                id: personId,
                name: form.querySelector('#personName').value,
                role: form.querySelector('#personRole').value,
                client: form.querySelector('#personClient').value
              };
              
              if (!team.personnel) {
                team.personnel = [];
              }
              
              team.personnel.push(newPerson);
              this.saveChanges();
              this.hideModal();
              this.showToast('Person added successfully', 'success');
              this.loadPersonnel();
            } else {
              this.showToast('Selected team not found', 'error');
            }
          } catch (formError) {
            console.error('Error adding person:', formError);
            this.showToast('Error adding person: ' + (formError.message || 'Unknown error'), 'error');
          }
        });
      }
    } catch (error) {
      console.error('Error showing add person modal:', error);
      this.showToast('Could not open add person form', 'error');
    }
  },
  
  // Load dashboard content
  loadDashboard() {
    try {
      console.log('Loading dashboard content...');
      
      const tabContent = document.getElementById('tabContent');
      if (!tabContent) {
        console.error('Tab content element not found');
        return;
      }
      
      // If dashboard is already loading, don't try to load it again
      if (tabContent.dataset.loading === 'true' && tabContent.dataset.currentTab === 'dashboard') {
        console.log('Dashboard already loading, skipping duplicate load request');
        return;
      }
      
      // Set loading state
      tabContent.dataset.loading = 'true';
      tabContent.dataset.currentTab = 'dashboard';
      
      // Calculate statistics once and reuse
      const stats = this.calculateStats();
      
      // Create Dashboard HTML with optimized template structure
      const dashboardHTML = `
        <div class="p-4">
          <h2 class="text-2xl font-bold mb-6">Dashboard</h2>
          
          <!-- Statistics Cards -->
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-8">
            ${this.createStatCard('BBV Stream', stats.bbv.personnel, stats.bbv.teams, 'blue', 'teams', 'bbv')}
            ${this.createStatCard('ADD Stream', stats.add.personnel, stats.add.teams, 'red', 'teams', 'add')}
            ${this.createStatCard('ARB Stream', stats.arb.personnel, stats.arb.teams, 'purple', 'teams', 'arb')}
            ${this.createStatCard('Shared Services', stats.shared.personnel, stats.shared.teams, 'gray', 'teams', 'shared')}
          </div>
          
          <!-- Charts and Activity Section -->
          <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <!-- Personnel Distribution Chart -->
            <div class="bg-white p-4 rounded-lg shadow lg:col-span-1 cursor-pointer" onclick="ui.switchTab('personnel')">
              <h3 class="font-semibold mb-4">Personnel Distribution</h3>
              <div class="chart-container" style="position: relative; height: 220px;">
                <canvas id="personnelChart"></canvas>
              </div>
            </div>
            
            <!-- Team Performance Chart -->
            <div class="bg-white p-4 rounded-lg shadow lg:col-span-2 cursor-pointer" onclick="ui.switchTab('teams')">
              <h3 class="font-semibold mb-4">Team Performance</h3>
              <div class="chart-container" style="position: relative; height: 220px;">
                <canvas id="performanceChart"></canvas>
              </div>
            </div>
            
            <!-- Recent Activities -->
            <div class="bg-white p-4 rounded-lg shadow cursor-pointer" onclick="ui.showAllActivities()">
              <div class="flex justify-between items-center mb-4">
                <h3 class="font-semibold">Recent Activities</h3>
                <button class="text-blue-600 text-sm hover:text-blue-800" id="viewAllActivitiesBtn">
                  View All
                </button>
              </div>
              <div class="activities-container">
                ${this.renderRecentActivities()}
              </div>
            </div>
            
            <!-- Upcoming Tasks -->
            <div class="bg-white p-4 rounded-lg shadow lg:col-span-2 cursor-pointer" onclick="ui.switchTab('planning')">
              <div class="flex justify-between items-center mb-4">
                <h3 class="font-semibold">Upcoming Tasks</h3>
                <button class="text-blue-600 text-sm hover:text-blue-800" id="viewAllTasksBtn">
                  View All
                </button>
              </div>
              <div class="tasks-container">
                ${this.renderUpcomingTasks()}
              </div>
            </div>
          </div>
        </div>
      `;
      
      // Set content
      tabContent.innerHTML = dashboardHTML;
      
      // Initialize charts after content is loaded
      this.initializeCharts();
      
      // Add event listeners for dashboard actions
      document.getElementById('viewAllActivitiesBtn')?.addEventListener('click', (e) => {
        e.stopPropagation(); // Prevent parent div click
        this.showAllActivities();
      });
      document.getElementById('viewAllTasksBtn')?.addEventListener('click', (e) => {
        e.stopPropagation(); // Prevent parent div click
        this.switchTab('planning');
      });
      
      // Reset loading state
      tabContent.dataset.loading = 'false';
      
      console.log('Dashboard loaded successfully');
    } catch (error) {
      console.error('Error loading dashboard:', error);
      
      const tabContent = document.getElementById('tabContent');
      if (tabContent) {
        tabContent.innerHTML = `
          <div class="p-8 text-center">
            <div class="text-red-500 text-xl mb-4">
              <i class="fas fa-exclamation-triangle mr-2"></i> 
              Error Loading Dashboard
            </div>
            <p class="mb-4">${error.message || 'An unknown error occurred'}</p>
            <button class="px-4 py-2 bg-blue-600 text-white rounded" onclick="ui.switchTab('dashboard')">
              <i class="fas fa-sync-alt mr-2"></i> Try Again
            </button>
          </div>
        `;
        
        // Reset loading state
        tabContent.dataset.loading = 'false';
      }
    }
  },

  // Helper function to create stream statistic cards
  createStatCard(title, personnel, teams, color, navTab, filter) {
    return `
      <div class="bg-white p-4 rounded-lg shadow cursor-pointer" onclick="ui.navigateWithFilter('${navTab}', '${filter}')">
        <div class="flex items-center">
          <div class="rounded-full w-12 h-12 flex items-center justify-center bg-${color}-100 text-${color}-800">
            <i class="fas fa-users"></i>
          </div>
          <div class="ml-4">
            <h3 class="text-gray-500 text-sm">${title}</h3>
            <div class="flex items-baseline">
              <p class="text-2xl font-semibold">${personnel}</p>
              <p class="ml-2 text-sm text-gray-600">Personnel</p>
            </div>
          </div>
        </div>
        <div class="mt-2 text-xs text-gray-500">Across ${teams} teams</div>
      </div>
    `;
  },
  
  // Navigate to a tab with a filter applied
  navigateWithFilter(tab, filter) {
    // Store the filter in a session variable
    sessionStorage.setItem('activeFilter', filter);
    
    // Navigate to the tab
    this.switchTab(tab);
  },

  exportTeams() {
    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <h2 class="text-xl font-semibold mb-4">Export Teams Data</h2>
        <div class="space-y-4">
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <button class="btn-secondary p-6 text-center flex flex-col items-center justify-center" onclick="ui.exportTeamsCSV()">
              <i class="fas fa-file-csv text-3xl mb-2"></i>
              <span class="text-lg font-medium">CSV Format</span>
              <span class="text-sm text-gray-500">Export as comma-separated values</span>
            </button>
            <button class="btn-secondary p-6 text-center flex flex-col items-center justify-center" onclick="ui.exportTeamsJSON()">
              <i class="fas fa-file-code text-3xl mb-2"></i>
              <span class="text-lg font-medium">JSON Format</span>
              <span class="text-sm text-gray-500">Export as structured data</span>
            </button>
          </div>
        </div>
        <div class="flex justify-end mt-4">
          <button class="btn-secondary" onclick="ui.hideModal()">Cancel</button>
        </div>
      </div>
    `;
    document.body.appendChild(modal);
  },

  // Load role matrix
  loadRoleMatrix() {
    try {
      console.log('Loading role matrix content...');
      
      const tabContent = document.getElementById('tabContent');
      if (!tabContent) {
        console.error('Tab content element not found');
        return;
      }
      
      // Check if already loading
      if (tabContent.dataset.loading === 'true') {
        console.log('Role matrix already loading, skipping duplicate load');
        return;
      }
      
      // Set loading state
      tabContent.dataset.loading = 'true';
      
      // Create empty arrays if they don't exist
      if (!window.appData.roles) window.appData.roles = [];
      
      tabContent.innerHTML = `
        <div class="p-4">
          <div class="flex justify-between items-center mb-6">
            <h2 class="text-2xl font-bold">Role Matrix</h2>
            <div class="flex space-x-4">
              <button class="btn-secondary" id="exportRoleMatrixBtn">
                <i class="fas fa-download mr-2"></i> Export
              </button>
              <button class="btn-primary" id="addRoleBtn">
                <i class="fas fa-plus mr-2"></i> Add Role
              </button>
            </div>
          </div>

          <div class="bg-white rounded-lg shadow overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
              <thead class="bg-gray-50">
                <tr>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Role</th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Description</th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Stream</th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Personnel Count</th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                </tr>
              </thead>
              <tbody class="bg-white divide-y divide-gray-200">
                ${this.renderRoleMatrix()}
              </tbody>
            </table>
          </div>

          <div class="mt-8">
            <h3 class="text-xl font-semibold mb-4">Role Distribution by Stream</h3>
            <div class="bg-white rounded-lg shadow p-4" style="height: 300px;">
              <canvas id="roleDistributionChart"></canvas>
            </div>
          </div>
        </div>
      `;
      
      // Add event listeners
      document.getElementById('addRoleBtn')?.addEventListener('click', () => this.showAddRoleModal());
      document.getElementById('exportRoleMatrixBtn')?.addEventListener('click', () => this.exportRoleMatrix());
      
      // Initialize charts
      this.initializeRoleDistributionChart();
      
      // Reset loading state
      tabContent.dataset.loading = 'false';
    } catch (error) {
      console.error('Error loading role matrix:', error);
      this.showToast('Error loading role matrix', 'error');
      
      const tabContent = document.getElementById('tabContent');
      if (tabContent) {
        tabContent.innerHTML = `
          <div class="p-8 text-center">
            <div class="text-red-500 text-xl mb-4">
              <i class="fas fa-exclamation-triangle mr-2"></i> 
              Error Loading Role Matrix
            </div>
            <p class="mb-4">${error.message || 'An unknown error occurred'}</p>
            <button class="px-4 py-2 bg-blue-600 text-white rounded" onclick="ui.switchTab('rolematrix')">
              <i class="fas fa-sync-alt mr-2"></i> Try Again
            </button>
          </div>
        `;
        
        // Reset loading state
        tabContent.dataset.loading = 'false';
      }
    }
  },
  
  // Render role matrix table rows
  renderRoleMatrix() {
    // Get all unique roles from personnel
    const allRoles = new Map();
    
    // Extract roles from teams/personnel
    if (window.appData && window.appData.teams) {
      window.appData.teams.forEach(team => {
        if (team && team.personnel) {
          team.personnel.forEach(person => {
            if (person && person.role) {
              // If role exists, increment count, otherwise add it
              if (allRoles.has(person.role)) {
                const roleData = allRoles.get(person.role);
                roleData.count++;
                // Add the stream if it's not already in the list
                if (!roleData.streams.includes(team.stream)) {
                  roleData.streams.push(team.stream);
                }
              } else {
                allRoles.set(person.role, {
                  name: person.role,
                  description: '',
                  streams: [team.stream],
                  count: 1
                });
              }
            }
          });
        }
      });
    }
    
    // Check if we have any roles
    if (allRoles.size === 0) {
      return '<tr><td colspan="5" class="px-6 py-4 text-center text-gray-500">No roles available</td></tr>';
    }
    
    // Convert the Map to an array and sort by role name
    const roles = Array.from(allRoles.values()).sort((a, b) => a.name.localeCompare(b.name));
    
    // Create table rows
    return roles.map(role => `
      <tr>
        <td class="px-6 py-4 whitespace-nowrap font-medium">${this.sanitizeHtml(role.name)}</td>
        <td class="px-6 py-4">${role.description || 'No description available'}</td>
        <td class="px-6 py-4">
          ${role.streams.map(stream => `
            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-${stream}-100 text-${stream}-800 mr-1">
              ${stream.toUpperCase()}
            </span>
          `).join('')}
        </td>
        <td class="px-6 py-4 whitespace-nowrap">${role.count}</td>
        <td class="px-6 py-4 whitespace-nowrap">
          <button class="text-indigo-600 hover:text-indigo-900 mr-3" onclick="ui.showRoleDetails('${role.name}')">
            <i class="fas fa-eye"></i>
          </button>
          <button class="text-indigo-600 hover:text-indigo-900" onclick="ui.showRolePersonnel('${role.name}')">
            <i class="fas fa-users"></i>
          </button>
        </td>
      </tr>
    `).join('');
  },
  
  // Initialize role distribution chart
  initializeRoleDistributionChart() {
    const ctx = document.getElementById('roleDistributionChart');
    if (!ctx || typeof Chart === 'undefined') return;
    
    // Get role counts by stream
    const streamCounts = { bbv: 0, add: 0, arb: 0, shared: 0 };
    
    // Count roles per stream
    if (window.appData && window.appData.teams) {
      window.appData.teams.forEach(team => {
        if (team && team.personnel && team.stream) {
          const stream = team.stream.toLowerCase();
          if (streamCounts.hasOwnProperty(stream)) {
            // Count unique roles in this team
            const teamRoles = new Set();
            team.personnel.forEach(person => {
              if (person && person.role) {
                teamRoles.add(person.role);
              }
            });
            streamCounts[stream] += teamRoles.size;
          }
        }
      });
    }
    
    new Chart(ctx, {
      type: 'bar',
      data: {
        labels: ['BBV', 'ADD', 'ARB', 'Shared'],
        datasets: [{
          label: 'Number of Roles',
          data: [streamCounts.bbv, streamCounts.add, streamCounts.arb, streamCounts.shared],
          backgroundColor: [
            '#00518A', // BBV blue
            '#CC2030', // ADD red
            '#4F46E5', // ARB purple
            '#232323'  // Shared black
          ],
          borderColor: [
            '#00518A',
            '#CC2030',
            '#4F46E5',
            '#232323'
          ],
          borderWidth: 1
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          y: {
            beginAtZero: true
          }
        }
      }
    });
  },
  
  // Show role details modal
  showRoleDetails(roleName) {
    // Get all personnel with this role
    const personnel = [];
    
    if (window.appData && window.appData.teams) {
      window.appData.teams.forEach(team => {
        if (team && team.personnel) {
          team.personnel.forEach(person => {
            if (person && person.role === roleName) {
              personnel.push({
                ...person,
                team: team.name,
                stream: team.stream
              });
            }
          });
        }
      });
    }
    
    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <div class="flex justify-between items-center mb-4">
          <h2 class="text-xl font-semibold">${this.sanitizeHtml(roleName)}</h2>
          <button class="btn-icon" onclick="ui.hideModal()">
            <i class="fas fa-times"></i>
          </button>
        </div>
        
        <h3 class="font-medium text-lg mb-2">Personnel (${personnel.length})</h3>
        <div class="mb-4">
          ${personnel.length > 0 ? `
            <div class="bg-gray-50 rounded overflow-hidden">
              <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-100">
                  <tr>
                    <th scope="col" class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Name</th>
                    <th scope="col" class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Team</th>
                    <th scope="col" class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Stream</th>
                  </tr>
                </thead>
                <tbody>
                  ${personnel.map(person => `
                    <tr>
                      <td class="px-4 py-2 whitespace-nowrap">${this.sanitizeHtml(person.name)}</td>
                      <td class="px-4 py-2 whitespace-nowrap">${this.sanitizeHtml(person.team)}</td>
                      <td class="px-4 py-2 whitespace-nowrap">
                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-${person.stream}-100 text-${person.stream}-800">
                          ${person.stream.toUpperCase()}
                        </span>
                      </td>
                    </tr>
                  `).join('')}
                </tbody>
              </table>
            </div>
          ` : '<p class="text-gray-500">No personnel found with this role</p>'}
        </div>
        
        <div class="flex justify-end">
          <button class="btn-secondary" onclick="ui.hideModal()">Close</button>
        </div>
      </div>
    `;
    
    document.body.appendChild(modal);
  },
  
  // Export role matrix as CSV
  exportRoleMatrix() {
    // Get all roles
    const allRoles = new Map();
    
    if (window.appData && window.appData.teams) {
      window.appData.teams.forEach(team => {
        if (team && team.personnel) {
          team.personnel.forEach(person => {
            if (person && person.role) {
              if (allRoles.has(person.role)) {
                const roleData = allRoles.get(person.role);
                roleData.count++;
                if (!roleData.streams.includes(team.stream)) {
                  roleData.streams.push(team.stream);
                }
              } else {
                allRoles.set(person.role, {
                  name: person.role,
                  description: '',
                  streams: [team.stream],
                  count: 1
                });
              }
            }
          });
        }
      });
    }
    
    // Convert to array
    const roles = Array.from(allRoles.values());
    
    // Create CSV content
    let csvContent = "data:text/csv;charset=utf-8,";
    csvContent += "Role,Description,Streams,Personnel Count\n";
    
    roles.forEach(role => {
      csvContent += `"${role.name}","${role.description}","${role.streams.join(', ')}",${role.count}\n`;
    });
    
    // Create download link
    const encodedUri = encodeURI(csvContent);
    const link = document.createElement("a");
    link.setAttribute("href", encodedUri);
    link.setAttribute("download", "role_matrix.csv");
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
    this.showToast('Role matrix exported successfully', 'success');
  },
  
  // Add new role modal
  showAddRoleModal() {
    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <h2 class="text-xl font-semibold mb-4">Add New Role</h2>
        <form id="addRoleForm">
          <div class="form-group">
            <label for="roleName">Role Name</label>
            <input type="text" id="roleName" class="form-input" required>
          </div>
          <div class="form-group">
            <label for="roleDescription">Description</label>
            <textarea id="roleDescription" class="form-textarea" rows="3"></textarea>
          </div>
          <div class="form-group">
            <label for="roleStream">Stream</label>
            <select id="roleStream" class="form-select" required>
              <option value="bbv">BBV</option>
              <option value="add">ADD</option>
              <option value="arb">ARB</option>
              <option value="shared">Shared</option>
            </select>
          </div>
          <div class="flex justify-end space-x-2 mt-4">
            <button type="button" class="btn-secondary" onclick="ui.hideModal()">Cancel</button>
            <button type="submit" class="btn-primary">Add Role</button>
          </div>
        </form>
      </div>
    `;
    document.body.appendChild(modal);
    
    // Handle form submission
    document.getElementById('addRoleForm').addEventListener('submit', e => {
      e.preventDefault();
      
      // Get form values
      const roleName = document.getElementById('roleName').value;
      const roleDescription = document.getElementById('roleDescription').value;
      const roleStream = document.getElementById('roleStream').value;
      
      // Create role object
      const role = {
        name: roleName,
        description: roleDescription,
        stream: roleStream
      };
      
      // Add to roles array if it doesn't exist
      if (!window.appData.roles) window.appData.roles = [];
      window.appData.roles.push(role);
      
      // Save changes
      this.saveChanges();
      
      // Hide modal
      this.hideModal();
      
      // Show success message
      this.showToast('Role added successfully', 'success');
      
      // Reload tab
      this.loadRoleMatrix();
    });
  },
  
  // Load skills matrix
  loadSkillsMatrix() {
    try {
      console.log('Loading skills matrix content...');
      
      const tabContent = document.getElementById('tabContent');
      if (!tabContent) {
        console.error('Tab content element not found');
        return;
      }
      
      // Check if already loading
      if (tabContent.dataset.loading === 'true') {
        console.log('Skills matrix already loading, skipping duplicate load');
        return;
      }
      
      // Set loading state
      tabContent.dataset.loading = 'true';
      
      // Create empty arrays if they don't exist
      if (!window.appData.skills) window.appData.skills = [];
      
      // Build a list of all skills from personnel
      const allSkills = new Set();
      const personnelWithSkills = [];
      
      if (window.appData && window.appData.teams) {
        window.appData.teams.forEach(team => {
          if (team && team.personnel) {
            team.personnel.forEach(person => {
              if (person) {
                // If person has skills property, add all skill keys to the set
                if (person.skills) {
                  Object.keys(person.skills).forEach(skill => allSkills.add(skill));
                }
                
                // Add to personnel list
                personnelWithSkills.push({
                  ...person,
                  team: team.name,
                  stream: team.stream,
                  // Ensure skills property exists
                  skills: person.skills || {}
                });
              }
            });
          }
        });
      }
      
      tabContent.innerHTML = `
        <div class="p-4">
          <div class="flex justify-between items-center mb-6">
            <h2 class="text-2xl font-bold">Skills Matrix</h2>
            <div class="flex space-x-4">
              <button class="btn-secondary" id="exportSkillsMatrixBtn">
                <i class="fas fa-download mr-2"></i> Export
              </button>
              <button class="btn-primary" id="addSkillBtn">
                <i class="fas fa-plus mr-2"></i> Add Skill
              </button>
            </div>
          </div>
          
          <div class="bg-white rounded-lg shadow p-4 mb-6">
            <div class="flex space-x-4">
              <div class="flex-grow">
                <input type="text" id="skillsSearch" class="form-input w-full" placeholder="Search personnel or skills...">
              </div>
              <div>
                <select id="skillsStreamFilter" class="form-select">
                  <option value="all">All Streams</option>
                  <option value="bbv">BBV</option>
                  <option value="add">ADD</option>
                  <option value="arb">ARB</option>
                  <option value="shared">Shared</option>
                </select>
              </div>
            </div>
          </div>

          <div class="bg-white rounded-lg shadow overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200" id="skillsMatrixTable">
              <thead class="bg-gray-50">
                <tr>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider sticky left-0 bg-gray-50">Person</th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider sticky left-32 bg-gray-50">Team</th>
                  ${Array.from(allSkills).map(skill => `
                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">${this.sanitizeHtml(skill)}</th>
                  `).join('')}
                </tr>
              </thead>
              <tbody class="bg-white divide-y divide-gray-200">
                ${personnelWithSkills.map(person => `
                  <tr data-stream="${person.stream}">
                    <td class="px-6 py-4 whitespace-nowrap font-medium sticky left-0 bg-white">${this.sanitizeHtml(person.name)}</td>
                    <td class="px-6 py-4 whitespace-nowrap sticky left-32 bg-white">
                      <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-${person.stream}-100 text-${person.stream}-800">
                        ${this.sanitizeHtml(person.team)}
                      </span>
                    </td>
                    ${Array.from(allSkills).map(skill => {
                      const skillLevel = person.skills[skill];
                      return `
                        <td class="px-6 py-4 whitespace-nowrap">
                          ${skillLevel ? this.renderSkillLevel(skillLevel) : ''}
                        </td>
                      `;
                    }).join('')}
                  </tr>
                `).join('')}
              </tbody>
            </table>
          </div>

          <div class="mt-8">
            <h3 class="text-xl font-semibold mb-4">Skill Distribution</h3>
            <div class="bg-white rounded-lg shadow p-4" style="height: 300px;">
              <canvas id="skillDistributionChart"></canvas>
            </div>
          </div>
        </div>
      `;
      
      // Add event listeners
      document.getElementById('addSkillBtn')?.addEventListener('click', () => this.showAddSkillModal());
      document.getElementById('exportSkillsMatrixBtn')?.addEventListener('click', () => this.exportSkillsMatrix());
      document.getElementById('skillsSearch')?.addEventListener('input', this.filterSkillsMatrix);
      document.getElementById('skillsStreamFilter')?.addEventListener('change', this.filterSkillsMatrix);
      
      // Initialize charts
      this.initializeSkillDistributionChart(allSkills, personnelWithSkills);
      
      // Reset loading state
      tabContent.dataset.loading = 'false';
    } catch (error) {
      console.error('Error loading skills matrix:', error);
      this.showToast('Error loading skills matrix', 'error');
      
      const tabContent = document.getElementById('tabContent');
      if (tabContent) {
        tabContent.innerHTML = `
          <div class="p-8 text-center">
            <div class="text-red-500 text-xl mb-4">
              <i class="fas fa-exclamation-triangle mr-2"></i> 
              Error Loading Skills Matrix
            </div>
            <p class="mb-4">${error.message || 'An unknown error occurred'}</p>
            <button class="px-4 py-2 bg-blue-600 text-white rounded" onclick="ui.switchTab('skillsmatrix')">
              <i class="fas fa-sync-alt mr-2"></i> Try Again
            </button>
          </div>
        `;
        
        // Reset loading state
        tabContent.dataset.loading = 'false';
      }
    }
  },
  
  // Render skill level indicator
  renderSkillLevel(level) {
    // Convert level to a number between 1-5 if it's not already
    let numLevel = level;
    if (typeof level === 'string') {
      // Try to parse as a number
      const parsed = parseInt(level);
      if (!isNaN(parsed)) {
        numLevel = parsed;
      } else {
        // Map string levels to numbers
        const levelMap = {
          'beginner': 1,
          'basic': 2,
          'intermediate': 3,
          'advanced': 4,
          'expert': 5
        };
        numLevel = levelMap[level.toLowerCase()] || 3;
      }
    }
    
    // Ensure level is between 1-5
    numLevel = Math.min(5, Math.max(1, numLevel));
    
    // Color based on level
    const colors = [
      '',
      'bg-gray-200', // Level 1
      'bg-blue-200', // Level 2
      'bg-green-200', // Level 3
      'bg-yellow-200', // Level 4
      'bg-red-200' // Level 5
    ];
    
    // Text based on level
    const texts = [
      '',
      'Beginner',
      'Basic',
      'Intermediate',
      'Advanced',
      'Expert'
    ];
    
    // Create dots to represent skill level
    let dots = '';
    for (let i = 1; i <= 5; i++) {
      dots += `<div class="h-2 w-2 rounded-full ${i <= numLevel ? 'bg-blue-600' : 'bg-gray-200'} mr-0.5"></div>`;
    }
    
    return `
      <div class="flex flex-col">
        <div class="flex items-center">
          ${dots}
        </div>
        <div class="text-xs text-gray-500 mt-1">${texts[numLevel]}</div>
      </div>
    `;
  },
  
  // Initialize skill distribution chart
  initializeSkillDistributionChart(allSkills, personnel) {
    const ctx = document.getElementById('skillDistributionChart');
    if (!ctx || typeof Chart === 'undefined' || allSkills.size === 0) return;
    
    // Count how many people have each skill
    const skillCounts = {};
    Array.from(allSkills).forEach(skill => {
      skillCounts[skill] = 0;
    });
    
    // Count skills
    personnel.forEach(person => {
      if (person.skills) {
        Object.keys(person.skills).forEach(skill => {
          if (skillCounts.hasOwnProperty(skill)) {
            skillCounts[skill]++;
          }
        });
      }
    });
    
    // Sort skills by count (descending)
    const sortedSkills = Object.keys(skillCounts).sort((a, b) => skillCounts[b] - skillCounts[a]);
    
    // Get top 10 skills
    const topSkills = sortedSkills.slice(0, 10);
    
    new Chart(ctx, {
      type: 'bar',
      data: {
        labels: topSkills,
        datasets: [{
          label: 'Number of Personnel',
          data: topSkills.map(skill => skillCounts[skill]),
          backgroundColor: '#3b82f6',
          borderColor: '#2563eb',
          borderWidth: 1
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          y: {
            beginAtZero: true
          }
        }
      }
    });
  },
  
  // Filter skills matrix
  filterSkillsMatrix() {
    const searchInput = document.getElementById('skillsSearch').value.toLowerCase();
    const streamFilter = document.getElementById('skillsStreamFilter').value;
    
    const table = document.getElementById('skillsMatrixTable');
    if (!table) return;
    
    const rows = table.querySelectorAll('tbody tr');
    
    rows.forEach(row => {
      const stream = row.getAttribute('data-stream');
      const text = row.textContent.toLowerCase();
      
      // Check if row matches search and stream filter
      const matchesSearch = searchInput === '' || text.includes(searchInput);
      const matchesStream = streamFilter === 'all' || stream === streamFilter;
      
      // Show/hide row based on filters
      row.style.display = matchesSearch && matchesStream ? '' : 'none';
    });
  },
  
  // Export skills matrix as CSV
  exportSkillsMatrix() {
    // Build a list of all skills and personnel
    const allSkills = new Set();
    const personnelWithSkills = [];
    
    if (window.appData && window.appData.teams) {
      window.appData.teams.forEach(team => {
        if (team && team.personnel) {
          team.personnel.forEach(person => {
            if (person) {
              // If person has skills property, add all skill keys to the set
              if (person.skills) {
                Object.keys(person.skills).forEach(skill => allSkills.add(skill));
              }
              
              // Add to personnel list
              personnelWithSkills.push({
                ...person,
                team: team.name,
                stream: team.stream,
                // Ensure skills property exists
                skills: person.skills || {}
              });
            }
          });
        }
      });
    }
    
    // Create CSV content
    let csvContent = "data:text/csv;charset=utf-8,";
    
    // Add header row
    csvContent += `"Name","Team","Stream"${Array.from(allSkills).map(skill => `,"${skill}"`).join('')}\n`;
    
    // Add rows for each person
    personnelWithSkills.forEach(person => {
      csvContent += `"${person.name}","${person.team}","${person.stream}"`;
      
      // Add skill levels
      Array.from(allSkills).forEach(skill => {
        const level = person.skills[skill] || '';
        csvContent += `,"${level}"`;
      });
      
      csvContent += '\n';
    });
    
    // Create download link
    const encodedUri = encodeURI(csvContent);
    const link = document.createElement("a");
    link.setAttribute("href", encodedUri);
    link.setAttribute("download", "skills_matrix.csv");
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
    this.showToast('Skills matrix exported successfully', 'success');
  },
  
// UI Components and Interactions
ui: {
  // Initialize the application
  init() {
    try {
      console.log('Initializing UI...');
      
      // Create a global variable for handling charts
      window.chartFailed = false;
      if (typeof Chart === 'undefined') {
        console.warn('Chart.js is not loaded, charts will be disabled');
        window.chartFailed = true;
      }
      
      // Use existing config or set up default
      window.config = window.config || {
        tabs: [
          { id: 'dashboard', label: 'Dashboard', icon: 'fa-chart-line' },
          { id: 'teams', label: 'Teams', icon: 'fa-users' },
          { id: 'personnel', label: 'Personnel', icon: 'fa-user' },
          { id: 'documentation', label: 'Documentation', icon: 'fa-file-alt' },
          { id: 'planning', label: 'Planning', icon: 'fa-project-diagram' },
          { id: 'orgchart', label: 'Org Chart', icon: 'fa-sitemap' },
          { id: 'rolematrix', label: 'Role Matrix', icon: 'fa-th' },
          { id: 'skillsmatrix', label: 'Skills Matrix', icon: 'fa-cubes' },
          { id: 'racimatrix', label: 'RACI Matrix', icon: 'fa-list-alt' }
        ],
        colors: {
          bbv: '#00518A',     // BBV blue
          add: '#CC2030',     // ADD red
          arb: '#4F46E5',     // ARB purple
          shared: '#232323',  // Shared black
          root: '#333333'     // Root color for org chart
        }
      };
      
      // Use the appData from app.js rather than initializing redundant data
      if (!window.appData) {
        console.error('appData not initialized - this should be done in app.js');
        window.appData = {}; // Create empty object as fallback
      }
      
      // Set up tabs first - do this before other setup
      if (typeof this.setupTabs === 'function') {
        try {
          this.setupTabs();
        } catch (error) {
          console.error('Error in setupTabs:', error);
          
          // Create fallback tabs directly
          this.createFallbackTabs();
        }
      } else {
        console.error('setupTabs method not found');
        throw new Error('Required UI methods are missing');
      }
      
      // Set up login state
      this.updateLoginState();
      
      // Hide login button completely
      const loginBtn = document.getElementById('loginBtn');
      if (loginBtn) {
        loginBtn.style.display = 'none';
      }
      
      // Set up scroll-to-top button
      this.setupScrollToTop();
      
      // Set up save changes button
      this.setupSaveChangesButton();
      
      console.log('UI initialization complete');
    } catch (error) {
      console.error('Critical error in UI initialization:', error);
      // Attempt recovery through fix-critical.js
    }
  },
  
  // Create fallback tabs when setupTabs fails
  createFallbackTabs() {
    console.warn('Setting up fallback tabs due to setupTabs error');
    const tabList = document.getElementById('tabList');
    if (tabList) {
      // Make sure we have the config with all tabs
      const tabsConfig = window.config && window.config.tabs ? window.config.tabs : [
        { id: 'dashboard', label: 'Dashboard', icon: 'fa-chart-line' },
        { id: 'teams', label: 'Teams', icon: 'fa-users' },
        { id: 'personnel', label: 'Personnel', icon: 'fa-user' },
        { id: 'documentation', label: 'Documentation', icon: 'fa-file-alt' },
        { id: 'planning', label: 'Planning', icon: 'fa-project-diagram' },
        { id: 'orgchart', label: 'Org Chart', icon: 'fa-sitemap' },
        { id: 'rolematrix', label: 'Role Matrix', icon: 'fa-th' },
        { id: 'skillsmatrix', label: 'Skills Matrix', icon: 'fa-cubes' },
        { id: 'racimatrix', label: 'RACI Matrix', icon: 'fa-list-alt' }
      ];
      
      // Create tab buttons
      let tabsHTML = '';
      tabsConfig.forEach((tab, index) => {
        tabsHTML += `
          <button class="tab-btn ${index === 0 ? 'active' : ''}" 
                id="tab-${tab.id}" 
                data-tab="${tab.id}" 
                role="tab" 
                aria-selected="${index === 0 ? 'true' : 'false'}" 
                aria-controls="panel-${tab.id}">
            <i class="fas ${tab.icon}" aria-hidden="true"></i>
            <span>${tab.label}</span>
          </button>
        `;
      });
      tabList.innerHTML = tabsHTML;
      
      // Add basic click handlers
      const btns = tabList.querySelectorAll('.tab-btn');
      btns.forEach(btn => {
        btn.addEventListener('click', () => {
          const tabId = btn.getAttribute('data-tab');
          // Update active state on all buttons
          btns.forEach(b => {
            b.classList.toggle('active', b === btn);
            b.setAttribute('aria-selected', b === btn ? 'true' : 'false');
          });
          // Try to switch tab
          this.switchTab(tabId);
        });
      });
    }
  },

  // Set up tabs
  setupTabs() {
    const tabList = document.getElementById('tabList');
    if (!tabList) return;

    // Create tab buttons
    tabList.innerHTML = config.tabs.map((tab, index) => `
      <button class="tab-btn" 
             id="tab-${tab.id}" 
             data-tab="${tab.id}" 
             role="tab" 
             aria-selected="${index === 0 ? 'true' : 'false'}" 
             aria-controls="panel-${tab.id}">
        <i class="fas ${tab.icon}" aria-hidden="true"></i>
        <span>${tab.label}</span>
      </button>
    `).join('');

    // Add click handlers
    const tabButtons = tabList.querySelectorAll('.tab-btn');
    tabButtons.forEach(button => {
      button.addEventListener('click', () => {
        const tabId = button.getAttribute('data-tab');
        this.switchTab(tabId);
      });
      
      // Add keyboard navigation for accessibility
      button.addEventListener('keydown', (e) => {
        const tabs = Array.from(tabList.querySelectorAll('.tab-btn'));
        const index = tabs.indexOf(button);
        
        // Handle arrow key navigation
        if (e.key === 'ArrowRight' || e.key === 'ArrowDown') {
          e.preventDefault();
          const nextIndex = (index + 1) % tabs.length;
          tabs[nextIndex].focus();
        } else if (e.key === 'ArrowLeft' || e.key === 'ArrowUp') {
          e.preventDefault();
          const prevIndex = (index - 1 + tabs.length) % tabs.length;
          tabs[prevIndex].focus();
        } else if (e.key === 'Home') {
          e.preventDefault();
          tabs[0].focus();
        } else if (e.key === 'End') {
          e.preventDefault();
          tabs[tabs.length - 1].focus();
        }
      });
    });
  },

  // Switch to a different tab
  switchTab(tabId) {
    try {
      console.log(`Switching to tab: ${tabId}`);
      
      // Validate tabId to prevent security issues and errors
      if (!tabId || typeof tabId !== 'string') {
        console.error('Invalid tabId:', tabId);
        this.showToast('Invalid tab selection', 'error');
        return;
      }
      
      // Sanitize tabId by using a whitelist approach instead of regex
      const validTabs = (window.config && window.config.tabs) ? 
        window.config.tabs.map(tab => tab.id) : 
        ['dashboard', 'teams', 'personnel', 'documentation', 'planning', 'orgchart', 'rolematrix', 'skillsmatrix', 'analytics', 'racimatrix'];
      
      if (!validTabs.includes(tabId)) {
        console.error(`Invalid tabId: ${tabId} not in allowed list`);
        this.showToast('Invalid tab selection', 'error');
        return;
      }
      
      // Get the tab content element
      const tabContent = document.getElementById('tabContent');
      if (!tabContent) {
        console.error('Tab content element not found');
        this.showToast('Error loading content: Tab container not found', 'error');
        return;
      }
      
      // Update active tab buttons
      this.updateActiveTab(tabId);
      
      // Update application state
      if (window.appData && window.appData.state) {
        window.appData.state.currentTab = tabId;
      }
      
      // Show loading indicator
      tabContent.innerHTML = `
        <div class="tab-loading">
          <div class="loader-spinner"></div>
          <p>Loading ${this.sanitizeHtml(tabId)} content...</p>
        </div>
      `;
      
      // Use a switch statement to call the appropriate loading function
      switch (tabId) {
        case 'dashboard':
          this.loadDashboard();
          break;
        case 'teams':
          this.loadTeams();
          break;
        case 'personnel':
          this.loadPersonnel();
          break;
        case 'documentation':
          this.loadDocumentation();
          break;
        case 'planning':
          this.loadPlanning();
          break;
        case 'orgchart':
          this.loadOrgChart();
          break;
        case 'rolematrix':
          this.loadRoleMatrix();
          break;
        case 'skillsmatrix':
          this.loadSkillsMatrix();
          break;
        case 'analytics':
          this.loadAnalyticsDashboard();
          break;
        case 'racimatrix':
          this.loadRaciMatrix();
          break;
        default:
          console.error(`No loader found for tab: ${tabId}`);
          this.showToast(`Error: Content for ${this.sanitizeHtml(tabId)} not available`, 'error');
      }
    } catch (error) {
      console.error('Error switching tabs:', error);
      this.showToast('An error occurred while switching tabs', 'error');
      
      // Try recovery options
      const tabContent = document.getElementById('tabContent');
      if (tabContent) {
        tabContent.innerHTML = `
          <div class="error-container">
            <h2>Error Loading Content</h2>
            <p>There was a problem loading the requested content.</p>
            <button class="btn btn-primary" onclick="window.ui.switchTab('dashboard')">
              Return to Dashboard
            </button>
          </div>
        `;
      }
    }
  },
  
  // Update the active tab in the UI
  updateActiveTab(tabId) {
    const tabButtons = document.querySelectorAll('.tab-btn');
    tabButtons.forEach(button => {
      const buttonTabId = button.getAttribute('data-tab');
      button.classList.toggle('active', buttonTabId === tabId);
      button.setAttribute('aria-selected', buttonTabId === tabId ? 'true' : 'false');
    });
  },
  
  // Sanitize HTML to prevent XSS attacks
  sanitizeHtml(str) {
    if (!str || typeof str !== 'string') return '';
    return String(str)
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&#39;');
  },
  
  // Safe HTML insertion helper
  setElementHtml(element, html) {
    if (!element) return;
    
    try {
      // For simple strings, use textContent instead of innerHTML
      if (!html.includes('<')) {
        element.textContent = html;
        return;
      }
      
      // For HTML content, use DOMPurify if available
      if (window.DOMPurify) {
        element.innerHTML = window.DOMPurify.sanitize(html);
      } else {
        // Basic fallback - only safe for trusted content
        element.innerHTML = html;
      }
    } catch (error) {
      console.error('Error setting element HTML:', error);
      element.textContent = 'Error displaying content';
    }
  },

  // Set up scroll-to-top button
  setupScrollToTop() {
    const scrollTopBtn = document.getElementById('scrollTopBtn');
    if (scrollTopBtn) {
      window.addEventListener('scroll', () => {
        scrollTopBtn.classList.toggle('visible', window.pageYOffset > 300);
      });
      
      scrollTopBtn.addEventListener('click', () => {
        window.scrollTo({ top: 0, behavior: 'smooth' });
      });
    }
  },
  
  // Set up save changes button
  setupSaveChangesButton() {
    const saveChangesBtn = document.getElementById('saveChangesBtn');
    if (saveChangesBtn) {
      saveChangesBtn.addEventListener('click', () => this.saveChanges());
    }
  },

  // Save changes to localStorage
  saveChanges() {
    try {
      localStorage.setItem('appData', JSON.stringify(window.appData));
      this.showToast('Changes saved successfully', 'success');
    } catch (error) {
      console.error('Error saving changes:', error);
      this.showToast('Error saving changes', 'error');
    }
  },

  // Display toast notification
  showToast(message, type = 'info') {
    // Validate inputs
    if (!message || typeof message !== 'string') {
      console.error('Invalid toast message:', message);
      return;
    }
    
    // Sanitize message to prevent XSS
    const sanitizedMessage = this.sanitizeHtml(message);
    
    // Validate type and set default if invalid
    const validTypes = ['info', 'success', 'warning', 'error'];
    if (!validTypes.includes(type)) {
      console.warn(`Invalid toast type "${type}", defaulting to "info"`);
      type = 'info';
    }
    
    // Get toast container or create it if it doesn't exist
    let toastContainer = document.getElementById('toastContainer');
    if (!toastContainer) {
      toastContainer = document.createElement('div');
      toastContainer.id = 'toastContainer';
      toastContainer.className = 'toast-container';
      document.body.appendChild(toastContainer);
    }
    
    // Create toast element with safe content
    const toast = document.createElement('div');
    toast.className = `toast toast-${type}`;
    
    // Set icon based on type
    let icon = '';
    switch (type) {
      case 'success':
        icon = '<i class="fas fa-check-circle"></i>';
        break;
      case 'warning':
        icon = '<i class="fas fa-exclamation-triangle"></i>';
        break;
      case 'error':
        icon = '<i class="fas fa-times-circle"></i>';
        break;
      default:
        icon = '<i class="fas fa-info-circle"></i>';
    }
    
    // Safely set toast content
    toast.innerHTML = `
      <div class="toast-content">
        <div class="toast-icon">${icon}</div>
        <div class="toast-message">${sanitizedMessage}</div>
        <button class="toast-close" aria-label="Close notification">×</button>
      </div>
    `;
    
    // Add close functionality
    const closeButton = toast.querySelector('.toast-close');
    if (closeButton) {
      closeButton.addEventListener('click', () => {
        toast.classList.add('toast-hiding');
        setTimeout(() => {
          if (toast.parentNode) {
            toast.parentNode.removeChild(toast);
          }
        }, 300);
      });
    }
    
    // Add to container
    toastContainer.appendChild(toast);
    
    // Auto-dismiss after delay
    const displayTime = type === 'error' ? 8000 : 4000;
    setTimeout(() => {
      if (toast.parentNode) {
        toast.classList.add('toast-hiding');
        setTimeout(() => {
          if (toast.parentNode) {
            toast.parentNode.removeChild(toast);
          }
        }, 300);
      }
    }, displayTime);
  },

  // Calculate statistics for dashboard
  calculateStats() {
    try {
      const stats = {
        bbv: { personnel: 0, teams: 0 },
        add: { personnel: 0, teams: 0 },
        arb: { personnel: 0, teams: 0 },
        shared: { personnel: 0, teams: 0 }
      };

      // Make sure window.appData and teams exist
      if (!window.appData || !window.appData.teams || !Array.isArray(window.appData.teams)) {
        console.warn('No appData or teams available for statistics');
        return stats;
      }

      // Count personnel and teams by stream
      window.appData.teams.forEach(team => {
        if (!team) return;
        
        const stream = (team.stream || 'unknown').toLowerCase();
        if (stats[stream]) {
          stats[stream].teams++;
          stats[stream].personnel += Array.isArray(team.personnel) ? team.personnel.length : 0;
        }
      });

      return stats;
    } catch (error) {
      console.error('Error calculating stats:', error);
      return {
        bbv: { personnel: 0, teams: 0 },
        add: { personnel: 0, teams: 0 },
        arb: { personnel: 0, teams: 0 },
        shared: { personnel: 0, teams: 0 }
      };
    }
  },

  // Initialize charts for dashboard
  initializeCharts() {
    try {
      // Check if Chart is loaded
      if (typeof Chart === 'undefined' || window.chartFailed) {
        console.warn('Chart.js is not loaded or initialization failed');
        this.showChartPlaceholders();
        return;
      }

      // Personnel Distribution Chart
      const personnelCtx = document.getElementById('personnelChart');
      if (personnelCtx) {
        try {
          // Get statistics for personnel distribution with safe access
          const stats = this.calculateStats() || {
            bbv: { personnel: 0 },
            add: { personnel: 0 },
            arb: { personnel: 0 },
            shared: { personnel: 0 }
          };
          
          // Create chart configuration
          const chartConfig = {
            type: 'doughnut',
            data: {
              labels: ['BBV', 'ADD', 'ARB', 'Shared'],
              datasets: [{
                data: [
                  stats.bbv.personnel || 0,
                  stats.add.personnel || 0,
                  stats.arb.personnel || 0,
                  stats.shared.personnel || 0
                ],
                backgroundColor: [
                  '#00518A', // BBV blue
                  '#CC2030', // ADD red
                  '#4F46E5', // ARB purple
                  '#232323'  // Shared black
                ]
              }]
            },
            options: {
              responsive: true,
              maintainAspectRatio: false,
              plugins: {
                legend: {
                  position: 'bottom'
                },
                tooltip: {
                  callbacks: {
                    label: function(context) {
                      const label = context.label || '';
                      const value = context.raw || 0;
                      const total = context.dataset.data.reduce((a, b) => a + b, 0);
                      const percentage = total > 0 ? Math.round((value / total) * 100) : 0;
                      return `${label}: ${value} (${percentage}%)`;
                    }
                  }
                }
              }
            }
          };
          
          // Create new chart with error handling
          try {
            new Chart(personnelCtx, chartConfig);
            console.log('Personnel chart created successfully');
          } catch (chartError) {
            console.error('Failed to create personnel chart:', chartError);
            this.showChartErrorPlaceholder(personnelCtx, 'Personnel Distribution');
          }
        } catch (error) {
          console.error('Error creating personnel chart:', error);
          this.showChartErrorPlaceholder(personnelCtx, 'Personnel Distribution');
        }
      }

      // Team Performance Chart
      const performanceCtx = document.getElementById('performanceChart');
      if (performanceCtx) {
        try {
          // Make sure we have teams data
          if (!window.appData || !window.appData.teams || window.appData.teams.length === 0) {
            this.showChartErrorPlaceholder(performanceCtx, 'Team Performance');
            return;
          }
          
          // Create chart configuration with safe access
          const chartConfig = {
            type: 'bar',
            data: {
              labels: window.appData.teams.map(team => team.name || 'Unnamed Team'),
              datasets: [{
                label: 'Performance Score',
                data: window.appData.teams.map(team => team.performance || 0),
                backgroundColor: window.appData.teams.map(team => {
                  const stream = (team.stream || 'unknown').toLowerCase();
                  return {
                    bbv: '#00518A',
                    add: '#CC2030',
                    arb: '#4F46E5',
                    shared: '#232323'
                  }[stream] || '#666666';
                })
              }]
            },
            options: {
              responsive: true,
              maintainAspectRatio: false,
              scales: {
                y: {
                  beginAtZero: true,
                  max: 100,
                  title: {
                    display: true,
                    text: 'Performance (%)'
                  }
                },
                x: {
                  title: {
                    display: true,
                    text: 'Teams'
                  }
                }
              },
              plugins: {
                legend: {
                  display: false
                }
              }
            }
          };
          
          // Create new chart with error handling
          try {
            new Chart(performanceCtx, chartConfig);
            console.log('Performance chart created successfully');
          } catch (chartError) {
            console.error('Failed to create performance chart:', chartError);
            this.showChartErrorPlaceholder(performanceCtx, 'Team Performance');
          }
        } catch (error) {
          console.error('Error creating performance chart:', error);
          this.showChartErrorPlaceholder(performanceCtx, 'Team Performance');
        }
      }
    } catch (error) {
      console.error('Error in initializeCharts:', error);
      this.showChartPlaceholders();
    }
  },
  
  // Show placeholders when charts can't be loaded
  showChartPlaceholders() {
    const chartElements = ['personnelChart', 'performanceChart'];
    chartElements.forEach(id => {
      const element = document.getElementById(id);
      if (element) {
        this.showChartErrorPlaceholder(element, id === 'personnelChart' ? 'Personnel Distribution' : 'Team Performance');
      }
    });
  },
  
  // Show a specific error placeholder for a chart
  showChartErrorPlaceholder(element, title) {
    // Save the original content in case we need to restore it
    if (!element.dataset.originalHtml) {
      element.dataset.originalHtml = element.innerHTML;
    }
    
    element.innerHTML = `
      <div class="flex flex-col items-center justify-center h-full text-center p-4">
        <div class="text-red-500 mb-2">
          <i class="fas fa-chart-bar text-3xl"></i>
        </div>
        <h3 class="font-semibold text-gray-600">${title}</h3>
        <p class="text-sm text-gray-500 mt-2">Chart could not be loaded</p>
      </div>
    `;
  },

  // Render recent activities
  renderRecentActivities() {
    try {
      if (!window.appData || !window.appData.activities || !Array.isArray(window.appData.activities)) {
        return '<p>No recent activities</p>';
      }
      
      const activities = window.appData.activities.slice(0, 5); // Show last 5 activities
      
      if (activities.length === 0) {
        return '<p>No recent activities</p>';
      }

      return activities.map(activity => {
        if (!activity) return '';
        
        const type = activity.type || 'update';
        const description = activity.description || 'Activity';
        const team = activity.team || '';
        const date = activity.date || new Date().toISOString();
        
        return `
          <div class="activity-item p-3 border-b border-gray-100 last:border-0">
            <div class="flex items-center space-x-3">
              <div class="activity-icon ${type}">
                <i class="fas ${this.getActivityIcon(type)}"></i>
              </div>
              <div>
                <p class="text-sm font-medium">${description}</p>
                <p class="text-xs text-gray-500">
                  ${team} • ${this.formatDate(date)}
                </p>
              </div>
            </div>
          </div>
        `;
      }).join('');
    } catch (error) {
      console.error('Error rendering activities:', error);
      return '<p>Error loading activities</p>';
    }
  },

  // Render upcoming tasks
  renderUpcomingTasks() {
    try {
      if (!window.appData || !window.appData.tasks || !Array.isArray(window.appData.tasks)) {
        return '<p>No upcoming tasks</p>';
      }
      
      // Sort tasks by due date and show the first 5
      const tasks = [...window.appData.tasks]
        .filter(task => task) // Filter out null tasks
        .sort((a, b) => {
          try {
            return new Date(a.dueDate || 0) - new Date(b.dueDate || 0);
          } catch (err) {
            return 0;
          }
        })
        .slice(0, 5);
      
      if (tasks.length === 0) {
        return '<p>No upcoming tasks</p>';
      }

      return tasks.map(task => {
        try {
          const progress = task.progress || 0;
          const title = task.title || 'Unnamed Task';
          const dueDate = task.dueDate || new Date().toISOString();
          const assignedTo = task.assignedTo || 'Unassigned';
          const priority = task.priority || 'Normal';
          
          return `
            <div class="task-item p-3 border-b border-gray-100 last:border-0">
              <div class="flex items-center justify-between">
                <div>
                  <p class="text-sm font-medium">${title}</p>
                  <p class="text-xs text-gray-500">
                    Due: ${this.formatDate(dueDate)} • 
                    Assigned to: ${assignedTo} • 
                    Priority: ${priority}
                  </p>
                </div>
                <div class="flex items-center space-x-2">
                  <div class="w-20 bg-gray-200 rounded-full h-2">
                    <div class="bg-blue-600 h-2 rounded-full" style="width: ${progress}%"></div>
                  </div>
                  <span class="text-xs text-gray-500">${progress}%</span>
                </div>
              </div>
            </div>
          `;
        } catch (taskError) {
          console.error('Error rendering task:', taskError);
          return '';
        }
      }).join('');
    } catch (error) {
      console.error('Error rendering tasks:', error);
      return '<p>Error loading tasks</p>';
    }
  },

  // Get activity icon based on type
  getActivityIcon(type) {
    const icons = {
      update: 'fa-edit',
      create: 'fa-plus',
      delete: 'fa-trash',
      comment: 'fa-comment',
      status: 'fa-check-circle'
    };
    return icons[type] || 'fa-info-circle';
  },

  // Format date
  formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  },

  // Show all activities modal
  showAllActivities() {
    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <div class="flex justify-between items-center mb-4">
          <h2>Activity History</h2>
          <button class="close-btn" onclick="ui.closeModal(this)">
            <i class="fas fa-times"></i>
          </button>
        </div>
        <div class="space-y-4">
          ${window.appData.history && window.appData.history.activities ? window.appData.history.activities.map(activity => `
            <div class="activity-item">
              <div class="flex items-center space-x-3">
                <div class="activity-icon ${activity.type}">
                  <i class="fas ${this.getActivityIcon(activity.type)}"></i>
                </div>
                <div>
                  <p class="text-sm font-medium">${activity.description}</p>
                  <p class="text-xs text-gray-500">${activity.user} • ${this.formatDate(activity.timestamp)}</p>
                </div>
              </div>
            </div>
          `).join('') : '<p>No activity history available</p>'}
        </div>
      </div>
    `;
    document.body.appendChild(modal);
  },

  // Show add task modal
  showAddTaskModal() {
    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <div class="flex justify-between items-center mb-4">
          <h2>Add New Task</h2>
          <button class="close-btn" onclick="ui.closeModal(this)">
            <i class="fas fa-times"></i>
          </button>
        </div>
        <form id="addTaskForm" onsubmit="ui.handleAddTask(event)">
          <div class="form-group">
            <label for="taskTitle">Title</label>
            <input type="text" id="taskTitle" required>
          </div>
          <div class="form-group">
            <label for="taskDescription">Description</label>
            <textarea id="taskDescription" required></textarea>
          </div>
          <div class="form-group">
            <label for="taskDueDate">Due Date</label>
            <input type="date" id="taskDueDate" required>
          </div>
          <div class="form-group">
            <label for="taskPriority">Priority</label>
            <select id="taskPriority" required>
              <option value="low">Low</option>
              <option value="medium">Medium</option>
              <option value="high">High</option>
            </select>
          </div>
          <div class="form-group">
            <label for="taskAssignee">Assignee</label>
            <select id="taskAssignee" required>
              ${window.appData.personnel && Array.isArray(window.appData.personnel) ? window.appData.personnel.map(person => `
                <option value="${person.id}">${person.name}</option>
              `).join('') : '<option value="">No personnel available</option>'}
            </select>
          </div>
          <button type="submit" class="btn-primary">Add Task</button>
        </form>
      </div>
    `;
    document.body.appendChild(modal);
  },

  // Handle add task form submission
  handleAddTask(event) {
    event.preventDefault();
    const form = event.target;
    const task = {
      id: window.appData.tasks.length + 1,
      title: form.querySelector('#taskTitle').value,
      description: form.querySelector('#taskDescription').value,
      dueDate: form.querySelector('#taskDueDate').value,
      priority: form.querySelector('#taskPriority').value,
      assignee: form.querySelector('#taskAssignee').value,
      progress: 0,
      status: 'pending'
    };
    window.appData.tasks.push(task);
    this.saveChanges();
    this.closeModal(form.closest('.modal'));
    this.loadDashboard();
  },

  // Close modal
  closeModal(button) {
    const modal = button.closest('.modal');
    if (modal) {
      modal.remove();
    }
  },
  
  // Hide modal - alternate method that can be called without a button reference
  hideModal() {
    const modal = document.querySelector('.modal');
    if (modal) {
      modal.remove();
    }
  },

  // Update login state
  updateLoginState() {
    const loginBtn = document.getElementById('loginBtn');
    const userInfo = document.getElementById('userInfo');
    const userName = document.getElementById('userName');
    const userRole = document.getElementById('userRole');
    const saveChangesBtn = document.getElementById('saveChangesBtn');

    // Ensure appData exists and has a state
    if (!window.appData || !window.appData.state) {
      console.warn('appData or its state is undefined in updateLoginState');
      window.appData = window.appData || {};
      window.appData.state = window.appData.state || {};
    }

    // Ensure appData.state has an isLoggedIn property
    if (typeof window.appData.state.isLoggedIn !== 'boolean') {
      console.warn('appData.state.isLoggedIn is not properly defined');
      window.appData.state = window.appData.state || {};
      window.appData.state.isLoggedIn = true;
      window.appData.state.userName = "User";
      window.appData.state.userRole = "Administrator";
    }
    
    // Always set to logged in
    window.appData.state.isLoggedIn = true;

    if (window.appData.state.isLoggedIn) {
      if (loginBtn) loginBtn.classList.add('hidden');
      if (userInfo) userInfo.classList.remove('hidden');
      if (saveChangesBtn) saveChangesBtn.classList.remove('hidden');
      
      const currentUser = window.appData.users && window.appData.users.find(user => user.id === window.appData.state.currentUser);
      if (currentUser) {
        if (userName) userName.textContent = currentUser.name;
        if (userRole) userRole.textContent = currentUser.role;
      } else {
        // Fall back to state values if user not found in users array
        if (userName) userName.textContent = window.appData.state.userName || 'User';
        if (userRole) userRole.textContent = window.appData.state.userRole || 'Guest';
      }
    } else {
      if (loginBtn) loginBtn.classList.remove('hidden');
      if (userInfo) userInfo.classList.add('hidden');
      if (saveChangesBtn) saveChangesBtn.classList.add('hidden');
    }
  },

  // Helper method to ensure images are lazy-loaded
  createLazyImage(src, altText, className = '') {
    return `<img src="${src}" alt="${altText}" class="${className}" loading="lazy">`;
  },
  
  // Render teams grid with lazy loading
  renderTeamsGrid() {
    return window.appData.teams.map(team => {
      const teamLogo = team.logo || 'https://via.placeholder.com/64x64?text=' + team.name.charAt(0);
      
      return `
        <div class="team-card bg-white rounded-lg shadow overflow-hidden transition-all hover:shadow-lg" data-team-id="${team.id}">
          <div class="p-4 flex items-center space-x-4">
            ${this.createLazyImage(teamLogo, `${team.name} logo`, 'w-16 h-16 object-cover rounded-full')}
            <div>
              <h3 class="text-lg font-semibold">
                <span class="text-${team.stream.toLowerCase()}">${team.name}</span>
              </h3>
              <p class="text-sm text-gray-500">${team.personnel.length} Members</p>
            </div>
          </div>
          <div class="px-4 pb-4">
            <div class="truncate-description">
              <p class="text-gray-700">${team.description}</p>
              <button class="text-blue-500 text-sm mt-1 show-more-btn" data-team-id="${team.id}" data-action="description">
                Show More
              </button>
            </div>
            
            <div class="mt-4 flex justify-between">
              <button class="px-3 py-1 text-sm bg-blue-500 text-white rounded hover:bg-blue-600" data-action="view" data-team-id="${team.id}">
                View Team
              </button>
              <div class="flex space-x-2">
                <button class="p-1 text-gray-500 hover:text-blue-500" data-action="edit" data-team-id="${team.id}" title="Edit Team">
                  <i class="fas fa-edit"></i>
                </button>
                <button class="p-1 text-gray-500 hover:text-red-500" data-action="delete" data-team-id="${team.id}" title="Delete Team">
                  <i class="fas fa-trash-alt"></i>
                </button>
              </div>
            </div>
          </div>
        </div>
      `;
    }).join('');
  },

  // Helper method to toggle description visibility
  toggleDescription(button, teamId) {
    const team = appData.teams.find(t => t.id === teamId);
    if (!team) return;
    
    const descriptionElement = button.previousElementSibling;
    
    if (descriptionElement.classList.contains('line-clamp-2')) {
      descriptionElement.classList.remove('line-clamp-2');
      button.textContent = 'Show less';
    } else {
      descriptionElement.classList.add('line-clamp-2');
      button.textContent = 'Read more';
    }
  },
  
  // Helper method to toggle responsibilities visibility
  toggleResponsibilities(button, teamId) {
    const team = appData.teams.find(t => t.id === teamId);
    if (!team) return;
    
    const responsibilitiesElement = button.previousElementSibling;
    
    if (responsibilitiesElement.classList.contains('line-clamp-2')) {
      responsibilitiesElement.classList.remove('line-clamp-2');
      button.textContent = 'Show less';
    } else {
      responsibilitiesElement.classList.add('line-clamp-2');
      button.textContent = 'Read more';
    }
  },
  
  // Show comprehensive team details in a modal
  showTeamDetails(teamId) {
    const team = window.appData.teams.find(t => t.id === teamId);
    if (!team) return;
    
    // Find sub-teams (teams that reference this team as parent)
    const subTeams = window.appData.teams.filter(t => t.parentTeamId === teamId);
    
    const modal = document.createElement('div');
    modal.className = 'modal modal-lg';
    modal.innerHTML = `
      <div class="modal-content">
        <div class="flex justify-between items-start mb-6">
          <div>
            <h2 class="text-2xl font-semibold text-${team.stream}">${team.name}</h2>
            <p class="text-sm text-gray-600">${team.stream.toUpperCase()} Stream</p>
          </div>
          <button class="btn-icon" onclick="ui.hideModal()">
            <i class="fas fa-times"></i>
          </button>
        </div>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
          <div>
            <h3 class="text-lg font-medium mb-3">Description</h3>
            <p class="text-gray-700">${team.description}</p>
          </div>
          
          <div>
            <h3 class="text-lg font-medium mb-3">Responsibilities</h3>
            <p class="text-gray-700">${team.responsibilities}</p>
          </div>
        </div>
        
        <div class="mb-6">
          <h3 class="text-lg font-medium mb-3">Performance</h3>
          <div class="flex items-center space-x-4">
            <div class="w-full bg-gray-200 rounded-full h-2.5">
              <div class="bg-${team.stream} h-2.5 rounded-full" style="width: ${team.performance || 0}%"></div>
            </div>
            <span class="text-lg font-semibold">${team.performance || 0}%</span>
          </div>
        </div>
        
        ${subTeams.length > 0 ? `
          <div class="mb-6">
            <div class="flex justify-between items-center mb-4">
              <h3 class="text-lg font-medium">Sub-Teams (${subTeams.length})</h3>
            </div>
            
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              ${subTeams.map(subTeam => `
                <div class="bg-white border border-gray-200 rounded-lg shadow-sm p-4 cursor-pointer" onclick="ui.showTeamDetails(${subTeam.id})">
                  <div class="flex items-center space-x-3">
                    <div class="w-8 h-8 rounded-full flex items-center justify-center text-white bg-${subTeam.stream}-600">
                      ${subTeam.name.charAt(0)}
                    </div>
                    <div>
                      <h4 class="font-medium">${subTeam.name}</h4>
                      <p class="text-xs text-gray-500">${subTeam.personnel ? subTeam.personnel.length : 0} members</p>
                    </div>
                  </div>
                </div>
              `).join('')}
            </div>
          </div>
        ` : ''}
        
        <div>
          <div class="flex justify-between items-center mb-4">
            <h3 class="text-lg font-medium">Personnel (${team.personnel.length})</h3>
            <button class="btn-primary btn-sm" onclick="ui.showAddPersonnelModal(${team.id})">
              <i class="fas fa-user-plus mr-2"></i> Add Personnel
            </button>
          </div>
          
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            ${team.personnel.map(person => `
              <div class="bg-gray-50 p-4 rounded-md hover:shadow-md transition-shadow">
                <div class="flex justify-between items-start">
                  <div>
                    <p class="font-medium">${person.name}</p>
                    <p class="text-sm text-gray-600">${person.role}</p>
                    <p class="text-sm text-gray-600 mt-1">Client: ${person.client}</p>
                  </div>
                  <div class="flex space-x-1">
                    <button class="btn-icon btn-sm" onclick="ui.editPersonnel(${person.id})">
                      <i class="fas fa-user-edit"></i>
                    </button>
                    <button class="btn-icon btn-sm" onclick="ui.removePersonnel(${person.id}, ${team.id})">
                      <i class="fas fa-user-minus"></i>
                    </button>
                  </div>
                </div>
                ${person.skills ? `
                <div class="mt-3 pt-3 border-t">
                  <p class="text-xs text-gray-500 mb-1">Skills:</p>
                  <div class="flex flex-wrap gap-1">
                    ${Object.entries(person.skills).slice(0, 3).map(([id, level]) => {
                      const skill = window.appData.skills?.find(s => s.id == id);
                      return skill ? `
                        <span class="px-2 py-0.5 text-xs rounded-full bg-${team.stream} bg-opacity-10 text-${team.stream}">
                          ${skill.name}: ${level}
                        </span>
                      ` : '';
                    }).join('')}
                    ${Object.keys(person.skills).length > 3 ? `
                      <span class="px-2 py-0.5 text-xs rounded-full bg-gray-100 text-gray-600">
                        +${Object.keys(person.skills).length - 3} more
                      </span>
                    ` : ''}
                  </div>
                </div>
                ` : ''}
              </div>
            `).join('')}
          </div>
        </div>
        
        <div class="mt-6 flex justify-end space-x-3">
          <button class="btn-secondary" onclick="ui.editTeam(${team.id})">
            <i class="fas fa-edit mr-2"></i> Edit Team
          </button>
          <button class="btn-primary" onclick="ui.showAddSubTeamModal(${team.id})">
            <i class="fas fa-plus mr-2"></i> Add Sub-Team
          </button>
        </div>
      </div>
    `;
    document.body.appendChild(modal);
    
    // Add CSS for line clamp if not already added
    if (!document.getElementById('line-clamp-css')) {
      const style = document.createElement('style');
      style.id = 'line-clamp-css';
      style.textContent = `
        .line-clamp-2 {
          display: -webkit-box;
          -webkit-line-clamp: 2;
          -webkit-box-orient: vertical;
          overflow: hidden;
        }
        .tooltip-trigger {
          position: relative;
        }
        .tooltip {
          visibility: hidden;
          position: absolute;
          top: -30px;
          left: 50%;
          transform: translateX(-50%);
          background-color: #333;
          color: white;
          padding: 4px 8px;
          border-radius: 4px;
          font-size: 12px;
          white-space: nowrap;
          opacity: 0;
          transition: opacity 0.3s;
          z-index: 10;
        }
        .tooltip-trigger:hover .tooltip {
          visibility: visible;
          opacity: 1;
        }
      `;
      document.head.appendChild(style);
    }
  },
  
  // Create a sub-team
  showAddSubTeamModal(parentTeamId) {
    const parentTeam = window.appData.teams.find(t => t.id === parentTeamId);
    if (!parentTeam) return;
    
    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <h2 class="text-xl font-semibold mb-4">Add Sub-Team to ${parentTeam.name}</h2>
        <form id="addSubTeamForm">
          <div class="form-group">
            <label for="teamName">Team Name</label>
            <input type="text" id="teamName" class="form-input" required>
          </div>
          <div class="form-group">
            <label for="teamStream">Stream</label>
            <select id="teamStream" class="form-select" required>
              <option value="${parentTeam.stream}" selected>${parentTeam.stream.toUpperCase()}</option>
              <option value="bbv">BBV</option>
              <option value="add">ADD</option>
              <option value="arb">ARB</option>
              <option value="shared">Shared</option>
            </select>
          </div>
          <div class="form-group">
            <label for="teamDescription">Description</label>
            <textarea id="teamDescription" class="form-textarea" rows="3" required></textarea>
          </div>
          <div class="form-group">
            <label for="teamResponsibilities">Responsibilities</label>
            <textarea id="teamResponsibilities" class="form-textarea" rows="3" required></textarea>
          </div>
          <div class="flex justify-end space-x-2 mt-4">
            <button type="button" class="btn-secondary" onclick="ui.hideModal()">Cancel</button>
            <button type="submit" class="btn-primary">Add Sub-Team</button>
          </div>
        </form>
      </div>
    `;
    document.body.appendChild(modal);
    
    // Handle form submission
    document.getElementById('addSubTeamForm').addEventListener('submit', e => {
      e.preventDefault();
      
      // Generate a new ID
      const newId = Date.now();
      
      // Create new team
      const newTeam = {
        id: newId,
        parentTeamId: parentTeamId,
        name: document.getElementById('teamName').value,
        stream: document.getElementById('teamStream').value,
        description: document.getElementById('teamDescription').value,
        responsibilities: document.getElementById('teamResponsibilities').value,
        performance: 0,
        personnel: []
      };
      
      // Add to teams array
      if (!window.appData.teams) window.appData.teams = [];
      window.appData.teams.push(newTeam);
      
      // Save changes
      this.saveChanges();
      
      // Hide modal
      this.hideModal();
      
      // Show success message
      this.showToast('Sub-team added successfully', 'success');
      
      // Open the new team details
      this.showTeamDetails(newId);
    });
  },
  
  loadTeams() {
    try {
      console.log('Loading teams content...');
      
      const tabContent = document.getElementById('tabContent');
      if (!tabContent) {
        console.error('Tab content element not found');
        return;
      }

      // Check if already loading to prevent duplicate loads
      if (tabContent.dataset.loading === 'true' && tabContent.dataset.currentTab === 'teams') {
        console.log('Teams already loading, skipping duplicate load request');
        return;
      }
      
      // Set loading state
      tabContent.dataset.loading = 'true';
      tabContent.dataset.currentTab = 'teams';
      
      // Clear any existing content first - important to avoid content from other tabs persisting
      tabContent.innerHTML = `
        <div class="flex justify-center items-center p-12">
          <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
          <p class="ml-4 text-gray-500">Loading teams content...</p>
        </div>
      `;

      // Use a setTimeout to allow the loading indicator to render
      setTimeout(() => {
        try {
          // Ensure appData and teams array exists - defensive coding
          if (!window.appData) window.appData = {};
          if (!window.appData.teams) window.appData.teams = [];
          
          // Check if a stream filter was set from dashboard navigation
          const activeFilter = sessionStorage.getItem('activeFilter');
          let teams = window.appData.teams;
          
          // Filter teams if an active filter is set
          if (activeFilter) {
            teams = teams.filter(team => team && team.stream === activeFilter);
            console.log(`Applying stream filter: ${activeFilter}, filtered to ${teams.length} teams`);
          }

          // Generate team cards with safe access to properties
          const teamCards = teams.length > 0 ? teams.map(team => {
            // Ensure team has all required properties
            if (!team) return '';
            
            // Ensure personnel exists
            if (!team.personnel) team.personnel = [];
            
            return `
              <div class="bg-white rounded-lg shadow-sm hover:shadow transition-all p-4 border border-gray-200 cursor-pointer team-card" data-team-id="${team.id || ''}">
                <div class="flex items-center space-x-3 mb-3">
                  <div class="w-10 h-10 rounded-full flex items-center justify-center text-white bg-${team.stream || 'gray'}-600">
                    ${team.name ? team.name.charAt(0) : '?'}
                  </div>
                  <div>
                    <h3 class="font-semibold">${team.name || 'Unnamed Team'}</h3>
                    <p class="text-xs text-gray-500">${(team.stream || 'unknown').toUpperCase()} • ${team.personnel.length} members</p>
                  </div>
                </div>
                
                <p class="text-sm text-gray-600 mb-4">${team.description || 'No description available'}</p>
                
                <div class="text-xs text-gray-500 mb-1 flex justify-between">
                  <span>Performance</span>
                  <span>${team.performance || 0}%</span>
                </div>
                
                <div class="w-full bg-gray-200 rounded-full h-2 mb-4">
                  <div class="bg-${team.stream || 'blue'}-600 h-2 rounded-full" style="width: ${team.performance || 0}%"></div>
                </div>
                
                <div class="flex justify-between">
                  <button class="text-blue-600 text-sm hover:text-blue-800 view-team-btn" data-team-id="${team.id || ''}">
                    View Details
                  </button>
                  <div>
                    <button class="text-gray-500 hover:text-blue-600 mx-2 edit-team-btn" data-team-id="${team.id || ''}">
                      <i class="fas fa-edit"></i>
                    </button>
                    <button class="text-gray-500 hover:text-red-600 delete-team-btn" data-team-id="${team.id || ''}">
                      <i class="fas fa-trash-alt"></i>
                    </button>
                  </div>
                </div>
              </div>
            `;
          }).join('') : '<p class="col-span-full text-center py-8 text-gray-500">No teams available</p>';

          // Render the final teams tab content with filter info if active
          tabContent.innerHTML = `
            <div class="p-4">
              <div class="flex justify-between items-center mb-6">
                <div>
                  <h2 class="text-2xl font-bold">Teams</h2>
                  ${activeFilter ? `
                    <div class="flex items-center mt-2">
                      <span class="text-sm text-gray-600 mr-2">Filtered by: ${activeFilter.toUpperCase()}</span>
                      <button class="text-xs text-blue-600 hover:text-blue-800 flex items-center" id="clearFilterBtn">
                        <i class="fas fa-times-circle mr-1"></i> Clear filter
                      </button>
                    </div>
                  ` : ''}
                </div>
                <button class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition flex items-center" id="addTeamButton">
                  <i class="fas fa-plus mr-2"></i> Add Team
                </button>
              </div>
              
              <!-- Team Cards -->
              <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6" id="teamsGrid">
                ${teamCards}
              </div>
            </div>
          `;
          
          // Add event listeners to team actions
          this.addTeamEventListeners();
          
          // Add event listener to clear filter button if it exists
          const clearFilterBtn = document.getElementById('clearFilterBtn');
          if (clearFilterBtn) {
            clearFilterBtn.addEventListener('click', () => {
              sessionStorage.removeItem('activeFilter');
              this.loadTeams();
            });
          }
          
          // Reset loading state
          tabContent.dataset.loading = 'false';
          
          console.log('Teams content loaded successfully');
        } catch (error) {
          console.error('Error rendering teams:', error);
          
          // Show error message
          tabContent.innerHTML = `
            <div class="p-8 text-center">
              <div class="text-red-500 text-xl mb-4">
                <i class="fas fa-exclamation-triangle mr-2"></i> 
                Error loading Teams
              </div>
              <p class="mb-4">${error.message || 'An unknown error occurred'}</p>
              <button class="px-4 py-2 bg-blue-600 text-white rounded" onclick="ui.switchTab('teams')">
                <i class="fas fa-sync-alt mr-2"></i> Try Again
              </button>
            </div>
          `;
          
          // Reset loading state
          tabContent.dataset.loading = 'false';
        }
      }, 150); // Slightly longer delay for better reliability
    } catch (error) {
      console.error('Critical error in loadTeams:', error);
      
      // Show error message
      const tabContent = document.getElementById('tabContent');
      if (tabContent) {
        tabContent.innerHTML = `
          <div class="p-8 text-center">
            <div class="text-red-500 text-xl mb-4">
              <i class="fas fa-exclamation-triangle mr-2"></i> 
              Critical Error Loading Teams
            </div>
            <p class="mb-4">${error.message || 'An unknown error occurred'}</p>
            <button class="px-4 py-2 bg-blue-600 text-white rounded" onclick="location.reload()">
              <i class="fas fa-sync-alt mr-2"></i> Refresh Page
            </button>
          </div>
        `;
        
        // Reset loading state
        tabContent.dataset.loading = 'false';
      }
    }
  },
  
  // Add a new helper method to attach event listeners to team elements
  addTeamEventListeners() {
    try {
      // Add team button
      const addTeamButton = document.getElementById('addTeamButton');
      if (addTeamButton) {
        addTeamButton.addEventListener('click', () => this.showAddTeamModal());
      }
      
      // Make entire team cards clickable
      const teamCards = document.querySelectorAll('.team-card');
      teamCards.forEach(card => {
        const teamId = parseInt(card.getAttribute('data-team-id'));
        if (!isNaN(teamId)) {
          card.addEventListener('click', (e) => {
            // Only handle click if it's directly on the card (not on a button)
            if (e.target.closest('button') === null) {
              this.showTeamDetails(teamId);
            }
          });
        }
      });
      
      // View team buttons
      const viewTeamBtns = document.querySelectorAll('.view-team-btn');
      viewTeamBtns.forEach(btn => {
        const teamIdAttr = btn.getAttribute('data-team-id');
        if (teamIdAttr) {
          const teamId = parseInt(teamIdAttr);
          if (!isNaN(teamId)) {
            btn.addEventListener('click', (e) => {
              e.stopPropagation(); // Prevent card click
              this.showTeamDetails(teamId);
            });
          }
        }
      });
      
      // Edit team buttons
      const editTeamBtns = document.querySelectorAll('.edit-team-btn');
      editTeamBtns.forEach(btn => {
        const teamIdAttr = btn.getAttribute('data-team-id');
        if (teamIdAttr) {
          const teamId = parseInt(teamIdAttr);
          if (!isNaN(teamId)) {
            btn.addEventListener('click', (e) => {
              e.stopPropagation(); // Prevent card click
              this.editTeam(teamId);
            });
          }
        }
      });
      
      // Delete team buttons
      const deleteTeamBtns = document.querySelectorAll('.delete-team-btn');
      deleteTeamBtns.forEach(btn => {
        const teamIdAttr = btn.getAttribute('data-team-id');
        if (teamIdAttr) {
          const teamId = parseInt(teamIdAttr);
          if (!isNaN(teamId)) {
            btn.addEventListener('click', (e) => {
              e.stopPropagation(); // Prevent card click
              this.deleteTeam(teamId);
            });
          }
        }
      });
    } catch (error) {
      console.error('Error setting up team event listeners:', error);
      this.showToast('Error setting up team interactions', 'error');
    }
  },
  
  // Helper functions for team statistics
  countAllPersonnel() {
    let count = 0;
    if (window.appData && window.appData.teams) {
      window.appData.teams.forEach(team => {
        if (team.personnel) count += team.personnel.length;
      });
    }
    return count;
  },
  
  calculateAverageTeamSize() {
    if (!window.appData || !window.appData.teams || window.appData.teams.length === 0) {
      return 0;
    }
    const totalPersonnel = this.countAllPersonnel();
    return Math.round(totalPersonnel / window.appData.teams.length);
  },
  
  calculateAveragePerformance() {
    if (!window.appData || !window.appData.teams || window.appData.teams.length === 0) {
      return 0;
    }
    const totalPerformance = window.appData.teams.reduce((sum, team) => sum + (team.performance || 0), 0);
    return Math.round(totalPerformance / window.appData.teams.length);
  },
  
  // Simple team rendering
  renderTeamsSimple() {
    if (!window.appData || !window.appData.teams || window.appData.teams.length === 0) {
      return '<div class="col-span-full text-center py-8 text-gray-500">No teams available</div>';
    }
    
    return window.appData.teams.map(team => `
      <div class="bg-white rounded-lg shadow-sm hover:shadow transition-all p-4 border border-gray-200">
        <div class="flex items-center space-x-3 mb-3">
          <div class="w-10 h-10 rounded-full flex items-center justify-center text-white bg-gray-600">
            ${team.name.charAt(0)}
          </div>
          <div>
            <h3 class="font-semibold">${team.name}</h3>
            <p class="text-xs text-gray-500">${team.stream.toUpperCase()} • ${team.personnel ? team.personnel.length : 0} members</p>
          </div>
        </div>
        
        <p class="text-sm text-gray-600 mb-4">${team.description}</p>
        
        <div class="text-xs text-gray-500 mb-1 flex justify-between">
          <span>Performance</span>
          <span>${team.performance || 0}%</span>
        </div>
        
        <div class="w-full bg-gray-200 rounded-full h-2 mb-4">
          <div class="bg-blue-600 h-2 rounded-full" style="width: ${team.performance || 0}%"></div>
        </div>
        
        <div class="flex justify-between">
          <button class="text-blue-600 text-sm hover:text-blue-800" onclick="ui.showTeamDetails(${team.id})">
            View Details
          </button>
          <div>
            <button class="text-gray-500 hover:text-blue-600 mx-2" onclick="ui.editTeam(${team.id})">
              <i class="fas fa-edit"></i>
            </button>
            <button class="text-gray-500 hover:text-red-600" onclick="ui.deleteTeam(${team.id})">
              <i class="fas fa-trash-alt"></i>
            </button>
          </div>
        </div>
      </div>
    `).join('');
  },
  
  // Export teams data as CSV or JSON
  exportTeamsCSV() {
    let csvContent = "data:text/csv;charset=utf-8,";
    
    // Add headers
    csvContent += "Team ID,Team Name,Stream,Personnel Count,Performance,Description,Responsibilities\n";
    
    // Add team data
    window.appData.teams.forEach(team => {
      csvContent += [
        team.id,
        `"${team.name.replace(/"/g, '""')}"`,
        team.stream,
        team.personnel.length,
        team.performance || 0,
        `"${team.description.replace(/"/g, '""')}"`,
        `"${team.responsibilities.replace(/"/g, '""')}"`
      ].join(',') + '\n';
    });
    
    // Create download link
    const encodedUri = encodeURI(csvContent);
    const link = document.createElement("a");
    link.setAttribute("href", encodedUri);
    link.setAttribute("download", "teams_data.csv");
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
    this.hideModal();
    this.showToast('Teams exported as CSV', 'success');
  },
  
  exportTeamsJSON() {
    const data = JSON.stringify(window.appData.teams, null, 2);
    const blob = new Blob([data], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    
    const link = document.createElement("a");
    link.setAttribute("href", url);
    link.setAttribute("download", "teams_data.json");
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
    
    this.hideModal();
    this.showToast('Teams exported as JSON', 'success');
  },
  
  sortTeams() {
    const sortBy = document.getElementById('sortTeams').value;
    const grid = document.getElementById('teamsGrid');
    const cards = Array.from(grid.querySelectorAll('.team-card'));
    
    cards.sort((a, b) => {
      const aId = parseInt(a.getAttribute('data-id'));
      const bId = parseInt(b.getAttribute('data-id'));
      const aTeam = window.appData.teams.find(t => t.id === aId);
      const bTeam = window.appData.teams.find(t => t.id === bId);
      
      if (!aTeam || !bTeam) return 0;
      
      switch (sortBy) {
        case 'name':
          return aTeam.name.localeCompare(bTeam.name);
        case 'size':
          return bTeam.personnel.length - aTeam.personnel.length;
        case 'performance':
          return (bTeam.performance || 0) - (aTeam.performance || 0);
        default:
          return 0;
      }
    });
    
    // Re-append cards in the sorted order
    cards.forEach(card => grid.appendChild(card));
  },

  showAddTeamModal() {
    try {
      const modal = document.createElement('div');
      modal.className = 'modal';
      modal.innerHTML = `
        <div class="modal-content">
          <h2 class="text-xl font-semibold mb-4">Add New Team</h2>
          <form id="addTeamForm">
            <div class="form-group">
              <label for="teamName">Team Name</label>
              <input type="text" id="teamName" required>
            </div>
            <div class="form-group">
              <label for="teamStream">Stream</label>
              <select id="teamStream" required>
                <option value="bbv">BBV</option>
                <option value="add">ADD</option>
                <option value="arb">ARB</option>
                <option value="shared">Shared</option>
              </select>
            </div>
            <div class="form-group">
              <label for="teamDescription">Description</label>
              <textarea id="teamDescription" rows="3" required></textarea>
            </div>
            <div class="form-group">
              <label for="teamResponsibilities">Responsibilities</label>
              <textarea id="teamResponsibilities" rows="3" required></textarea>
            </div>
            <div class="flex justify-end space-x-2 mt-4">
              <button type="button" class="btn-secondary" onclick="ui.hideModal()">Cancel</button>
              <button type="submit" class="btn-primary">Add Team</button>
            </div>
          </form>
        </div>
      `;
      document.body.appendChild(modal);

      const form = modal.querySelector('#addTeamForm');
      if (form) {
        form.addEventListener('submit', (e) => {
          e.preventDefault();
          try {
            // Ensure appData and teams exist
            if (!window.appData) window.appData = {};
            if (!window.appData.teams) window.appData.teams = [];
            
            const team = {
              id: Date.now(),
              name: form.querySelector('#teamName').value.trim(),
              stream: form.querySelector('#teamStream').value,
              description: form.querySelector('#teamDescription').value.trim(),
              responsibilities: form.querySelector('#teamResponsibilities').value.trim(),
              performance: 0,
              personnel: []
            };
            
            window.appData.teams.push(team);
            
            this.saveChanges();
            this.hideModal();
            this.showToast('Team added successfully', 'success');
            this.loadTeams();
          } catch (formError) {
            console.error('Error adding team:', formError);
            this.showToast('Error adding team: ' + (formError.message || 'Unknown error'), 'error');
          }
        });
      }
    } catch (error) {
      console.error('Error showing add team modal:', error);
      this.showToast('Could not open add team form', 'error');
    }
  },

  editTeam(teamId) {
    const team = window.appData.teams.find(t => t.id === teamId);
    if (!team) return;

    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <h2 class="text-xl font-semibold mb-4">Edit Team</h2>
        <form id="editTeamForm">
          <div class="form-group">
            <label for="teamName">Team Name</label>
            <input type="text" id="teamName" value="${team.name}" required>
          </div>
          <div class="form-group">
            <label for="teamStream">Stream</label>
            <select id="teamStream" required>
              <option value="bbv" ${team.stream === 'bbv' ? 'selected' : ''}>BBV</option>
              <option value="add" ${team.stream === 'add' ? 'selected' : ''}>ADD</option>
              <option value="arb" ${team.stream === 'arb' ? 'selected' : ''}>ARB</option>
              <option value="shared" ${team.stream === 'shared' ? 'selected' : ''}>Shared</option>
            </select>
          </div>
          <div class="form-group">
            <label for="teamDescription">Description</label>
            <textarea id="teamDescription" rows="3" required>${team.description}</textarea>
          </div>
          <div class="form-group">
            <label for="teamResponsibilities">Responsibilities</label>
            <textarea id="teamResponsibilities" rows="3" required>${team.responsibilities}</textarea>
          </div>
          <div class="form-group">
            <label for="teamPerformance">Performance Score</label>
            <input type="number" id="teamPerformance" min="0" max="100" value="${team.performance}" required>
          </div>
          <div class="flex justify-end space-x-2 mt-4">
            <button type="button" class="btn-secondary" onclick="ui.hideModal()">Cancel</button>
            <button type="submit" class="btn-primary">Save Changes</button>
          </div>
        </form>
      </div>
    `;
    document.body.appendChild(modal);

    const form = modal.querySelector('#editTeamForm');
    form.addEventListener('submit', (e) => {
      e.preventDefault();
      team.name = form.querySelector('#teamName').value;
      team.stream = form.querySelector('#teamStream').value;
      team.description = form.querySelector('#teamDescription').value;
      team.responsibilities = form.querySelector('#teamResponsibilities').value;
      team.performance = parseInt(form.querySelector('#teamPerformance').value);
      
      this.saveChanges();
      this.hideModal();
      this.showToast('Team updated successfully', 'success');
      this.loadTeams();
    });
  },

  deleteTeam(teamId) {
    if (confirm('Are you sure you want to delete this team? This action cannot be undone.')) {
      window.appData.teams = window.appData.teams.filter(t => t.id !== teamId);
      this.saveChanges();
      this.showToast('Team deleted successfully', 'success');
      this.loadTeams();
    }
  },

  showAddPersonnelModal(teamId) {
    const team = window.appData.teams.find(t => t.id === teamId);
    if (!team) return;

    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <h2 class="text-xl font-semibold mb-4">Add Personnel to ${team.name}</h2>
        <form id="addPersonnelForm">
          <div class="form-group">
            <label for="personnelName">Name</label>
            <input type="text" id="personnelName" required>
          </div>
          <div class="form-group">
            <label for="personnelRole">Role</label>
            <input type="text" id="personnelRole" required>
          </div>
          <div class="form-group">
            <label for="personnelClient">Client</label>
            <input type="text" id="personnelClient" required>
          </div>
          <div class="flex justify-end space-x-2 mt-4">
            <button type="button" class="btn-secondary" onclick="ui.hideModal()">Cancel</button>
            <button type="submit" class="btn-primary">Add Personnel</button>
          </div>
        </form>
      </div>
    `;
    document.body.appendChild(modal);

    const form = modal.querySelector('#addPersonnelForm');
    form.addEventListener('submit', (e) => {
      e.preventDefault();
      const personnel = {
        id: Date.now(),
        name: form.querySelector('#personnelName').value,
        role: form.querySelector('#personnelRole').value,
        client: form.querySelector('#personnelClient').value
      };
      
      team.personnel.push(personnel);
      this.saveChanges();
      this.hideModal();
      this.showToast('Personnel added successfully', 'success');
      this.loadTeams();
    });
  },

  editPersonnel(personnelId) {
    const team = window.appData.teams.find(t => t.personnel.some(p => p.id === personnelId));
    const personnel = team?.personnel.find(p => p.id === personnelId);
    if (!personnel) return;

    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <h2 class="text-xl font-semibold mb-4">Edit Personnel</h2>
        <form id="editPersonnelForm">
          <div class="form-group">
            <label for="personnelName">Name</label>
            <input type="text" id="personnelName" value="${personnel.name}" required>
          </div>
          <div class="form-group">
            <label for="personnelRole">Role</label>
            <input type="text" id="personnelRole" value="${personnel.role}" required>
          </div>
          <div class="form-group">
            <label for="personnelClient">Client</label>
            <input type="text" id="personnelClient" value="${personnel.client}" required>
          </div>
          <div class="flex justify-end space-x-2 mt-4">
            <button type="button" class="btn-secondary" onclick="ui.hideModal()">Cancel</button>
            <button type="submit" class="btn-primary">Save Changes</button>
          </div>
        </form>
      </div>
    `;
    document.body.appendChild(modal);

    const form = modal.querySelector('#editPersonnelForm');
    form.addEventListener('submit', (e) => {
      e.preventDefault();
      personnel.name = form.querySelector('#personnelName').value;
      personnel.role = form.querySelector('#personnelRole').value;
      personnel.client = form.querySelector('#personnelClient').value;
      
      this.saveChanges();
      this.hideModal();
      this.showToast('Personnel updated successfully', 'success');
      this.loadTeams();
    });
  },

  removePersonnel(personnelId, teamId) {
    const team = window.appData.teams.find(t => t.id === teamId);
    if (!team) return;

    if (confirm('Are you sure you want to remove this personnel? This action cannot be undone.')) {
      team.personnel = team.personnel.filter(p => p.id !== personnelId);
      this.saveChanges();
      this.showToast('Personnel removed successfully', 'success');
      this.loadTeams();
    }
  },

  loadOrgChart() {
    try {
      const tabContent = document.getElementById('tabContent');
      if (!tabContent) {
        console.error('Tab content element not found');
        return;
      }
      
      // Check if already loading
      if (tabContent.dataset.loading === 'true') {
        console.log('Organization chart already loading, skipping duplicate load');
        return;
      }
      
      // Set loading state
      tabContent.dataset.loading = 'true';
      
      tabContent.innerHTML = `
        <div class="p-4 space-y-6">
          <div class="flex flex-wrap items-center justify-between gap-4">
            <div>
              <h2 class="text-2xl font-semibold">Organization Chart</h2>
              <p class="text-gray-600 mt-1">Interactive visualization of the quality organization structure</p>
            </div>
            <div class="flex gap-2">
              <div class="relative">
                <select id="clientFilter" class="form-select text-sm pr-8 py-2 pl-3 border rounded-lg">
                  <option value="all">All Clients</option>
                  ${this.getUniqueClients().map(client => 
                    `<option value="${client}">${client}</option>`).join('')}
                </select>
              </div>
              <div class="relative">
                <select id="streamFilter" class="form-select text-sm pr-8 py-2 pl-3 border rounded-lg">
                  <option value="all">All Streams</option>
                  <option value="bbv">BBV</option>
                  <option value="add">ADD</option>
                  <option value="arb">ARB</option>
                  <option value="shared">Shared</option>
                </select>
              </div>
              <button id="exportOrgChartBtn" class="btn btn-secondary text-sm py-2 px-3 rounded-lg border bg-white hover:bg-gray-50">
                <i class="fas fa-download mr-1"></i> Export
              </button>
              <div class="dropdown relative inline-block">
                <button id="layoutOptionsBtn" class="btn btn-secondary text-sm py-2 px-3 rounded-lg border bg-white hover:bg-gray-50">
                  <i class="fas fa-sitemap mr-1"></i> Layout <i class="fas fa-caret-down ml-1"></i>
                </button>
                <div id="layoutDropdown" class="dropdown-content hidden absolute right-0 mt-2 bg-white border rounded-lg shadow-lg z-10 w-48">
                  <div class="p-2">
                    <button id="verticalLayout" class="block w-full text-left p-2 hover:bg-gray-100 rounded">
                      <i class="fas fa-arrows-alt-v mr-2"></i> Vertical
                    </button>
                    <button id="horizontalLayout" class="block w-full text-left p-2 hover:bg-gray-100 rounded">
                      <i class="fas fa-arrows-alt-h mr-2"></i> Horizontal
                    </button>
                    <button id="compactLayout" class="block w-full text-left p-2 hover:bg-gray-100 rounded">
                      <i class="fas fa-compress-arrows-alt mr-2"></i> Compact
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <div class="flex flex-wrap gap-4 mb-2">
            <div class="p-2 bg-white rounded-lg shadow-sm flex items-center">
              <div class="mr-2 text-sm font-medium">Zoom:</div>
              <button id="zoomOut" class="p-1 rounded hover:bg-gray-100"><i class="fas fa-minus"></i></button>
              <div id="zoomLevel" class="px-2 text-sm">100%</div>
              <button id="zoomIn" class="p-1 rounded hover:bg-gray-100"><i class="fas fa-plus"></i></button>
              <button id="zoomReset" class="ml-2 p-1 px-2 text-xs bg-gray-100 rounded hover:bg-gray-200">Reset</button>
            </div>
            
            <div class="p-2 bg-white rounded-lg shadow-sm flex items-center">
              <div class="mr-2 text-sm font-medium">Show:</div>
              <label class="inline-flex items-center cursor-pointer mr-3">
                <input type="checkbox" id="showNames" class="form-checkbox" checked>
                <span class="ml-1 text-sm">Names</span>
              </label>
              <label class="inline-flex items-center cursor-pointer mr-3">
                <input type="checkbox" id="showRoles" class="form-checkbox" checked>
                <span class="ml-1 text-sm">Roles</span>
              </label>
              <label class="inline-flex items-center cursor-pointer">
                <input type="checkbox" id="showClients" class="form-checkbox" checked>
                <span class="ml-1 text-sm">Clients</span>
              </label>
            </div>
            
            <div class="flex-grow"></div>
            
            <div class="p-2 bg-white rounded-lg shadow-sm flex items-center">
              <input type="text" id="searchOrgChart" placeholder="Search..." 
                class="border rounded px-3 py-1 text-sm focus:outline-none focus:ring-2 focus:ring-blue-300">
            </div>
          </div>
          
          <div class="bg-white p-4 rounded-lg shadow-md border border-gray-200">
            <div id="orgChartContainer" class="w-full" style="height: 700px; overflow: auto;">
              <div id="orgChart" class="w-full h-full"></div>
            </div>
          </div>
          
          <div id="nodeDetails" class="hidden bg-white p-4 rounded-lg shadow-md border border-gray-200 mt-4">
            <div class="flex justify-between items-start">
              <h3 class="text-lg font-semibold" id="detailsTitle">Node Details</h3>
              <button id="closeDetails" class="text-gray-400 hover:text-gray-600">
                <i class="fas fa-times"></i>
              </button>
            </div>
            <div id="detailsContent" class="mt-3"></div>
          </div>
        </div>
      `;
      
      // Set up event listeners for controls
      this.setupOrgChartControls();
      
      // Initialize the org chart
      this.initializeOrgChart();
      
      // Reset loading state
      tabContent.dataset.loading = 'false';
    } catch (error) {
      console.error('Error loading organization chart:', error);
      
      const tabContent = document.getElementById('tabContent');
      if (tabContent) {
        tabContent.innerHTML = `
          <div class="p-8 text-center">
            <div class="text-red-500 text-xl mb-4">
              <i class="fas fa-exclamation-triangle mr-2"></i> 
              Error Loading Organization Chart
            </div>
            <p class="mb-4">${error.message || 'An unknown error occurred'}</p>
            <button class="px-4 py-2 bg-blue-600 text-white rounded" onclick="ui.switchTab('orgchart')">
              <i class="fas fa-sync-alt mr-2"></i> Try Again
            </button>
          </div>
        `;
        
        // Reset loading state
        tabContent.dataset.loading = 'false';
      }
    }
  },

  // Set up org chart controls
  setupOrgChartControls() {
    console.log('Setting up org chart controls');
    
    // Client filter
    const clientFilter = document.getElementById('clientFilter');
    const streamFilter = document.getElementById('streamFilter');
    
    if (clientFilter && streamFilter) {
      // Get unique clients
      const clients = this.getUniqueClients();
      
      // Populate client filter
      clientFilter.innerHTML = `
        <option value="all">All Clients</option>
        ${clients.map(client => `<option value="${client}">${client}</option>`).join('')}
      `;
      
      // Add enhanced detail filter
      const detailLevel = document.getElementById('detailLevelFilter') || document.createElement('select');
      if (!document.getElementById('detailLevelFilter')) {
        detailLevel.id = 'detailLevelFilter';
        detailLevel.className = 'form-select px-3 py-2 border rounded-md text-sm';
        detailLevel.innerHTML = `
          <option value="high">High Detail</option>
          <option value="medium" selected>Medium Detail</option>
          <option value="low">Low Detail</option>
        `;
        
        // Add after stream filter
        streamFilter.parentNode.appendChild(detailLevel);
        
        // Add label
        const label = document.createElement('label');
        label.htmlFor = 'detailLevelFilter';
        label.className = 'block text-sm font-medium text-gray-700 mr-2';
        label.innerText = 'Detail Level:';
        streamFilter.parentNode.insertBefore(label, detailLevel);
      }
      
      // Event listeners - use a combined update function for efficiency
      const updateChart = () => {
        const clientValue = clientFilter.value;
        const streamValue = streamFilter.value;
        const detailValue = detailLevel.value;
        
        // Update the org chart with new filters
        this.prepareOrgChartData(clientValue, streamValue, detailValue);
      };
      
      clientFilter.addEventListener('change', updateChart);
      streamFilter.addEventListener('change', updateChart);
      detailLevel.addEventListener('change', updateChart);
      
      // Enhanced export options
      const exportContainer = document.querySelector('.export-options') || document.createElement('div');
      if (!document.querySelector('.export-options')) {
        exportContainer.className = 'export-options mt-4 flex flex-wrap gap-2';
        exportContainer.innerHTML = `
          <button id="exportOrgChartSvg" class="btn btn-sm btn-outline">
            <i class="fas fa-file-code mr-1"></i> Export SVG
          </button>
          <button id="exportOrgChartPng" class="btn btn-sm btn-outline">
            <i class="fas fa-file-image mr-1"></i> Export PNG
          </button>
          <button id="exportOrgChartPdf" class="btn btn-sm btn-outline">
            <i class="fas fa-file-pdf mr-1"></i> Export PDF
          </button>
          <button id="exportOrgChartData" class="btn btn-sm btn-outline">
            <i class="fas fa-file-csv mr-1"></i> Export Data
          </button>
        `;
        
        // Add export container to the chart controls
        const controlsContainer = document.querySelector('.org-chart-controls') || streamFilter.parentNode.parentNode;
        controlsContainer.appendChild(exportContainer);
        
        // Add event listeners for new export buttons
        document.getElementById('exportOrgChartSvg').addEventListener('click', () => this.exportOrgChartSvg());
        document.getElementById('exportOrgChartPng').addEventListener('click', () => this.exportOrgChartPng());
        document.getElementById('exportOrgChartPdf').addEventListener('click', () => this.exportOrgChartPdf());
        document.getElementById('exportOrgChartData').addEventListener('click', () => this.exportOrgChartData());
      }
    }
  },
  
  // Get unique client names from personnel
  getUniqueClients() {
    const clients = new Set();
    
    if (window.appData && window.appData.teams) {
      window.appData.teams.forEach(team => {
        if (team && team.personnel) {
          team.personnel.forEach(person => {
            if (person && person.client) {
              clients.add(person.client);
            }
          });
        }
      });
    }
    
    return Array.from(clients).sort();
  },

// UI Components and Interactions
var ui = {
  // Initialize the application
  init() {
    try {
      console.log('Initializing UI...');
      
      // Create a global variable for handling charts
      window.chartFailed = false;
      if (typeof Chart === 'undefined') {
        console.warn('Chart.js is not loaded, charts will be disabled');
        window.chartFailed = true;
      }
      
      // Use existing config or set up default
      window.config = window.config || {
        tabs: [
          { id: 'dashboard', label: 'Dashboard', icon: 'fa-chart-line' },
          { id: 'teams', label: 'Teams', icon: 'fa-users' },
          { id: 'personnel', label: 'Personnel', icon: 'fa-user' },
          { id: 'documentation', label: 'Documentation', icon: 'fa-file-alt' },
          { id: 'planning', label: 'Planning', icon: 'fa-project-diagram' },
          { id: 'orgchart', label: 'Org Chart', icon: 'fa-sitemap' },
          { id: 'rolematrix', label: 'Role Matrix', icon: 'fa-th' },
          { id: 'skillsmatrix', label: 'Skills Matrix', icon: 'fa-cubes' },
          { id: 'racimatrix', label: 'RACI Matrix', icon: 'fa-list-alt' }
        ],
        colors: {
          bbv: '#00518A',     // BBV blue
          add: '#CC2030',     // ADD red
          arb: '#4F46E5',     // ARB purple
          shared: '#232323',  // Shared black
          root: '#333333'     // Root color for org chart
        }
      };
      
      // Use the appData from app.js rather than initializing redundant data
      if (!window.appData) {
        console.error('appData not initialized - this should be done in app.js');
        window.appData = {}; // Create empty object as fallback
      }
      
      // Set up tabs first - do this before other setup
      if (typeof this.setupTabs === 'function') {
        try {
          this.setupTabs();
        } catch (error) {
          console.error('Error in setupTabs:', error);
          
          // Create fallback tabs directly
          this.createFallbackTabs();
        }
      } else {
        console.error('setupTabs method not found');
        throw new Error('Required UI methods are missing');
      }
      
      // Set up login state
      this.updateLoginState();
      
      // Hide login button completely
      const loginBtn = document.getElementById('loginBtn');
      if (loginBtn) {
        loginBtn.style.display = 'none';
      }
      
      // Set up scroll-to-top button
      this.setupScrollToTop();
      
      // Set up save changes button
      this.setupSaveChangesButton();
      
      console.log('UI initialization complete');
    } catch (error) {
      console.error('Critical error in UI initialization:', error);
      // Attempt recovery through fix-critical.js
    }
  },
  
  // Create fallback tabs when setupTabs fails
  createFallbackTabs() {
    console.warn('Setting up fallback tabs due to setupTabs error');
    const tabList = document.getElementById('tabList');
    if (tabList) {
      // Make sure we have the config with all tabs
      const tabsConfig = window.config && window.config.tabs ? window.config.tabs : [
        { id: 'dashboard', label: 'Dashboard', icon: 'fa-chart-line' },
        { id: 'teams', label: 'Teams', icon: 'fa-users' },
        { id: 'personnel', label: 'Personnel', icon: 'fa-user' },
        { id: 'documentation', label: 'Documentation', icon: 'fa-file-alt' },
        { id: 'planning', label: 'Planning', icon: 'fa-project-diagram' },
        { id: 'orgchart', label: 'Org Chart', icon: 'fa-sitemap' },
        { id: 'rolematrix', label: 'Role Matrix', icon: 'fa-th' },
        { id: 'skillsmatrix', label: 'Skills Matrix', icon: 'fa-cubes' },
        { id: 'racimatrix', label: 'RACI Matrix', icon: 'fa-list-alt' }
      ];
      
      // Create tab buttons
      let tabsHTML = '';
      tabsConfig.forEach((tab, index) => {
        tabsHTML += `
          <button class="tab-btn ${index === 0 ? 'active' : ''}" 
                id="tab-${tab.id}" 
                data-tab="${tab.id}" 
                role="tab" 
                aria-selected="${index === 0 ? 'true' : 'false'}" 
                aria-controls="panel-${tab.id}">
            <i class="fas ${tab.icon}" aria-hidden="true"></i>
            <span>${tab.label}</span>
          </button>
        `;
      });
      tabList.innerHTML = tabsHTML;
      
      // Add basic click handlers
      const btns = tabList.querySelectorAll('.tab-btn');
      btns.forEach(btn => {
        btn.addEventListener('click', () => {
          const tabId = btn.getAttribute('data-tab');
          // Update active state on all buttons
          btns.forEach(b => {
            b.classList.toggle('active', b === btn);
            b.setAttribute('aria-selected', b === btn ? 'true' : 'false');
          });
          // Try to switch tab
          this.switchTab(tabId);
        });
      });
    }
  },

  // Set up tabs
  setupTabs() {
    const tabList = document.getElementById('tabList');
    if (!tabList) return;

    // Create tab buttons
    tabList.innerHTML = config.tabs.map((tab, index) => `
      <button class="tab-btn" 
             id="tab-${tab.id}" 
             data-tab="${tab.id}" 
             role="tab" 
             aria-selected="${index === 0 ? 'true' : 'false'}" 
             aria-controls="panel-${tab.id}">
        <i class="fas ${tab.icon}" aria-hidden="true"></i>
        <span>${tab.label}</span>
      </button>
    `).join('');

    // Add click handlers
    const tabButtons = tabList.querySelectorAll('.tab-btn');
    tabButtons.forEach(button => {
      button.addEventListener('click', () => {
        const tabId = button.getAttribute('data-tab');
        this.switchTab(tabId);
      });
      
      // Add keyboard navigation for accessibility
      button.addEventListener('keydown', (e) => {
        const tabs = Array.from(tabList.querySelectorAll('.tab-btn'));
        const index = tabs.indexOf(button);
        
        // Handle arrow key navigation
        if (e.key === 'ArrowRight' || e.key === 'ArrowDown') {
          e.preventDefault();
          const nextIndex = (index + 1) % tabs.length;
          tabs[nextIndex].focus();
        } else if (e.key === 'ArrowLeft' || e.key === 'ArrowUp') {
          e.preventDefault();
          const prevIndex = (index - 1 + tabs.length) % tabs.length;
          tabs[prevIndex].focus();
        } else if (e.key === 'Home') {
          e.preventDefault();
          tabs[0].focus();
        } else if (e.key === 'End') {
          e.preventDefault();
          tabs[tabs.length - 1].focus();
        }
      });
    });
  },

  // Switch to a different tab
  switchTab(tabId) {
    try {
      console.log(`Switching to tab: ${tabId}`);
      
      // Validate tabId to prevent security issues and errors
      if (!tabId || typeof tabId !== 'string') {
        console.error('Invalid tabId:', tabId);
        this.showToast('Invalid tab selection', 'error');
        return;
      }
      
      // Sanitize tabId by using a whitelist approach instead of regex
      const validTabs = (window.config && window.config.tabs) ? 
        window.config.tabs.map(tab => tab.id) : 
        ['dashboard', 'teams', 'personnel', 'documentation', 'planning', 'orgchart', 'rolematrix', 'skillsmatrix', 'analytics', 'racimatrix'];
      
      if (!validTabs.includes(tabId)) {
        console.error(`Invalid tabId: ${tabId} not in allowed list`);
        this.showToast('Invalid tab selection', 'error');
        return;
      }
      
      // Get the tab content element
      const tabContent = document.getElementById('tabContent');
      if (!tabContent) {
        console.error('Tab content element not found');
        this.showToast('Error loading content: Tab container not found', 'error');
        return;
      }
      
      // Update active tab buttons
      this.updateActiveTab(tabId);
      
      // Update application state
      if (window.appData && window.appData.state) {
        window.appData.state.currentTab = tabId;
      }
      
      // Show loading indicator
      tabContent.innerHTML = `
        <div class="tab-loading">
          <div class="loader-spinner"></div>
          <p>Loading ${this.sanitizeHtml(tabId)} content...</p>
        </div>
      `;
      
      // Use a switch statement to call the appropriate loading function
      switch (tabId) {
        case 'dashboard':
          this.loadDashboard();
          break;
        case 'teams':
          this.loadTeams();
          break;
        case 'personnel':
          this.loadPersonnel();
          break;
        case 'documentation':
          this.loadDocumentation();
          break;
        case 'planning':
          this.loadPlanning();
          break;
        case 'orgchart':
          this.loadOrgChart();
          break;
        case 'rolematrix':
          this.loadRoleMatrix();
          break;
        case 'skillsmatrix':
          this.loadSkillsMatrix();
          break;
        case 'analytics':
          this.loadAnalyticsDashboard();
          break;
        case 'racimatrix':
          this.loadRaciMatrix();
          break;
        default:
          console.error(`No loader found for tab: ${tabId}`);
          this.showToast(`Error: Content for ${this.sanitizeHtml(tabId)} not available`, 'error');
      }
    } catch (error) {
      console.error('Error switching tabs:', error);
      this.showToast('An error occurred while switching tabs', 'error');
      
      // Try recovery options
      const tabContent = document.getElementById('tabContent');
      if (tabContent) {
        tabContent.innerHTML = `
          <div class="error-container">
            <h2>Error Loading Content</h2>
            <p>There was a problem loading the requested content.</p>
            <button class="btn btn-primary" onclick="window.ui.switchTab('dashboard')">
              Return to Dashboard
            </button>
          </div>
        `;
      }
    }
  },
  
  // Update the active tab in the UI
  updateActiveTab(tabId) {
    const tabButtons = document.querySelectorAll('.tab-btn');
    tabButtons.forEach(button => {
      const buttonTabId = button.getAttribute('data-tab');
      button.classList.toggle('active', buttonTabId === tabId);
      button.setAttribute('aria-selected', buttonTabId === tabId ? 'true' : 'false');
    });
  },
  
  // Sanitize HTML to prevent XSS attacks
  sanitizeHtml(str) {
    if (!str || typeof str !== 'string') return '';
    return String(str)
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&#39;');
  },
  
  // Safe HTML insertion helper
  setElementHtml(element, html) {
    if (!element) return;
    
    try {
      // For simple strings, use textContent instead of innerHTML
      if (!html.includes('<')) {
        element.textContent = html;
        return;
      }
      
      // For HTML content, use DOMPurify if available
      if (window.DOMPurify) {
        element.innerHTML = window.DOMPurify.sanitize(html);
      } else {
        // Basic fallback - only safe for trusted content
        element.innerHTML = html;
      }
    } catch (error) {
      console.error('Error setting element HTML:', error);
      element.textContent = 'Error displaying content';
    }
  },

  // Set up scroll-to-top button
  setupScrollToTop() {
    const scrollTopBtn = document.getElementById('scrollTopBtn');
    if (scrollTopBtn) {
      window.addEventListener('scroll', () => {
        scrollTopBtn.classList.toggle('visible', window.pageYOffset > 300);
      });
      
      scrollTopBtn.addEventListener('click', () => {
        window.scrollTo({ top: 0, behavior: 'smooth' });
      });
    }
  },
  
  // Set up save changes button
  setupSaveChangesButton() {
    const saveChangesBtn = document.getElementById('saveChangesBtn');
    if (saveChangesBtn) {
      saveChangesBtn.addEventListener('click', () => this.saveChanges());
    }
  },

  // Save changes to localStorage
  saveChanges() {
    try {
      localStorage.setItem('appData', JSON.stringify(window.appData));
      this.showToast('Changes saved successfully', 'success');
    } catch (error) {
      console.error('Error saving changes:', error);
      this.showToast('Error saving changes', 'error');
    }
  },

  // Display toast notification
  showToast(message, type = 'info') {
    // Validate inputs
    if (!message || typeof message !== 'string') {
      console.error('Invalid toast message:', message);
      return;
    }
    
    // Sanitize message to prevent XSS
    const sanitizedMessage = this.sanitizeHtml(message);
    
    // Validate type and set default if invalid
    const validTypes = ['info', 'success', 'warning', 'error'];
    if (!validTypes.includes(type)) {
      console.warn(`Invalid toast type "${type}", defaulting to "info"`);
      type = 'info';
    }
    
    // Get toast container or create it if it doesn't exist
    let toastContainer = document.getElementById('toastContainer');
    if (!toastContainer) {
      toastContainer = document.createElement('div');
      toastContainer.id = 'toastContainer';
      toastContainer.className = 'toast-container';
      document.body.appendChild(toastContainer);
    }
    
    // Create toast element with safe content
    const toast = document.createElement('div');
    toast.className = `toast toast-${type}`;
    
    // Set icon based on type
    let icon = '';
    switch (type) {
      case 'success':
        icon = '<i class="fas fa-check-circle"></i>';
        break;
      case 'warning':
        icon = '<i class="fas fa-exclamation-triangle"></i>';
        break;
      case 'error':
        icon = '<i class="fas fa-times-circle"></i>';
        break;
      default:
        icon = '<i class="fas fa-info-circle"></i>';
    }
    
    // Safely set toast content
    toast.innerHTML = `
      <div class="toast-content">
        <div class="toast-icon">${icon}</div>
        <div class="toast-message">${sanitizedMessage}</div>
        <button class="toast-close" aria-label="Close notification">×</button>
      </div>
    `;
    
    // Add close functionality
    const closeButton = toast.querySelector('.toast-close');
    if (closeButton) {
      closeButton.addEventListener('click', () => {
        toast.classList.add('toast-hiding');
        setTimeout(() => {
          if (toast.parentNode) {
            toast.parentNode.removeChild(toast);
          }
        }, 300);
      });
    }
    
    // Add to container
    toastContainer.appendChild(toast);
    
    // Auto-dismiss after delay
    const displayTime = type === 'error' ? 8000 : 4000;
    setTimeout(() => {
      if (toast.parentNode) {
        toast.classList.add('toast-hiding');
        setTimeout(() => {
          if (toast.parentNode) {
            toast.parentNode.removeChild(toast);
          }
        }, 300);
      }
    }, displayTime);
  },

  // Calculate statistics for dashboard
  calculateStats() {
    try {
      const stats = {
        bbv: { personnel: 0, teams: 0 },
        add: { personnel: 0, teams: 0 },
        arb: { personnel: 0, teams: 0 },
        shared: { personnel: 0, teams: 0 }
      };

      // Make sure window.appData and teams exist
      if (!window.appData || !window.appData.teams || !Array.isArray(window.appData.teams)) {
        console.warn('No appData or teams available for statistics');
        return stats;
      }

      // Count personnel and teams by stream
      window.appData.teams.forEach(team => {
        if (!team) return;
        
        const stream = (team.stream || 'unknown').toLowerCase();
        if (stats[stream]) {
          stats[stream].teams++;
          stats[stream].personnel += Array.isArray(team.personnel) ? team.personnel.length : 0;
        }
      });

      return stats;
    } catch (error) {
      console.error('Error calculating stats:', error);
      return {
        bbv: { personnel: 0, teams: 0 },
        add: { personnel: 0, teams: 0 },
        arb: { personnel: 0, teams: 0 },
        shared: { personnel: 0, teams: 0 }
      };
    }
  },

  // Initialize charts for dashboard
  initializeCharts() {
    try {
      // Check if Chart is loaded
      if (typeof Chart === 'undefined' || window.chartFailed) {
        console.warn('Chart.js is not loaded or initialization failed');
        this.showChartPlaceholders();
        return;
      }

      // Personnel Distribution Chart
      const personnelCtx = document.getElementById('personnelChart');
      if (personnelCtx) {
        try {
          // Get statistics for personnel distribution with safe access
          const stats = this.calculateStats() || {
            bbv: { personnel: 0 },
            add: { personnel: 0 },
            arb: { personnel: 0 },
            shared: { personnel: 0 }
          };
          
          // Create chart configuration
          const chartConfig = {
            type: 'doughnut',
            data: {
              labels: ['BBV', 'ADD', 'ARB', 'Shared'],
              datasets: [{
                data: [
                  stats.bbv.personnel || 0,
                  stats.add.personnel || 0,
                  stats.arb.personnel || 0,
                  stats.shared.personnel || 0
                ],
                backgroundColor: [
                  '#00518A', // BBV blue
                  '#CC2030', // ADD red
                  '#4F46E5', // ARB purple
                  '#232323'  // Shared black
                ]
              }]
            },
            options: {
              responsive: true,
              maintainAspectRatio: false,
              plugins: {
                legend: {
                  position: 'bottom'
                },
                tooltip: {
                  callbacks: {
                    label: function(context) {
                      const label = context.label || '';
                      const value = context.raw || 0;
                      const total = context.dataset.data.reduce((a, b) => a + b, 0);
                      const percentage = total > 0 ? Math.round((value / total) * 100) : 0;
                      return `${label}: ${value} (${percentage}%)`;
                    }
                  }
                }
              }
            }
          };
          
          // Create new chart with error handling
          try {
            new Chart(personnelCtx, chartConfig);
            console.log('Personnel chart created successfully');
          } catch (chartError) {
            console.error('Failed to create personnel chart:', chartError);
            this.showChartErrorPlaceholder(personnelCtx, 'Personnel Distribution');
          }
        } catch (error) {
          console.error('Error creating personnel chart:', error);
          this.showChartErrorPlaceholder(personnelCtx, 'Personnel Distribution');
        }
      }

      // Team Performance Chart
      const performanceCtx = document.getElementById('performanceChart');
      if (performanceCtx) {
        try {
          // Make sure we have teams data
          if (!window.appData || !window.appData.teams || window.appData.teams.length === 0) {
            this.showChartErrorPlaceholder(performanceCtx, 'Team Performance');
            return;
          }
          
          // Create chart configuration with safe access
          const chartConfig = {
            type: 'bar',
            data: {
              labels: window.appData.teams.map(team => team.name || 'Unnamed Team'),
              datasets: [{
                label: 'Performance Score',
                data: window.appData.teams.map(team => team.performance || 0),
                backgroundColor: window.appData.teams.map(team => {
                  const stream = (team.stream || 'unknown').toLowerCase();
                  return {
                    bbv: '#00518A',
                    add: '#CC2030',
                    arb: '#4F46E5',
                    shared: '#232323'
                  }[stream] || '#666666';
                })
              }]
            },
            options: {
              responsive: true,
              maintainAspectRatio: false,
              scales: {
                y: {
                  beginAtZero: true,
                  max: 100,
                  title: {
                    display: true,
                    text: 'Performance (%)'
                  }
                },
                x: {
                  title: {
                    display: true,
                    text: 'Teams'
                  }
                }
              },
              plugins: {
                legend: {
                  display: false
                }
              }
            }
          };
          
          // Create new chart with error handling
          try {
            new Chart(performanceCtx, chartConfig);
            console.log('Performance chart created successfully');
          } catch (chartError) {
            console.error('Failed to create performance chart:', chartError);
            this.showChartErrorPlaceholder(performanceCtx, 'Team Performance');
          }
        } catch (error) {
          console.error('Error creating performance chart:', error);
          this.showChartErrorPlaceholder(performanceCtx, 'Team Performance');
        }
      }
    } catch (error) {
      console.error('Error in initializeCharts:', error);
      this.showChartPlaceholders();
    }
  },
  
  // Show placeholders when charts can't be loaded
  showChartPlaceholders() {
    const chartElements = ['personnelChart', 'performanceChart'];
    chartElements.forEach(id => {
      const element = document.getElementById(id);
      if (element) {
        this.showChartErrorPlaceholder(element, id === 'personnelChart' ? 'Personnel Distribution' : 'Team Performance');
      }
    });
  },
  
  // Show a specific error placeholder for a chart
  showChartErrorPlaceholder(element, title) {
    // Save the original content in case we need to restore it
    if (!element.dataset.originalHtml) {
      element.dataset.originalHtml = element.innerHTML;
    }
    
    element.innerHTML = `
      <div class="flex flex-col items-center justify-center h-full text-center p-4">
        <div class="text-red-500 mb-2">
          <i class="fas fa-chart-bar text-3xl"></i>
        </div>
        <h3 class="font-semibold text-gray-600">${title}</h3>
        <p class="text-sm text-gray-500 mt-2">Chart could not be loaded</p>
      </div>
    `;
  },

  // Render recent activities
  renderRecentActivities() {
    try {
      if (!window.appData || !window.appData.activities || !Array.isArray(window.appData.activities)) {
        return '<p>No recent activities</p>';
      }
      
      const activities = window.appData.activities.slice(0, 5); // Show last 5 activities
      
      if (activities.length === 0) {
        return '<p>No recent activities</p>';
      }

      return activities.map(activity => {
        if (!activity) return '';
        
        const type = activity.type || 'update';
        const description = activity.description || 'Activity';
        const team = activity.team || '';
        const date = activity.date || new Date().toISOString();
        
        return `
          <div class="activity-item p-3 border-b border-gray-100 last:border-0">
            <div class="flex items-center space-x-3">
              <div class="activity-icon ${type}">
                <i class="fas ${this.getActivityIcon(type)}"></i>
              </div>
              <div>
                <p class="text-sm font-medium">${description}</p>
                <p class="text-xs text-gray-500">
                  ${team} • ${this.formatDate(date)}
                </p>
              </div>
            </div>
          </div>
        `;
      }).join('');
    } catch (error) {
      console.error('Error rendering activities:', error);
      return '<p>Error loading activities</p>';
    }
  },

  // Render upcoming tasks
  renderUpcomingTasks() {
    try {
      if (!window.appData || !window.appData.tasks || !Array.isArray(window.appData.tasks)) {
        return '<p>No upcoming tasks</p>';
      }
      
      // Sort tasks by due date and show the first 5
      const tasks = [...window.appData.tasks]
        .filter(task => task) // Filter out null tasks
        .sort((a, b) => {
          try {
            return new Date(a.dueDate || 0) - new Date(b.dueDate || 0);
          } catch (err) {
            return 0;
          }
        })
        .slice(0, 5);
      
      if (tasks.length === 0) {
        return '<p>No upcoming tasks</p>';
      }

      return tasks.map(task => {
        try {
          const progress = task.progress || 0;
          const title = task.title || 'Unnamed Task';
          const dueDate = task.dueDate || new Date().toISOString();
          const assignedTo = task.assignedTo || 'Unassigned';
          const priority = task.priority || 'Normal';
          
          return `
            <div class="task-item p-3 border-b border-gray-100 last:border-0">
              <div class="flex items-center justify-between">
                <div>
                  <p class="text-sm font-medium">${title}</p>
                  <p class="text-xs text-gray-500">
                    Due: ${this.formatDate(dueDate)} • 
                    Assigned to: ${assignedTo} • 
                    Priority: ${priority}
                  </p>
                </div>
                <div class="flex items-center space-x-2">
                  <div class="w-20 bg-gray-200 rounded-full h-2">
                    <div class="bg-blue-600 h-2 rounded-full" style="width: ${progress}%"></div>
                  </div>
                  <span class="text-xs text-gray-500">${progress}%</span>
                </div>
              </div>
            </div>
          `;
        } catch (taskError) {
          console.error('Error rendering task:', taskError);
          return '';
        }
      }).join('');
    } catch (error) {
      console.error('Error rendering tasks:', error);
      return '<p>Error loading tasks</p>';
    }
  },

  // Get activity icon based on type
  getActivityIcon(type) {
    const icons = {
      update: 'fa-edit',
      create: 'fa-plus',
      delete: 'fa-trash',
      comment: 'fa-comment',
      status: 'fa-check-circle'
    };
    return icons[type] || 'fa-info-circle';
  },

  // Format date
  formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  },

  // Show all activities modal
  showAllActivities() {
    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <div class="flex justify-between items-center mb-4">
          <h2>Activity History</h2>
          <button class="close-btn" onclick="ui.closeModal(this)">
            <i class="fas fa-times"></i>
          </button>
        </div>
        <div class="space-y-4">
          ${window.appData.history && window.appData.history.activities ? window.appData.history.activities.map(activity => `
            <div class="activity-item">
              <div class="flex items-center space-x-3">
                <div class="activity-icon ${activity.type}">
                  <i class="fas ${this.getActivityIcon(activity.type)}"></i>
                </div>
                <div>
                  <p class="text-sm font-medium">${activity.description}</p>
                  <p class="text-xs text-gray-500">${activity.user} • ${this.formatDate(activity.timestamp)}</p>
                </div>
              </div>
            </div>
          `).join('') : '<p>No activity history available</p>'}
        </div>
      </div>
    `;
    document.body.appendChild(modal);
  },

  // Show add task modal
  showAddTaskModal() {
    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <div class="flex justify-between items-center mb-4">
          <h2>Add New Task</h2>
          <button class="close-btn" onclick="ui.closeModal(this)">
            <i class="fas fa-times"></i>
          </button>
        </div>
        <form id="addTaskForm" onsubmit="ui.handleAddTask(event)">
          <div class="form-group">
            <label for="taskTitle">Title</label>
            <input type="text" id="taskTitle" required>
          </div>
          <div class="form-group">
            <label for="taskDescription">Description</label>
            <textarea id="taskDescription" required></textarea>
          </div>
          <div class="form-group">
            <label for="taskDueDate">Due Date</label>
            <input type="date" id="taskDueDate" required>
          </div>
          <div class="form-group">
            <label for="taskPriority">Priority</label>
            <select id="taskPriority" required>
              <option value="low">Low</option>
              <option value="medium">Medium</option>
              <option value="high">High</option>
            </select>
          </div>
          <div class="form-group">
            <label for="taskAssignee">Assignee</label>
            <select id="taskAssignee" required>
              ${window.appData.personnel && Array.isArray(window.appData.personnel) ? window.appData.personnel.map(person => `
                <option value="${person.id}">${person.name}</option>
              `).join('') : '<option value="">No personnel available</option>'}
            </select>
          </div>
          <button type="submit" class="btn-primary">Add Task</button>
        </form>
      </div>
    `;
    document.body.appendChild(modal);
  },

  // Handle add task form submission
  handleAddTask(event) {
    event.preventDefault();
    const form = event.target;
    const task = {
      id: window.appData.tasks.length + 1,
      title: form.querySelector('#taskTitle').value,
      description: form.querySelector('#taskDescription').value,
      dueDate: form.querySelector('#taskDueDate').value,
      priority: form.querySelector('#taskPriority').value,
      assignee: form.querySelector('#taskAssignee').value,
      progress: 0,
      status: 'pending'
    };
    window.appData.tasks.push(task);
    this.saveChanges();
    this.closeModal(form.closest('.modal'));
    this.loadDashboard();
  },

  // Close modal
  closeModal(button) {
    const modal = button.closest('.modal');
    if (modal) {
      modal.remove();
    }
  },
  
  // Hide modal - alternate method that can be called without a button reference
  hideModal() {
    const modal = document.querySelector('.modal');
    if (modal) {
      modal.remove();
    }
  },

  // Update login state
  updateLoginState() {
    const loginBtn = document.getElementById('loginBtn');
    const userInfo = document.getElementById('userInfo');
    const userName = document.getElementById('userName');
    const userRole = document.getElementById('userRole');
    const saveChangesBtn = document.getElementById('saveChangesBtn');

    // Ensure appData exists and has a state
    if (!window.appData || !window.appData.state) {
      console.warn('appData or its state is undefined in updateLoginState');
      window.appData = window.appData || {};
      window.appData.state = window.appData.state || {};
    }

    // Ensure appData.state has an isLoggedIn property
    if (typeof window.appData.state.isLoggedIn !== 'boolean') {
      console.warn('appData.state.isLoggedIn is not properly defined');
      window.appData.state = window.appData.state || {};
      window.appData.state.isLoggedIn = true;
      window.appData.state.userName = "User";
      window.appData.state.userRole = "Administrator";
    }
    
    // Always set to logged in
    window.appData.state.isLoggedIn = true;

    if (window.appData.state.isLoggedIn) {
      if (loginBtn) loginBtn.classList.add('hidden');
      if (userInfo) userInfo.classList.remove('hidden');
      if (saveChangesBtn) saveChangesBtn.classList.remove('hidden');
      
      const currentUser = window.appData.users && window.appData.users.find(user => user.id === window.appData.state.currentUser);
      if (currentUser) {
        if (userName) userName.textContent = currentUser.name;
        if (userRole) userRole.textContent = currentUser.role;
      } else {
        // Fall back to state values if user not found in users array
        if (userName) userName.textContent = window.appData.state.userName || 'User';
        if (userRole) userRole.textContent = window.appData.state.userRole || 'Guest';
      }
    } else {
      if (loginBtn) loginBtn.classList.remove('hidden');
      if (userInfo) userInfo.classList.add('hidden');
      if (saveChangesBtn) saveChangesBtn.classList.add('hidden');
    }
  },

  // Helper method to ensure images are lazy-loaded
  createLazyImage(src, altText, className = '') {
    return `<img src="${src}" alt="${altText}" class="${className}" loading="lazy">`;
  },
  
  // Render teams grid with lazy loading
  renderTeamsGrid() {
    return window.appData.teams.map(team => {
      const teamLogo = team.logo || 'https://via.placeholder.com/64x64?text=' + team.name.charAt(0);
      
      return `
        <div class="team-card bg-white rounded-lg shadow overflow-hidden transition-all hover:shadow-lg" data-team-id="${team.id}">
          <div class="p-4 flex items-center space-x-4">
            ${this.createLazyImage(teamLogo, `${team.name} logo`, 'w-16 h-16 object-cover rounded-full')}
            <div>
              <h3 class="text-lg font-semibold">
                <span class="text-${team.stream.toLowerCase()}">${team.name}</span>
              </h3>
              <p class="text-sm text-gray-500">${team.personnel.length} Members</p>
            </div>
          </div>
          <div class="px-4 pb-4">
            <div class="truncate-description">
              <p class="text-gray-700">${team.description}</p>
              <button class="text-blue-500 text-sm mt-1 show-more-btn" data-team-id="${team.id}" data-action="description">
                Show More
              </button>
            </div>
            
            <div class="mt-4 flex justify-between">
              <button class="px-3 py-1 text-sm bg-blue-500 text-white rounded hover:bg-blue-600" data-action="view" data-team-id="${team.id}">
                View Team
              </button>
              <div class="flex space-x-2">
                <button class="p-1 text-gray-500 hover:text-blue-500" data-action="edit" data-team-id="${team.id}" title="Edit Team">
                  <i class="fas fa-edit"></i>
                </button>
                <button class="p-1 text-gray-500 hover:text-red-500" data-action="delete" data-team-id="${team.id}" title="Delete Team">
                  <i class="fas fa-trash-alt"></i>
                </button>
              </div>
            </div>
          </div>
        </div>
      `;
    }).join('');
  },

  // Helper method to toggle description visibility
  toggleDescription(button, teamId) {
    const team = appData.teams.find(t => t.id === teamId);
    if (!team) return;
    
    const descriptionElement = button.previousElementSibling;
    
    if (descriptionElement.classList.contains('line-clamp-2')) {
      descriptionElement.classList.remove('line-clamp-2');
      button.textContent = 'Show less';
    } else {
      descriptionElement.classList.add('line-clamp-2');
      button.textContent = 'Read more';
    }
  },
  
  // Helper method to toggle responsibilities visibility
  toggleResponsibilities(button, teamId) {
    const team = appData.teams.find(t => t.id === teamId);
    if (!team) return;
    
    const responsibilitiesElement = button.previousElementSibling;
    
    if (responsibilitiesElement.classList.contains('line-clamp-2')) {
      responsibilitiesElement.classList.remove('line-clamp-2');
      button.textContent = 'Show less';
    } else {
      responsibilitiesElement.classList.add('line-clamp-2');
      button.textContent = 'Read more';
    }
  },
  
  // Show comprehensive team details in a modal
  showTeamDetails(teamId) {
    const team = window.appData.teams.find(t => t.id === teamId);
    if (!team) return;
    
    // Find sub-teams (teams that reference this team as parent)
    const subTeams = window.appData.teams.filter(t => t.parentTeamId === teamId);
    
    const modal = document.createElement('div');
    modal.className = 'modal modal-lg';
    modal.innerHTML = `
      <div class="modal-content">
        <div class="flex justify-between items-start mb-6">
          <div>
            <h2 class="text-2xl font-semibold text-${team.stream}">${team.name}</h2>
            <p class="text-sm text-gray-600">${team.stream.toUpperCase()} Stream</p>
          </div>
          <button class="btn-icon" onclick="ui.hideModal()">
            <i class="fas fa-times"></i>
          </button>
        </div>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
          <div>
            <h3 class="text-lg font-medium mb-3">Description</h3>
            <p class="text-gray-700">${team.description}</p>
          </div>
          
          <div>
            <h3 class="text-lg font-medium mb-3">Responsibilities</h3>
            <p class="text-gray-700">${team.responsibilities}</p>
          </div>
        </div>
        
        <div class="mb-6">
          <h3 class="text-lg font-medium mb-3">Performance</h3>
          <div class="flex items-center space-x-4">
            <div class="w-full bg-gray-200 rounded-full h-2.5">
              <div class="bg-${team.stream} h-2.5 rounded-full" style="width: ${team.performance || 0}%"></div>
            </div>
            <span class="text-lg font-semibold">${team.performance || 0}%</span>
          </div>
        </div>
        
        ${subTeams.length > 0 ? `
          <div class="mb-6">
            <div class="flex justify-between items-center mb-4">
              <h3 class="text-lg font-medium">Sub-Teams (${subTeams.length})</h3>
            </div>
            
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              ${subTeams.map(subTeam => `
                <div class="bg-white border border-gray-200 rounded-lg shadow-sm p-4 cursor-pointer" onclick="ui.showTeamDetails(${subTeam.id})">
                  <div class="flex items-center space-x-3">
                    <div class="w-8 h-8 rounded-full flex items-center justify-center text-white bg-${subTeam.stream}-600">
                      ${subTeam.name.charAt(0)}
                    </div>
                    <div>
                      <h4 class="font-medium">${subTeam.name}</h4>
                      <p class="text-xs text-gray-500">${subTeam.personnel ? subTeam.personnel.length : 0} members</p>
                    </div>
                  </div>
                </div>
              `).join('')}
            </div>
          </div>
        ` : ''}
        
        <div>
          <div class="flex justify-between items-center mb-4">
            <h3 class="text-lg font-medium">Personnel (${team.personnel.length})</h3>
            <button class="btn-primary btn-sm" onclick="ui.showAddPersonnelModal(${team.id})">
              <i class="fas fa-user-plus mr-2"></i> Add Personnel
            </button>
          </div>
          
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            ${team.personnel.map(person => `
              <div class="bg-gray-50 p-4 rounded-md hover:shadow-md transition-shadow">
                <div class="flex justify-between items-start">
                  <div>
                    <p class="font-medium">${person.name}</p>
                    <p class="text-sm text-gray-600">${person.role}</p>
                    <p class="text-sm text-gray-600 mt-1">Client: ${person.client}</p>
                  </div>
                  <div class="flex space-x-1">
                    <button class="btn-icon btn-sm" onclick="ui.editPersonnel(${person.id})">
                      <i class="fas fa-user-edit"></i>
                    </button>
                    <button class="btn-icon btn-sm" onclick="ui.removePersonnel(${person.id}, ${team.id})">
                      <i class="fas fa-user-minus"></i>
                    </button>
                  </div>
                </div>
                ${person.skills ? `
                <div class="mt-3 pt-3 border-t">
                  <p class="text-xs text-gray-500 mb-1">Skills:</p>
                  <div class="flex flex-wrap gap-1">
                    ${Object.entries(person.skills).slice(0, 3).map(([id, level]) => {
                      const skill = window.appData.skills?.find(s => s.id == id);
                      return skill ? `
                        <span class="px-2 py-0.5 text-xs rounded-full bg-${team.stream} bg-opacity-10 text-${team.stream}">
                          ${skill.name}: ${level}
                        </span>
                      ` : '';
                    }).join('')}
                    ${Object.keys(person.skills).length > 3 ? `
                      <span class="px-2 py-0.5 text-xs rounded-full bg-gray-100 text-gray-600">
                        +${Object.keys(person.skills).length - 3} more
                      </span>
                    ` : ''}
                  </div>
                </div>
                ` : ''}
              </div>
            `).join('')}
          </div>
        </div>
        
        <div class="mt-6 flex justify-end space-x-3">
          <button class="btn-secondary" onclick="ui.editTeam(${team.id})">
            <i class="fas fa-edit mr-2"></i> Edit Team
          </button>
          <button class="btn-primary" onclick="ui.showAddSubTeamModal(${team.id})">
            <i class="fas fa-plus mr-2"></i> Add Sub-Team
          </button>
        </div>
      </div>
    `;
    document.body.appendChild(modal);
    
    // Add CSS for line clamp if not already added
    if (!document.getElementById('line-clamp-css')) {
      const style = document.createElement('style');
      style.id = 'line-clamp-css';
      style.textContent = `
        .line-clamp-2 {
          display: -webkit-box;
          -webkit-line-clamp: 2;
          -webkit-box-orient: vertical;
          overflow: hidden;
        }
        .tooltip-trigger {
          position: relative;
        }
        .tooltip {
          visibility: hidden;
          position: absolute;
          top: -30px;
          left: 50%;
          transform: translateX(-50%);
          background-color: #333;
          color: white;
          padding: 4px 8px;
          border-radius: 4px;
          font-size: 12px;
          white-space: nowrap;
          opacity: 0;
          transition: opacity 0.3s;
          z-index: 10;
        }
        .tooltip-trigger:hover .tooltip {
          visibility: visible;
          opacity: 1;
        }
      `;
      document.head.appendChild(style);
    }
  },
  
  // Create a sub-team
  showAddSubTeamModal(parentTeamId) {
    const parentTeam = window.appData.teams.find(t => t.id === parentTeamId);
    if (!parentTeam) return;
    
    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <h2 class="text-xl font-semibold mb-4">Add Sub-Team to ${parentTeam.name}</h2>
        <form id="addSubTeamForm">
          <div class="form-group">
            <label for="teamName">Team Name</label>
            <input type="text" id="teamName" class="form-input" required>
          </div>
          <div class="form-group">
            <label for="teamStream">Stream</label>
            <select id="teamStream" class="form-select" required>
              <option value="${parentTeam.stream}" selected>${parentTeam.stream.toUpperCase()}</option>
              <option value="bbv">BBV</option>
              <option value="add">ADD</option>
              <option value="arb">ARB</option>
              <option value="shared">Shared</option>
            </select>
          </div>
          <div class="form-group">
            <label for="teamDescription">Description</label>
            <textarea id="teamDescription" class="form-textarea" rows="3" required></textarea>
          </div>
          <div class="form-group">
            <label for="teamResponsibilities">Responsibilities</label>
            <textarea id="teamResponsibilities" class="form-textarea" rows="3" required></textarea>
          </div>
          <div class="flex justify-end space-x-2 mt-4">
            <button type="button" class="btn-secondary" onclick="ui.hideModal()">Cancel</button>
            <button type="submit" class="btn-primary">Add Sub-Team</button>
          </div>
        </form>
      </div>
    `;
    document.body.appendChild(modal);
    
    // Handle form submission
    document.getElementById('addSubTeamForm').addEventListener('submit', e => {
      e.preventDefault();
      
      // Generate a new ID
      const newId = Date.now();
      
      // Create new team
      const newTeam = {
        id: newId,
        parentTeamId: parentTeamId,
        name: document.getElementById('teamName').value,
        stream: document.getElementById('teamStream').value,
        description: document.getElementById('teamDescription').value,
        responsibilities: document.getElementById('teamResponsibilities').value,
        performance: 0,
        personnel: []
      };
      
      // Add to teams array
      if (!window.appData.teams) window.appData.teams = [];
      window.appData.teams.push(newTeam);
      
      // Save changes
      this.saveChanges();
      
      // Hide modal
      this.hideModal();
      
      // Show success message
      this.showToast('Sub-team added successfully', 'success');
      
      // Open the new team details
      this.showTeamDetails(newId);
    });
  },
  
  loadTeams() {
    try {
      console.log('Loading teams content...');
      
      const tabContent = document.getElementById('tabContent');
      if (!tabContent) {
        console.error('Tab content element not found');
        return;
      }

      // Check if already loading to prevent duplicate loads
      if (tabContent.dataset.loading === 'true' && tabContent.dataset.currentTab === 'teams') {
        console.log('Teams already loading, skipping duplicate load request');
        return;
      }
      
      // Set loading state
      tabContent.dataset.loading = 'true';
      tabContent.dataset.currentTab = 'teams';
      
      // Clear any existing content first - important to avoid content from other tabs persisting
      tabContent.innerHTML = `
        <div class="flex justify-center items-center p-12">
          <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
          <p class="ml-4 text-gray-500">Loading teams content...</p>
        </div>
      `;

      // Use a setTimeout to allow the loading indicator to render
      setTimeout(() => {
        try {
          // Ensure appData and teams array exists - defensive coding
          if (!window.appData) window.appData = {};
          if (!window.appData.teams) window.appData.teams = [];
          
          // Check if a stream filter was set from dashboard navigation
          const activeFilter = sessionStorage.getItem('activeFilter');
          let teams = window.appData.teams;
          
          // Filter teams if an active filter is set
          if (activeFilter) {
            teams = teams.filter(team => team && team.stream === activeFilter);
            console.log(`Applying stream filter: ${activeFilter}, filtered to ${teams.length} teams`);
          }

          // Generate team cards with safe access to properties
          const teamCards = teams.length > 0 ? teams.map(team => {
            // Ensure team has all required properties
            if (!team) return '';
            
            // Ensure personnel exists
            if (!team.personnel) team.personnel = [];
            
            return `
              <div class="bg-white rounded-lg shadow-sm hover:shadow transition-all p-4 border border-gray-200 cursor-pointer team-card" data-team-id="${team.id || ''}">
                <div class="flex items-center space-x-3 mb-3">
                  <div class="w-10 h-10 rounded-full flex items-center justify-center text-white bg-${team.stream || 'gray'}-600">
                    ${team.name ? team.name.charAt(0) : '?'}
                  </div>
                  <div>
                    <h3 class="font-semibold">${team.name || 'Unnamed Team'}</h3>
                    <p class="text-xs text-gray-500">${(team.stream || 'unknown').toUpperCase()} • ${team.personnel.length} members</p>
                  </div>
                </div>
                
                <p class="text-sm text-gray-600 mb-4">${team.description || 'No description available'}</p>
                
                <div class="text-xs text-gray-500 mb-1 flex justify-between">
                  <span>Performance</span>
                  <span>${team.performance || 0}%</span>
                </div>
                
                <div class="w-full bg-gray-200 rounded-full h-2 mb-4">
                  <div class="bg-${team.stream || 'blue'}-600 h-2 rounded-full" style="width: ${team.performance || 0}%"></div>
                </div>
                
                <div class="flex justify-between">
                  <button class="text-blue-600 text-sm hover:text-blue-800 view-team-btn" data-team-id="${team.id || ''}">
                    View Details
                  </button>
                  <div>
                    <button class="text-gray-500 hover:text-blue-600 mx-2 edit-team-btn" data-team-id="${team.id || ''}">
                      <i class="fas fa-edit"></i>
                    </button>
                    <button class="text-gray-500 hover:text-red-600 delete-team-btn" data-team-id="${team.id || ''}">
                      <i class="fas fa-trash-alt"></i>
                    </button>
                  </div>
                </div>
              </div>
            `;
          }).join('') : '<p class="col-span-full text-center py-8 text-gray-500">No teams available</p>';

          // Render the final teams tab content with filter info if active
          tabContent.innerHTML = `
            <div class="p-4">
              <div class="flex justify-between items-center mb-6">
                <div>
                  <h2 class="text-2xl font-bold">Teams</h2>
                  ${activeFilter ? `
                    <div class="flex items-center mt-2">
                      <span class="text-sm text-gray-600 mr-2">Filtered by: ${activeFilter.toUpperCase()}</span>
                      <button class="text-xs text-blue-600 hover:text-blue-800 flex items-center" id="clearFilterBtn">
                        <i class="fas fa-times-circle mr-1"></i> Clear filter
                      </button>
                    </div>
                  ` : ''}
                </div>
                <button class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition flex items-center" id="addTeamButton">
                  <i class="fas fa-plus mr-2"></i> Add Team
                </button>
              </div>
              
              <!-- Team Cards -->
              <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6" id="teamsGrid">
                ${teamCards}
              </div>
            </div>
          `;
          
          // Add event listeners to team actions
          this.addTeamEventListeners();
          
          // Add event listener to clear filter button if it exists
          const clearFilterBtn = document.getElementById('clearFilterBtn');
          if (clearFilterBtn) {
            clearFilterBtn.addEventListener('click', () => {
              sessionStorage.removeItem('activeFilter');
              this.loadTeams();
            });
          }
          
          // Reset loading state
          tabContent.dataset.loading = 'false';
          
          console.log('Teams content loaded successfully');
        } catch (error) {
          console.error('Error rendering teams:', error);
          
          // Show error message
          tabContent.innerHTML = `
            <div class="p-8 text-center">
              <div class="text-red-500 text-xl mb-4">
                <i class="fas fa-exclamation-triangle mr-2"></i> 
                Error loading Teams
              </div>
              <p class="mb-4">${error.message || 'An unknown error occurred'}</p>
              <button class="px-4 py-2 bg-blue-600 text-white rounded" onclick="ui.switchTab('teams')">
                <i class="fas fa-sync-alt mr-2"></i> Try Again
              </button>
            </div>
          `;
          
          // Reset loading state
          tabContent.dataset.loading = 'false';
        }
      }, 150); // Slightly longer delay for better reliability
    } catch (error) {
      console.error('Critical error in loadTeams:', error);
      
      // Show error message
      const tabContent = document.getElementById('tabContent');
      if (tabContent) {
        tabContent.innerHTML = `
          <div class="p-8 text-center">
            <div class="text-red-500 text-xl mb-4">
              <i class="fas fa-exclamation-triangle mr-2"></i> 
              Critical Error Loading Teams
            </div>
            <p class="mb-4">${error.message || 'An unknown error occurred'}</p>
            <button class="px-4 py-2 bg-blue-600 text-white rounded" onclick="location.reload()">
              <i class="fas fa-sync-alt mr-2"></i> Refresh Page
            </button>
          </div>
        `;
        
        // Reset loading state
        tabContent.dataset.loading = 'false';
      }
    }
  },
  
  // Add a new helper method to attach event listeners to team elements
  addTeamEventListeners() {
    try {
      // Add team button
      const addTeamButton = document.getElementById('addTeamButton');
      if (addTeamButton) {
        addTeamButton.addEventListener('click', () => this.showAddTeamModal());
      }
      
      // Make entire team cards clickable
      const teamCards = document.querySelectorAll('.team-card');
      teamCards.forEach(card => {
        const teamId = parseInt(card.getAttribute('data-team-id'));
        if (!isNaN(teamId)) {
          card.addEventListener('click', (e) => {
            // Only handle click if it's directly on the card (not on a button)
            if (e.target.closest('button') === null) {
              this.showTeamDetails(teamId);
            }
          });
        }
      });
      
      // View team buttons
      const viewTeamBtns = document.querySelectorAll('.view-team-btn');
      viewTeamBtns.forEach(btn => {
        const teamIdAttr = btn.getAttribute('data-team-id');
        if (teamIdAttr) {
          const teamId = parseInt(teamIdAttr);
          if (!isNaN(teamId)) {
            btn.addEventListener('click', (e) => {
              e.stopPropagation(); // Prevent card click
              this.showTeamDetails(teamId);
            });
          }
        }
      });
      
      // Edit team buttons
      const editTeamBtns = document.querySelectorAll('.edit-team-btn');
      editTeamBtns.forEach(btn => {
        const teamIdAttr = btn.getAttribute('data-team-id');
        if (teamIdAttr) {
          const teamId = parseInt(teamIdAttr);
          if (!isNaN(teamId)) {
            btn.addEventListener('click', (e) => {
              e.stopPropagation(); // Prevent card click
              this.editTeam(teamId);
            });
          }
        }
      });
      
      // Delete team buttons
      const deleteTeamBtns = document.querySelectorAll('.delete-team-btn');
      deleteTeamBtns.forEach(btn => {
        const teamIdAttr = btn.getAttribute('data-team-id');
        if (teamIdAttr) {
          const teamId = parseInt(teamIdAttr);
          if (!isNaN(teamId)) {
            btn.addEventListener('click', (e) => {
              e.stopPropagation(); // Prevent card click
              this.deleteTeam(teamId);
            });
          }
        }
      });
    } catch (error) {
      console.error('Error setting up team event listeners:', error);
      this.showToast('Error setting up team interactions', 'error');
    }
  },
  
  // Helper functions for team statistics
  countAllPersonnel() {
    let count = 0;
    if (window.appData && window.appData.teams) {
      window.appData.teams.forEach(team => {
        if (team.personnel) count += team.personnel.length;
      });
    }
    return count;
  },
  
  calculateAverageTeamSize() {
    if (!window.appData || !window.appData.teams || window.appData.teams.length === 0) {
      return 0;
    }
    const totalPersonnel = this.countAllPersonnel();
    return Math.round(totalPersonnel / window.appData.teams.length);
  },
  
  calculateAveragePerformance() {
    if (!window.appData || !window.appData.teams || window.appData.teams.length === 0) {
      return 0;
    }
    const totalPerformance = window.appData.teams.reduce((sum, team) => sum + (team.performance || 0), 0);
    return Math.round(totalPerformance / window.appData.teams.length);
  },
  
  // Simple team rendering
  renderTeamsSimple() {
    if (!window.appData || !window.appData.teams || window.appData.teams.length === 0) {
      return '<div class="col-span-full text-center py-8 text-gray-500">No teams available</div>';
    }
    
    return window.appData.teams.map(team => `
      <div class="bg-white rounded-lg shadow-sm hover:shadow transition-all p-4 border border-gray-200">
        <div class="flex items-center space-x-3 mb-3">
          <div class="w-10 h-10 rounded-full flex items-center justify-center text-white bg-gray-600">
            ${team.name.charAt(0)}
          </div>
          <div>
            <h3 class="font-semibold">${team.name}</h3>
            <p class="text-xs text-gray-500">${team.stream.toUpperCase()} • ${team.personnel ? team.personnel.length : 0} members</p>
          </div>
        </div>
        
        <p class="text-sm text-gray-600 mb-4">${team.description}</p>
        
        <div class="text-xs text-gray-500 mb-1 flex justify-between">
          <span>Performance</span>
          <span>${team.performance || 0}%</span>
        </div>
        
        <div class="w-full bg-gray-200 rounded-full h-2 mb-4">
          <div class="bg-blue-600 h-2 rounded-full" style="width: ${team.performance || 0}%"></div>
        </div>
        
        <div class="flex justify-between">
          <button class="text-blue-600 text-sm hover:text-blue-800" onclick="ui.showTeamDetails(${team.id})">
            View Details
          </button>
          <div>
            <button class="text-gray-500 hover:text-blue-600 mx-2" onclick="ui.editTeam(${team.id})">
              <i class="fas fa-edit"></i>
            </button>
            <button class="text-gray-500 hover:text-red-600" onclick="ui.deleteTeam(${team.id})">
              <i class="fas fa-trash-alt"></i>
            </button>
          </div>
        </div>
      </div>
    `).join('');
  },
  
  // Export teams data as CSV or JSON
  exportTeamsCSV() {
    let csvContent = "data:text/csv;charset=utf-8,";
    
    // Add headers
    csvContent += "Team ID,Team Name,Stream,Personnel Count,Performance,Description,Responsibilities\n";
    
    // Add team data
    window.appData.teams.forEach(team => {
      csvContent += [
        team.id,
        `"${team.name.replace(/"/g, '""')}"`,
        team.stream,
        team.personnel.length,
        team.performance || 0,
        `"${team.description.replace(/"/g, '""')}"`,
        `"${team.responsibilities.replace(/"/g, '""')}"`
      ].join(',') + '\n';
    });
    
    // Create download link
    const encodedUri = encodeURI(csvContent);
    const link = document.createElement("a");
    link.setAttribute("href", encodedUri);
    link.setAttribute("download", "teams_data.csv");
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
    this.hideModal();
    this.showToast('Teams exported as CSV', 'success');
  },
  
  exportTeamsJSON() {
    const data = JSON.stringify(window.appData.teams, null, 2);
    const blob = new Blob([data], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    
    const link = document.createElement("a");
    link.setAttribute("href", url);
    link.setAttribute("download", "teams_data.json");
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
    
    this.hideModal();
    this.showToast('Teams exported as JSON', 'success');
  },
  
  sortTeams() {
    const sortBy = document.getElementById('sortTeams').value;
    const grid = document.getElementById('teamsGrid');
    const cards = Array.from(grid.querySelectorAll('.team-card'));
    
    cards.sort((a, b) => {
      const aId = parseInt(a.getAttribute('data-id'));
      const bId = parseInt(b.getAttribute('data-id'));
      const aTeam = window.appData.teams.find(t => t.id === aId);
      const bTeam = window.appData.teams.find(t => t.id === bId);
      
      if (!aTeam || !bTeam) return 0;
      
      switch (sortBy) {
        case 'name':
          return aTeam.name.localeCompare(bTeam.name);
        case 'size':
          return bTeam.personnel.length - aTeam.personnel.length;
        case 'performance':
          return (bTeam.performance || 0) - (aTeam.performance || 0);
        default:
          return 0;
      }
    });
    
    // Re-append cards in the sorted order
    cards.forEach(card => grid.appendChild(card));
  },

  showAddTeamModal() {
    try {
      const modal = document.createElement('div');
      modal.className = 'modal';
      modal.innerHTML = `
        <div class="modal-content">
          <h2 class="text-xl font-semibold mb-4">Add New Team</h2>
          <form id="addTeamForm">
            <div class="form-group">
              <label for="teamName">Team Name</label>
              <input type="text" id="teamName" required>
            </div>
            <div class="form-group">
              <label for="teamStream">Stream</label>
              <select id="teamStream" required>
                <option value="bbv">BBV</option>
                <option value="add">ADD</option>
                <option value="arb">ARB</option>
                <option value="shared">Shared</option>
              </select>
            </div>
            <div class="form-group">
              <label for="teamDescription">Description</label>
              <textarea id="teamDescription" rows="3" required></textarea>
            </div>
            <div class="form-group">
              <label for="teamResponsibilities">Responsibilities</label>
              <textarea id="teamResponsibilities" rows="3" required></textarea>
            </div>
            <div class="flex justify-end space-x-2 mt-4">
              <button type="button" class="btn-secondary" onclick="ui.hideModal()">Cancel</button>
              <button type="submit" class="btn-primary">Add Team</button>
            </div>
          </form>
        </div>
      `;
      document.body.appendChild(modal);

      const form = modal.querySelector('#addTeamForm');
      if (form) {
        form.addEventListener('submit', (e) => {
          e.preventDefault();
          try {
            // Ensure appData and teams exist
            if (!window.appData) window.appData = {};
            if (!window.appData.teams) window.appData.teams = [];
            
            const team = {
              id: Date.now(),
              name: form.querySelector('#teamName').value.trim(),
              stream: form.querySelector('#teamStream').value,
              description: form.querySelector('#teamDescription').value.trim(),
              responsibilities: form.querySelector('#teamResponsibilities').value.trim(),
              performance: 0,
              personnel: []
            };
            
            window.appData.teams.push(team);
            
            this.saveChanges();
            this.hideModal();
            this.showToast('Team added successfully', 'success');
            this.loadTeams();
          } catch (formError) {
            console.error('Error adding team:', formError);
            this.showToast('Error adding team: ' + (formError.message || 'Unknown error'), 'error');
          }
        });
      }
    } catch (error) {
      console.error('Error showing add team modal:', error);
      this.showToast('Could not open add team form', 'error');
    }
  },

  editTeam(teamId) {
    const team = window.appData.teams.find(t => t.id === teamId);
    if (!team) return;

    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <h2 class="text-xl font-semibold mb-4">Edit Team</h2>
        <form id="editTeamForm">
          <div class="form-group">
            <label for="teamName">Team Name</label>
            <input type="text" id="teamName" value="${team.name}" required>
          </div>
          <div class="form-group">
            <label for="teamStream">Stream</label>
            <select id="teamStream" required>
              <option value="bbv" ${team.stream === 'bbv' ? 'selected' : ''}>BBV</option>
              <option value="add" ${team.stream === 'add' ? 'selected' : ''}>ADD</option>
              <option value="arb" ${team.stream === 'arb' ? 'selected' : ''}>ARB</option>
              <option value="shared" ${team.stream === 'shared' ? 'selected' : ''}>Shared</option>
            </select>
          </div>
          <div class="form-group">
            <label for="teamDescription">Description</label>
            <textarea id="teamDescription" rows="3" required>${team.description}</textarea>
          </div>
          <div class="form-group">
            <label for="teamResponsibilities">Responsibilities</label>
            <textarea id="teamResponsibilities" rows="3" required>${team.responsibilities}</textarea>
          </div>
          <div class="form-group">
            <label for="teamPerformance">Performance Score</label>
            <input type="number" id="teamPerformance" min="0" max="100" value="${team.performance}" required>
          </div>
          <div class="flex justify-end space-x-2 mt-4">
            <button type="button" class="btn-secondary" onclick="ui.hideModal()">Cancel</button>
            <button type="submit" class="btn-primary">Save Changes</button>
          </div>
        </form>
      </div>
    `;
    document.body.appendChild(modal);

    const form = modal.querySelector('#editTeamForm');
    form.addEventListener('submit', (e) => {
      e.preventDefault();
      team.name = form.querySelector('#teamName').value;
      team.stream = form.querySelector('#teamStream').value;
      team.description = form.querySelector('#teamDescription').value;
      team.responsibilities = form.querySelector('#teamResponsibilities').value;
      team.performance = parseInt(form.querySelector('#teamPerformance').value);
      
      this.saveChanges();
      this.hideModal();
      this.showToast('Team updated successfully', 'success');
      this.loadTeams();
    });
  },

  deleteTeam(teamId) {
    if (confirm('Are you sure you want to delete this team? This action cannot be undone.')) {
      window.appData.teams = window.appData.teams.filter(t => t.id !== teamId);
      this.saveChanges();
      this.showToast('Team deleted successfully', 'success');
      this.loadTeams();
    }
  },

  showAddPersonnelModal(teamId) {
    const team = window.appData.teams.find(t => t.id === teamId);
    if (!team) return;

    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <h2 class="text-xl font-semibold mb-4">Add Personnel to ${team.name}</h2>
        <form id="addPersonnelForm">
          <div class="form-group">
            <label for="personnelName">Name</label>
            <input type="text" id="personnelName" required>
          </div>
          <div class="form-group">
            <label for="personnelRole">Role</label>
            <input type="text" id="personnelRole" required>
          </div>
          <div class="form-group">
            <label for="personnelClient">Client</label>
            <input type="text" id="personnelClient" required>
          </div>
          <div class="flex justify-end space-x-2 mt-4">
            <button type="button" class="btn-secondary" onclick="ui.hideModal()">Cancel</button>
            <button type="submit" class="btn-primary">Add Personnel</button>
          </div>
        </form>
      </div>
    `;
    document.body.appendChild(modal);

    const form = modal.querySelector('#addPersonnelForm');
    form.addEventListener('submit', (e) => {
      e.preventDefault();
      const personnel = {
        id: Date.now(),
        name: form.querySelector('#personnelName').value,
        role: form.querySelector('#personnelRole').value,
        client: form.querySelector('#personnelClient').value
      };
      
      team.personnel.push(personnel);
      this.saveChanges();
      this.hideModal();
      this.showToast('Personnel added successfully', 'success');
      this.loadTeams();
    });
  },

  editPersonnel(personnelId) {
    const team = window.appData.teams.find(t => t.personnel.some(p => p.id === personnelId));
    const personnel = team?.personnel.find(p => p.id === personnelId);
    if (!personnel) return;

    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <h2 class="text-xl font-semibold mb-4">Edit Personnel</h2>
        <form id="editPersonnelForm">
          <div class="form-group">
            <label for="personnelName">Name</label>
            <input type="text" id="personnelName" value="${personnel.name}" required>
          </div>
          <div class="form-group">
            <label for="personnelRole">Role</label>
            <input type="text" id="personnelRole" value="${personnel.role}" required>
          </div>
          <div class="form-group">
            <label for="personnelClient">Client</label>
            <input type="text" id="personnelClient" value="${personnel.client}" required>
          </div>
          <div class="flex justify-end space-x-2 mt-4">
            <button type="button" class="btn-secondary" onclick="ui.hideModal()">Cancel</button>
            <button type="submit" class="btn-primary">Save Changes</button>
          </div>
        </form>
      </div>
    `;
    document.body.appendChild(modal);

    const form = modal.querySelector('#editPersonnelForm');
    form.addEventListener('submit', (e) => {
      e.preventDefault();
      personnel.name = form.querySelector('#personnelName').value;
      personnel.role = form.querySelector('#personnelRole').value;
      personnel.client = form.querySelector('#personnelClient').value;
      
      this.saveChanges();
      this.hideModal();
      this.showToast('Personnel updated successfully', 'success');
      this.loadTeams();
    });
  },

  removePersonnel(personnelId, teamId) {
    const team = window.appData.teams.find(t => t.id === teamId);
    if (!team) return;

    if (confirm('Are you sure you want to remove this personnel? This action cannot be undone.')) {
      team.personnel = team.personnel.filter(p => p.id !== personnelId);
      this.saveChanges();
      this.showToast('Personnel removed successfully', 'success');
      this.loadTeams();
    }
  },

  loadOrgChart() {
    try {
      const tabContent = document.getElementById('tabContent');
      if (!tabContent) {
        console.error('Tab content element not found');
        return;
      }
      
      // Check if already loading
      if (tabContent.dataset.loading === 'true') {
        console.log('Organization chart already loading, skipping duplicate load');
        return;
      }
      
      // Set loading state
      tabContent.dataset.loading = 'true';
      
      tabContent.innerHTML = `
        <div class="p-4 space-y-6">
          <div class="flex flex-wrap items-center justify-between gap-4">
            <div>
              <h2 class="text-2xl font-semibold">Organization Chart</h2>
              <p class="text-gray-600 mt-1">Interactive visualization of the quality organization structure</p>
            </div>
            <div class="flex gap-2">
              <div class="relative">
                <select id="clientFilter" class="form-select text-sm pr-8 py-2 pl-3 border rounded-lg">
                  <option value="all">All Clients</option>
                  ${this.getUniqueClients().map(client => 
                    `<option value="${client}">${client}</option>`).join('')}
                </select>
              </div>
              <div class="relative">
                <select id="streamFilter" class="form-select text-sm pr-8 py-2 pl-3 border rounded-lg">
                  <option value="all">All Streams</option>
                  <option value="bbv">BBV</option>
                  <option value="add">ADD</option>
                  <option value="arb">ARB</option>
                  <option value="shared">Shared</option>
                </select>
              </div>
              <button id="exportOrgChartBtn" class="btn btn-secondary text-sm py-2 px-3 rounded-lg border bg-white hover:bg-gray-50">
                <i class="fas fa-download mr-1"></i> Export
              </button>
              <div class="dropdown relative inline-block">
                <button id="layoutOptionsBtn" class="btn btn-secondary text-sm py-2 px-3 rounded-lg border bg-white hover:bg-gray-50">
                  <i class="fas fa-sitemap mr-1"></i> Layout <i class="fas fa-caret-down ml-1"></i>
                </button>
                <div id="layoutDropdown" class="dropdown-content hidden absolute right-0 mt-2 bg-white border rounded-lg shadow-lg z-10 w-48">
                  <div class="p-2">
                    <button id="verticalLayout" class="block w-full text-left p-2 hover:bg-gray-100 rounded">
                      <i class="fas fa-arrows-alt-v mr-2"></i> Vertical
                    </button>
                    <button id="horizontalLayout" class="block w-full text-left p-2 hover:bg-gray-100 rounded">
                      <i class="fas fa-arrows-alt-h mr-2"></i> Horizontal
                    </button>
                    <button id="compactLayout" class="block w-full text-left p-2 hover:bg-gray-100 rounded">
                      <i class="fas fa-compress-arrows-alt mr-2"></i> Compact
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <div class="flex flex-wrap gap-4 mb-2">
            <div class="p-2 bg-white rounded-lg shadow-sm flex items-center">
              <div class="mr-2 text-sm font-medium">Zoom:</div>
              <button id="zoomOut" class="p-1 rounded hover:bg-gray-100"><i class="fas fa-minus"></i></button>
              <div id="zoomLevel" class="px-2 text-sm">100%</div>
              <button id="zoomIn" class="p-1 rounded hover:bg-gray-100"><i class="fas fa-plus"></i></button>
              <button id="zoomReset" class="ml-2 p-1 px-2 text-xs bg-gray-100 rounded hover:bg-gray-200">Reset</button>
            </div>
            
            <div class="p-2 bg-white rounded-lg shadow-sm flex items-center">
              <div class="mr-2 text-sm font-medium">Show:</div>
              <label class="inline-flex items-center cursor-pointer mr-3">
                <input type="checkbox" id="showNames" class="form-checkbox" checked>
                <span class="ml-1 text-sm">Names</span>
              </label>
              <label class="inline-flex items-center cursor-pointer mr-3">
                <input type="checkbox" id="showRoles" class="form-checkbox" checked>
                <span class="ml-1 text-sm">Roles</span>
              </label>
              <label class="inline-flex items-center cursor-pointer">
                <input type="checkbox" id="showClients" class="form-checkbox" checked>
                <span class="ml-1 text-sm">Clients</span>
              </label>
            </div>
            
            <div class="flex-grow"></div>
            
            <div class="p-2 bg-white rounded-lg shadow-sm flex items-center">
              <input type="text" id="searchOrgChart" placeholder="Search..." 
                class="border rounded px-3 py-1 text-sm focus:outline-none focus:ring-2 focus:ring-blue-300">
            </div>
          </div>
          
          <div class="bg-white p-4 rounded-lg shadow-md border border-gray-200">
            <div id="orgChartContainer" class="w-full" style="height: 700px; overflow: auto;">
              <div id="orgChart" class="w-full h-full"></div>
            </div>
          </div>
          
          <div id="nodeDetails" class="hidden bg-white p-4 rounded-lg shadow-md border border-gray-200 mt-4">
            <div class="flex justify-between items-start">
              <h3 class="text-lg font-semibold" id="detailsTitle">Node Details</h3>
              <button id="closeDetails" class="text-gray-400 hover:text-gray-600">
                <i class="fas fa-times"></i>
              </button>
            </div>
            <div id="detailsContent" class="mt-3"></div>
          </div>
        </div>
      `;
      
      // Set up event listeners for controls
      this.setupOrgChartControls();
      
      // Initialize the org chart
      this.initializeOrgChart();
      
      // Reset loading state
      tabContent.dataset.loading = 'false';
    } catch (error) {
      console.error('Error loading organization chart:', error);
      
      const tabContent = document.getElementById('tabContent');
      if (tabContent) {
        tabContent.innerHTML = `
          <div class="p-8 text-center">
            <div class="text-red-500 text-xl mb-4">
              <i class="fas fa-exclamation-triangle mr-2"></i> 
              Error Loading Organization Chart
            </div>
            <p class="mb-4">${error.message || 'An unknown error occurred'}</p>
            <button class="px-4 py-2 bg-blue-600 text-white rounded" onclick="ui.switchTab('orgchart')">
              <i class="fas fa-sync-alt mr-2"></i> Try Again
            </button>
          </div>
        `;
        
        // Reset loading state
        tabContent.dataset.loading = 'false';
      }
    }
  },

  // Set up org chart controls
  setupOrgChartControls() {
    console.log('Setting up org chart controls');
    
    // Client filter
    const clientFilter = document.getElementById('clientFilter');
    const streamFilter = document.getElementById('streamFilter');
    
    if (clientFilter && streamFilter) {
      // Get unique clients
      const clients = this.getUniqueClients();
      
      // Populate client filter
      clientFilter.innerHTML = `
        <option value="all">All Clients</option>
        ${clients.map(client => `<option value="${client}">${client}</option>`).join('')}
      `;
      
      // Add enhanced detail filter
      const detailLevel = document.getElementById('detailLevelFilter') || document.createElement('select');
      if (!document.getElementById('detailLevelFilter')) {
        detailLevel.id = 'detailLevelFilter';
        detailLevel.className = 'form-select px-3 py-2 border rounded-md text-sm';
        detailLevel.innerHTML = `
          <option value="high">High Detail</option>
          <option value="medium" selected>Medium Detail</option>
          <option value="low">Low Detail</option>
        `;
        
        // Add after stream filter
        streamFilter.parentNode.appendChild(detailLevel);
        
        // Add label
        const label = document.createElement('label');
        label.htmlFor = 'detailLevelFilter';
        label.className = 'block text-sm font-medium text-gray-700 mr-2';
        label.innerText = 'Detail Level:';
        streamFilter.parentNode.insertBefore(label, detailLevel);
      }
      
      // Event listeners - use a combined update function for efficiency
      const updateChart = () => {
        const clientValue = clientFilter.value;
        const streamValue = streamFilter.value;
        const detailValue = detailLevel.value;
        
        // Update the org chart with new filters
        this.prepareOrgChartData(clientValue, streamValue, detailValue);
      };
      
      clientFilter.addEventListener('change', updateChart);
      streamFilter.addEventListener('change', updateChart);
      detailLevel.addEventListener('change', updateChart);
      
      // Enhanced export options
      const exportContainer = document.querySelector('.export-options') || document.createElement('div');
      if (!document.querySelector('.export-options')) {
        exportContainer.className = 'export-options mt-4 flex flex-wrap gap-2';
        exportContainer.innerHTML = `
          <button id="exportOrgChartSvg" class="btn btn-sm btn-outline">
            <i class="fas fa-file-code mr-1"></i> Export SVG
          </button>
          <button id="exportOrgChartPng" class="btn btn-sm btn-outline">
            <i class="fas fa-file-image mr-1"></i> Export PNG
          </button>
          <button id="exportOrgChartPdf" class="btn btn-sm btn-outline">
            <i class="fas fa-file-pdf mr-1"></i> Export PDF
          </button>
          <button id="exportOrgChartData" class="btn btn-sm btn-outline">
            <i class="fas fa-file-csv mr-1"></i> Export Data
          </button>
        `;
        
        // Add export container to the chart controls
        const controlsContainer = document.querySelector('.org-chart-controls') || streamFilter.parentNode.parentNode;
        controlsContainer.appendChild(exportContainer);
        
        // Add event listeners for new export buttons
        document.getElementById('exportOrgChartSvg').addEventListener('click', () => this.exportOrgChartSvg());
        document.getElementById('exportOrgChartPng').addEventListener('click', () => this.exportOrgChartPng());
        document.getElementById('exportOrgChartPdf').addEventListener('click', () => this.exportOrgChartPdf());
        document.getElementById('exportOrgChartData').addEventListener('click', () => this.exportOrgChartData());
      }
    }
  },
  
  // Get unique client names from personnel
  getUniqueClients() {
    const clients = new Set();
    
    if (window.appData && window.appData.teams) {
      window.appData.teams.forEach(team => {
        if (team && team.personnel) {
          team.personnel.forEach(person => {
            if (person && person.client) {
              clients.add(person.client);
            }
          });
        }
      });
    }
    
    return Array.from(clients).sort();
  },

  // Initialize the d3.js org chart visualization
  initializeOrgChart() {
    // Check if d3 is loaded
    if (typeof d3 === 'undefined') {
      console.error('D3.js library not loaded. Cannot initialize org chart.');
      const orgChart = document.getElementById('orgChart');
      if (orgChart) {
        orgChart.innerHTML = `
          <div class="flex flex-col items-center justify-center h-full p-8 text-center">
            <i class="fas fa-exclamation-circle text-red-500 text-3xl mb-4"></i>
            <h3 class="font-bold">Cannot load organization chart</h3>
            <p class="text-gray-500 mt-2">Required libraries are not available.</p>
          </div>
        `;
      }
      return;
    }
    
    // Parse filter values
    const clientFilter = document.getElementById('clientFilter')?.value || 'all';
    const streamFilter = document.getElementById('streamFilter')?.value || 'all';
    
    // Display options
    const showNames = document.getElementById('showNames')?.checked ?? true;
    const showRoles = document.getElementById('showRoles')?.checked ?? true;
    const showClients = document.getElementById('showClients')?.checked ?? true;
    
    // Cache current layout
    this.currentOrgChartLayout = this.currentOrgChartLayout || 'vertical';
    
    // Clear any existing SVG
    const orgChart = document.getElementById('orgChart');
    if (!orgChart) return;
    
    d3.select("#orgChart").selectAll("*").remove();

    // Prepare the data
    const data = this.prepareOrgChartData(clientFilter, streamFilter);
    if (!data || !data.children || data.children.length === 0) {
      orgChart.innerHTML = `
        <div class="flex flex-col items-center justify-center h-full p-8 text-center">
          <i class="fas fa-users text-gray-400 text-3xl mb-4"></i>
          <h3 class="font-bold">No organization data</h3>
          <p class="text-gray-500 mt-2">Add teams and personnel to see the organization chart.</p>
        </div>
      `;
      return;
    }

    // Set up the SVG
    const width = orgChart.clientWidth;
    const height = orgChart.clientHeight || 600;
    
    const svg = d3.select("#orgChart")
      .append("svg")
      .attr("width", "100%")
      .attr("height", "100%")
      .attr("viewBox", `0 0 ${width} ${height}`)
      .attr("preserveAspectRatio", "xMidYMid meet");

    // Create a group for zooming and panning
    const g = svg.append("g");
    
    // Create the chart layout based on current orientation
    let treeLayout;
    
    if (this.currentOrgChartLayout === 'horizontal') {
      treeLayout = d3.tree()
        .size([height - 100, width - 200]);
    } else if (this.currentOrgChartLayout === 'compact') {
      treeLayout = d3.cluster()
        .size([2 * Math.PI, Math.min(width, height) / 2 - 120]);
    } else {
      // Default to vertical layout
      treeLayout = d3.tree()
        .size([width - 100, height - 200]);
    }

    // Create the root node
    const root = d3.hierarchy(data);
    
    // Generate the tree layout
    let treeData;
    
    if (this.currentOrgChartLayout === 'compact') {
      // For radial layout
      treeData = treeLayout(root);
      
      // Position nodes in a circle
      g.attr("transform", `translate(${width / 2},${height / 2})`);
      
      // Add links
      g.selectAll(".link")
        .data(treeData.links())
        .enter()
        .append("path")
        .attr("class", "link")
        .attr("d", d3.linkRadial()
          .angle(d => d.x)
          .radius(d => d.y))
        .style("fill", "none")
        .style("stroke", "#ccc")
        .style("stroke-width", "1.5px");
      
      // Add nodes
      const node = g.selectAll(".node")
        .data(treeData.descendants())
        .enter()
        .append("g")
        .attr("class", "node")
        .attr("transform", d => `translate(${d.y * Math.sin(d.x)},${-d.y * Math.cos(d.x)})`)
        .on("click", (event, d) => this.showNodeDetails(d.data));
      
      // Add node circles
      node.append("circle")
        .attr("r", d => d.data.type === 'team' ? 15 : 10)
        .style("fill", d => {
          const stream = d.data.stream || 'default';
          return window.config?.colors?.[stream] || '#ccc';
        })
        .style("stroke", "#fff")
        .style("stroke-width", "2px");
      
      // Add node labels
      if (showNames) {
        node.append("text")
          .attr("dy", d => d.data.type === 'team' ? -20 : -15)
          .attr("text-anchor", "middle")
          .attr("font-size", d => d.data.type === 'team' ? "12px" : "10px")
          .attr("font-weight", d => d.data.type === 'team' ? "bold" : "normal")
          .text(d => d.data.name)
          .style("fill", "#333");
      }
      
      // Add role labels
      if (showRoles && showNames) {
        node.append("text")
          .attr("dy", -5)
          .attr("text-anchor", "middle")
          .attr("font-size", "9px")
          .text(d => d.data.role || "")
          .style("fill", "#666");
      }
      
      // Add client labels
      if (showClients && showNames) {
        node.append("text")
          .attr("dy", 20)
          .attr("text-anchor", "middle")
          .attr("font-size", "8px")
          .attr("font-style", "italic")
          .text(d => d.data.client || "")
          .style("fill", "#999");
      }
      
    } else if (this.currentOrgChartLayout === 'horizontal') {
      // For horizontal layout
      treeData = treeLayout(root);
      
      // Add links
      g.selectAll(".link")
        .data(treeData.links())
        .enter()
        .append("path")
        .attr("class", "link")
        .attr("d", d3.linkHorizontal()
          .x(d => d.y)
          .y(d => d.x))
        .style("fill", "none")
        .style("stroke", "#ccc")
        .style("stroke-width", "1.5px");

      // Add nodes
      const node = g.selectAll(".node")
        .data(treeData.descendants())
        .enter()
        .append("g")
        .attr("class", "node")
        .attr("transform", d => `translate(${d.y},${d.x})`)
        .on("click", (event, d) => this.showNodeDetails(d.data));
      
      // Add node circles
      node.append("circle")
        .attr("r", d => d.data.type === 'team' ? 15 : 10)
        .style("fill", d => {
          const stream = d.data.stream || 'default';
          return window.config?.colors?.[stream] || '#ccc';
        })
        .style("stroke", "#fff")
        .style("stroke-width", "2px");
      
      // Add node labels
      if (showNames) {
        node.append("text")
          .attr("dx", d => d.children ? -8 : 8)
          .attr("dy", 4)
          .attr("text-anchor", d => d.children ? "end" : "start")
          .attr("font-size", d => d.data.type === 'team' ? "12px" : "10px")
          .attr("font-weight", d => d.data.type === 'team' ? "bold" : "normal")
          .text(d => d.data.name)
          .style("fill", "#333");
      }
      
      // Add role labels
      if (showRoles) {
        node.append("text")
          .attr("dx", d => d.children ? -8 : 8)
          .attr("dy", 18)
          .attr("text-anchor", d => d.children ? "end" : "start")
          .attr("font-size", "9px")
          .text(d => d.data.role || "")
          .style("fill", "#666");
      }
      
      // Add client labels
      if (showClients) {
        node.append("text")
          .attr("dx", d => d.children ? -8 : 8)
          .attr("dy", 30)
          .attr("text-anchor", d => d.children ? "end" : "start")
          .attr("font-size", "8px")
          .attr("font-style", "italic")
          .text(d => d.data.client || "")
          .style("fill", "#999");
      }
      
    } else {
      // For vertical layout (default)
      treeData = treeLayout(root);
      
      // Add links
      g.selectAll(".link")
        .data(treeData.links())
        .enter()
        .append("path")
        .attr("class", "link")
        .attr("d", d3.linkVertical()
          .x(d => d.x)
          .y(d => d.y))
        .style("fill", "none")
        .style("stroke", "#ccc")
        .style("stroke-width", "1.5px");

      // Add nodes
      const node = g.selectAll(".node")
        .data(treeData.descendants())
        .enter()
        .append("g")
        .attr("class", "node")
        .attr("transform", d => `translate(${d.x},${d.y})`)
        .on("click", (event, d) => this.showNodeDetails(d.data));
        
      // Add node rectangles with rounded corners for teams
      node.filter(d => d.data.type === 'team')
        .append("rect")
        .attr("x", -50)
        .attr("y", -20)
        .attr("width", 100)
        .attr("height", 40)
        .attr("rx", 5)
        .attr("ry", 5)
        .style("fill", d => {
          const stream = d.data.stream || 'default';
          return window.config?.colors?.[stream] || '#ccc';
        })
        .style("stroke", "#fff")
        .style("stroke-width", "2px");
        
      // Add node circles for personnel
      node.filter(d => d.data.type !== 'team')
        .append("circle")
        .attr("r", 10)
        .style("fill", d => {
          const stream = d.data.stream || 'default';
          return window.config?.colors?.[stream] || '#ccc';
        })
        .style("stroke", "#fff")
        .style("stroke-width", "2px");
      
      // Add node labels
      if (showNames) {
        // Team labels
        node.filter(d => d.data.type === 'team')
          .append("text")
          .attr("text-anchor", "middle")
          .attr("dominant-baseline", "central")
          .attr("font-size", "11px")
          .attr("font-weight", "bold")
          .attr("fill", "white")
          .text(d => {
            const name = d.data.name || "";
            return name.length > 15 ? name.substring(0, 12) + "..." : name;
          });
          
        // Personnel labels
        node.filter(d => d.data.type !== 'team')
          .append("text")
          .attr("dy", -15)
          .attr("text-anchor", "middle")
          .attr("font-size", "10px")
          .text(d => d.data.name)
          .style("fill", "#333");
      }
      
      // Add role labels for personnel
      if (showRoles) {
        node.filter(d => d.data.type !== 'team')
          .append("text")
          .attr("dy", 20)
          .attr("text-anchor", "middle")
          .attr("font-size", "8px")
          .text(d => d.data.role || "")
          .style("fill", "#666");
      }
      
      // Add client labels for personnel
      if (showClients) {
        node.filter(d => d.data.type !== 'team' && d.data.client)
          .append("text")
          .attr("dy", 32)
          .attr("text-anchor", "middle")
          .attr("font-size", "8px")
          .attr("font-style", "italic")
          .text(d => d.data.client || "")
          .style("fill", "#999");
      }
    }

    // Add zoom behavior
    const zoom = d3.zoom()
      .scaleExtent([0.1, 3])
      .on("zoom", (event) => {
        g.attr("transform", event.transform);
        // Update zoom level display
        document.getElementById('zoomLevel').textContent = `${Math.round(event.transform.k * 100)}%`;
      });

    svg.call(zoom);

    // Center the visualization initially
    const svgNode = svg.node();
    if (svgNode) {
      const bounds = g.node().getBBox();
      const transX = width / 2 - (bounds.x + bounds.width / 2);
      const transY = 40; // Add top margin
      
      svg.call(zoom.transform, d3.zoomIdentity
        .translate(transX, transY)
        .scale(0.8));
      
      // Update zoom level display
      document.getElementById('zoomLevel').textContent = '80%';
    }
    
    // Store references for later use
    this.orgChartSvg = svg;
    this.orgChartZoom = zoom;
  },

  // Prepare hierarchical data for org chart
  prepareOrgChartData(clientFilter = 'all', streamFilter = 'all') {
    // Check if we have teams data
    if (!window.appData || !window.appData.teams || !Array.isArray(window.appData.teams) || window.appData.teams.length === 0) {
      return null;
    }
    
    // Filter teams by stream if specified
    let filteredTeams = window.appData.teams;
    if (streamFilter !== 'all') {
      filteredTeams = filteredTeams.filter(team => team && team.stream === streamFilter);
    }
    
    // Create the organizational structure
    const root = {
      name: "Quality Organization",
      stream: "root",
      type: "organization",
      children: []
    };
    
    // Group teams by stream
    const streamGroups = {};
    
    filteredTeams.forEach(team => {
      if (!team) return;
      
      const stream = team.stream || "unknown";
      
      if (!streamGroups[stream]) {
        streamGroups[stream] = {
          name: stream.toUpperCase() + " Stream",
          stream: stream,
          type: "stream",
          children: []
        };
        root.children.push(streamGroups[stream]);
      }
      
      // Create team node
      const teamNode = {
        id: team.id,
        name: team.name || "Unnamed Team",
        stream: stream,
        type: "team",
        description: team.description,
        responsibilities: team.responsibilities,
        performance: team.performance,
        children: []
      };
      
      // Add personnel nodes filtered by client if needed
      if (Array.isArray(team.personnel)) {
        team.personnel.forEach(person => {
          if (!person) return;
          
          // Apply client filter
          if (clientFilter !== 'all' && person.client !== clientFilter) {
            return;
          }
          
          teamNode.children.push({
            id: person.id,
            name: person.name || "Unnamed",
            stream: stream,
            type: "person",
            role: person.role,
            client: person.client,
            skills: person.skills
          });
        });
      }
      
      // Only add team if it has personnel after filtering
      if (clientFilter === 'all' || teamNode.children.length > 0) {
        streamGroups[stream].children.push(teamNode);
      }
    });
    
    // Remove empty streams
    root.children = root.children.filter(stream => stream.children.length > 0);
    
    return root;
  },

  // Change org chart layout
  changeOrgChartLayout(layout) {
    if (layout !== this.currentOrgChartLayout) {
      this.currentOrgChartLayout = layout;
      this.updateOrgChart();
    }
  },

  // Update the org chart
  updateOrgChart() {
    this.initializeOrgChart();
  },

  // Zoom org chart
  zoomOrgChart(factor) {
    if (!this.orgChartSvg || !this.orgChartZoom) return;
    
    const currentTransform = d3.zoomTransform(this.orgChartSvg.node());
    const newScale = currentTransform.k * factor;
    
    this.orgChartSvg.transition()
      .duration(300)
      .call(this.orgChartZoom.transform, d3.zoomIdentity
        .translate(currentTransform.x, currentTransform.y)
        .scale(newScale));
    
    // Update zoom level display
    document.getElementById('zoomLevel').textContent = `${Math.round(newScale * 100)}%`;
  },

  // Reset org chart zoom
  resetOrgChartZoom() {
    if (!this.orgChartSvg || !this.orgChartZoom) return;
    
    const width = document.getElementById('orgChart').clientWidth;
    const g = this.orgChartSvg.select("g");
    const bounds = g.node().getBBox();
    const transX = width / 2 - (bounds.x + bounds.width / 2);
    const transY = 40; // Add top margin
    
    this.orgChartSvg.transition()
      .duration(500)
      .call(this.orgChartZoom.transform, d3.zoomIdentity
        .translate(transX, transY)
        .scale(0.8));
    
    // Update zoom level display
    document.getElementById('zoomLevel').textContent = '80%';
  },

  // Search in org chart
  searchOrgChart(searchTerm) {
    if (!searchTerm) {
      // Reset all nodes to normal opacity
      d3.selectAll(".node")
        .style("opacity", 1)
        .select("circle, rect")
        .style("stroke", "#fff");
      return;
    }
    
    searchTerm = searchTerm.toLowerCase();
    
    d3.selectAll(".node").each(function(d) {
      // Check if node data matches search term
      const node = d3.select(this);
      const data = d.data;
      
      const nameMatch = (data.name || "").toLowerCase().includes(searchTerm);
      const roleMatch = (data.role || "").toLowerCase().includes(searchTerm);
      const clientMatch = (data.client || "").toLowerCase().includes(searchTerm);
      
      const matches = nameMatch || roleMatch || clientMatch;
      
      // Highlight matching nodes
      node.style("opacity", matches ? 1 : 0.2);
      node.select("circle, rect")
        .style("stroke", matches ? "#ff6b6b" : "#fff")
        .style("stroke-width", matches ? 3 : 2);
    });
  },

  // Export org chart as SVG
  exportOrgChart() {
    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <h2 class="text-xl font-semibold mb-4">Export Organization Chart</h2>
        <div class="space-y-4">
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <button class="btn-secondary p-6 text-center flex flex-col items-center justify-center" id="exportSvgBtn">
              <i class="fas fa-file-image text-3xl mb-2"></i>
              <span class="text-lg font-medium">SVG Format</span>
              <span class="text-sm text-gray-500">Vector graphic for high-quality prints</span>
            </button>
            <button class="btn-secondary p-6 text-center flex flex-col items-center justify-center" id="exportPngBtn">
              <i class="fas fa-image text-3xl mb-2"></i>
              <span class="text-lg font-medium">PNG Format</span>
              <span class="text-sm text-gray-500">Image for presentations and documents</span>
            </button>
          </div>
        </div>
        <div class="flex justify-end mt-4">
          <button class="btn-secondary" onclick="ui.hideModal()">Cancel</button>
        </div>
      </div>
    `;
    document.body.appendChild(modal);
    
    // Add export button handlers
    document.getElementById('exportSvgBtn').addEventListener('click', () => {
      this.exportOrgChartSvg();
      this.hideModal();
    });
    
    document.getElementById('exportPngBtn').addEventListener('click', () => {
      this.exportOrgChartPng();
      this.hideModal();
    });
  },
  
  // Export org chart as SVG
  exportOrgChartSvg() {
    const svg = document.querySelector("#orgChart svg");
    if (!svg) {
      this.showToast('Error: SVG element not found', 'error');
      return;
    }
    
    try {
      // Get client and stream filter values for filename
      const clientFilter = document.getElementById('clientFilter')?.value || 'all';
      const streamFilter = document.getElementById('streamFilter')?.value || 'all';
      
      // Clone the SVG to avoid modifying the original
      const svgClone = svg.cloneNode(true);
      
      // Add CSS styles to the SVG
      const style = document.createElement('style');
      style.textContent = `
        .node circle, .node rect {
          stroke: #fff;
          stroke-width: 2px;
        }
        .link {
          fill: none;
          stroke: #ccc;
          stroke-width: 1.5px;
        }
        text {
          font-family: Arial, sans-serif;
        }
      `;
      svgClone.appendChild(style);
      
      // Set explicit width and height
      svgClone.setAttribute('width', '1200');
      svgClone.setAttribute('height', '800');
      
      // Add title and metadata
      const title = document.createElement('title');
      title.textContent = 'Quality Organization Chart';
      svgClone.appendChild(title);
      
      const metadata = document.createElement('metadata');
      metadata.innerHTML = `<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
        <rdf:Description>
          <dc:title xmlns:dc="http://purl.org/dc/elements/1.1/">Quality Organization Chart</dc:title>
          <dc:date xmlns:dc="http://purl.org/dc/elements/1.1/">${new Date().toISOString()}</dc:date>
        </rdf:Description>
      </rdf:RDF>`;
      svgClone.appendChild(metadata);
      
      // Add footer text with generation info
      const footer = document.createElementNS("http://www.w3.org/2000/svg", "text");
      footer.setAttribute("x", "10");
      footer.setAttribute("y", "790");
      footer.setAttribute("font-size", "10");
      footer.setAttribute("fill", "#999");
      footer.textContent = `Generated: ${new Date().toLocaleString()}`;
      svgClone.appendChild(footer);
      
      // Add filter info if applicable
      if (clientFilter !== 'all' || streamFilter !== 'all') {
        const filterInfo = document.createElementNS("http://www.w3.org/2000/svg", "text");
        filterInfo.setAttribute("x", "10");
        filterInfo.setAttribute("y", "770");
        filterInfo.setAttribute("font-size", "10");
        filterInfo.setAttribute("fill", "#999");
        
        let filterText = 'Filtered by: ';
        if (streamFilter !== 'all') filterText += `Stream: ${streamFilter.toUpperCase()} `;
        if (clientFilter !== 'all') filterText += `Client: ${clientFilter}`;
        
        filterInfo.textContent = filterText;
        svgClone.appendChild(filterInfo);
      }
      
      // Convert to SVG string
      const serializer = new XMLSerializer();
      const source = serializer.serializeToString(svgClone);
      
      // Create and trigger download
      const blob = new Blob([source], { type: "image/svg+xml" });
      const url = URL.createObjectURL(blob);
      
      // Generate filename based on filters
      let filename = 'org-chart';
      if (streamFilter !== 'all') filename += `-${streamFilter}`;
      if (clientFilter !== 'all') filename += `-${clientFilter.replace(/\s+/g, '-')}`;
      
      const a = document.createElement("a");
      a.href = url;
      a.download = `${filename}.svg`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      
      this.showToast('SVG exported successfully', 'success');
    } catch (error) {
      console.error('Error exporting SVG:', error);
      this.showToast('Error exporting SVG: ' + error.message, 'error');
    }
  },
  
  // Export org chart as PNG
  exportOrgChartPng() {
    const svg = document.querySelector("#orgChart svg");
    if (!svg) {
      this.showToast('Error: SVG element not found', 'error');
      return;
    }
    
    try {
      // Check if html2canvas is loaded
      if (typeof html2canvas === 'undefined') {
        this.showToast('Error: html2canvas library not loaded', 'error');
        return;
      }
      
      // Get client and stream filter values for filename
      const clientFilter = document.getElementById('clientFilter')?.value || 'all';
      const streamFilter = document.getElementById('streamFilter')?.value || 'all';
      
      // Generate filename based on filters
      let filename = 'org-chart';
      if (streamFilter !== 'all') filename += `-${streamFilter}`;
      if (clientFilter !== 'all') filename += `-${clientFilter.replace(/\s+/g, '-')}`;
      
      // Use html2canvas to create PNG
      html2canvas(svg).then(canvas => {
        // Create and trigger download
        const link = document.createElement('a');
        link.download = `${filename}.png`;
        link.href = canvas.toDataURL('image/png');
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        
        this.showToast('PNG exported successfully', 'success');
      }).catch(error => {
        console.error('Error creating PNG:', error);
        this.showToast('Error creating PNG: ' + error.message, 'error');
      });
    } catch (error) {
      console.error('Error exporting PNG:', error);
      this.showToast('Error exporting PNG: ' + error.message, 'error');
    }
  },
  
  // Show node details
  showNodeDetails(nodeData) {
    if (!nodeData) return;
    
    const detailsDiv = document.getElementById('nodeDetails');
    const titleDiv = document.getElementById('detailsTitle');
    const contentDiv = document.getElementById('detailsContent');
    
    if (!detailsDiv || !titleDiv || !contentDiv) return;
    
    // Set title based on node type
    titleDiv.textContent = nodeData.type === 'team' ? 'Team Details' : 'Personnel Details';
    
    // Create content based on node type
    let content = '';
    
    if (nodeData.type === 'team') {
      content = `
        <div class="space-y-4">
          <div>
            <h4 class="font-semibold">Name</h4>
            <p>${this.sanitizeHtml(nodeData.name)}</p>
          </div>
          <div>
            <h4 class="font-semibold">Stream</h4>
            <p class="capitalize">${this.sanitizeHtml(nodeData.stream)}</p>
          </div>
          ${nodeData.description ? `
            <div>
              <h4 class="font-semibold">Description</h4>
              <p>${this.sanitizeHtml(nodeData.description)}</p>
            </div>
          ` : ''}
          ${nodeData.responsibilities ? `
            <div>
              <h4 class="font-semibold">Responsibilities</h4>
              <p>${this.sanitizeHtml(nodeData.responsibilities)}</p>
            </div>
          ` : ''}
          ${nodeData.performance !== undefined ? `
            <div>
              <h4 class="font-semibold">Performance</h4>
              <div class="w-full bg-gray-200 rounded-full h-2 mb-1">
                <div class="bg-${nodeData.stream}-600 h-2 rounded-full" style="width: ${nodeData.performance}%"></div>
              </div>
              <p class="text-right text-sm text-gray-600">${nodeData.performance}%</p>
            </div>
          ` : ''}
          <div class="flex justify-end">
            <button class="btn-primary" onclick="ui.viewTeamDetails(${nodeData.id})">View Full Details</button>
          </div>
        </div>
      `;
    } else {
      content = `
        <div class="space-y-4">
          <div>
            <h4 class="font-semibold">Name</h4>
            <p>${this.sanitizeHtml(nodeData.name)}</p>
          </div>
          ${nodeData.role ? `
            <div>
              <h4 class="font-semibold">Role</h4>
              <p>${this.sanitizeHtml(nodeData.role)}</p>
            </div>
          ` : ''}
          ${nodeData.client ? `
            <div>
              <h4 class="font-semibold">Client</h4>
              <p>${this.sanitizeHtml(nodeData.client)}</p>
            </div>
          ` : ''}
          ${nodeData.skills && Object.keys(nodeData.skills).length > 0 ? `
            <div>
              <h4 class="font-semibold">Skills</h4>
              <div class="flex flex-wrap gap-1 mt-2">
                ${Object.entries(nodeData.skills).map(([skill, level]) => `
                  <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-${nodeData.stream}-100 text-${nodeData.stream}-800">
                    ${this.sanitizeHtml(skill)}: ${level}
                  </span>
                `).join('')}
              </div>
            </div>
          ` : ''}
        </div>
      `;
    }
    
    contentDiv.innerHTML = content;
    detailsDiv.classList.remove('hidden');
  },
  
  // View team details from org chart node
  viewTeamDetails(teamId) {
    // Hide the node details panel
    document.getElementById('nodeDetails')?.classList.add('hidden');
    
    // Show the team details
    this.showTeamDetails(teamId);
  },

  loadDocumentation() {
    const tabContent = document.getElementById('tabContent');
    if (!tabContent) return;
    
    // Check if already loading
    if (tabContent.dataset.loading === 'true') {
      console.log('Documentation already loading, skipping duplicate load');
      return;
    }

    // Set loading state
    tabContent.dataset.loading = 'true';
    
    tabContent.innerHTML = `
      <div class="space-y-6">
        <div class="flex justify-between items-center">
          <h2 class="text-2xl font-semibold">Documentation</h2>
          <button class="btn-primary" onclick="ui.showAddDocumentModal()">
            <i class="fas fa-plus mr-2"></i> Add Document
          </button>
        </div>

        <!-- Document Filters -->
        <div class="flex space-x-4 mb-4">
          <select id="docTypeFilter" class="form-select" onchange="ui.filterDocuments()">
            <option value="">All Types</option>
            <option value="manual">Quality Manual</option>
            <option value="procedure">Procedure</option>
            <option value="form">Form</option>
            <option value="report">Report</option>
          </select>
          <select id="docStatusFilter" class="form-select" onchange="ui.filterDocuments()">
            <option value="">All Statuses</option>
            <option value="draft">Draft</option>
            <option value="review">In Review</option>
            <option value="approved">Approved</option>
            <option value="archived">Archived</option>
          </select>
          <input type="text" id="docSearch" class="form-input flex-1" 
                 placeholder="Search documents..." oninput="ui.filterDocuments()">
        </div>

        <!-- Documents Grid -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6" id="documentsGrid">
          ${this.renderDocumentationCards()}
        </div>
      </div>
    `;
    
    // Reset loading state
    tabContent.dataset.loading = 'false';
  },

  renderDocumentationCards() {
    if (!window.appData || !window.appData.documents || !Array.isArray(window.appData.documents) || window.appData.documents.length === 0) {
      return '<p class="text-gray-500 text-center py-8">No documents found. Use the "Add Document" button to create your first document.</p>';
    }
    
    return window.appData.documents.map(doc => `
      <div class="card document-card" data-type="${doc.type}" data-status="${doc.status}">
        <div class="flex justify-between items-start mb-4">
          <div>
            <h3 class="text-xl font-semibold">${doc.title}</h3>
            <p class="text-sm text-gray-600">${doc.type.charAt(0).toUpperCase() + doc.type.slice(1)}</p>
          </div>
          <div class="flex space-x-2">
            <button class="btn-icon" onclick="ui.editDocument(${doc.id})">
              <i class="fas fa-edit"></i>
            </button>
            <button class="btn-icon" onclick="ui.deleteDocument(${doc.id})">
              <i class="fas fa-trash"></i>
            </button>
          </div>
        </div>

        <div class="space-y-4">
          <div>
            <p class="text-gray-600">${doc.description}</p>
          </div>

          <div class="flex items-center justify-between">
            <div class="flex items-center space-x-2">
              <span class="px-2 py-1 text-xs rounded-full ${
                doc.status === 'approved' ? 'bg-green-100 text-green-800' :
                doc.status === 'review' ? 'bg-yellow-100 text-yellow-800' :
                doc.status === 'draft' ? 'bg-gray-100 text-gray-800' :
                'bg-red-100 text-red-800'
              }">
                ${doc.status.charAt(0).toUpperCase() + doc.status.slice(1)}
              </span>
              <span class="text-sm text-gray-500">v${doc.version}</span>
            </div>
            <span class="text-sm text-gray-500">Last updated: ${doc.lastUpdated}</span>
          </div>

          <div class="flex items-center justify-between">
            <div class="flex items-center space-x-2">
              <button class="btn-secondary btn-sm" onclick="ui.viewDocument(${doc.id})">
                <i class="fas fa-eye mr-2"></i> View
              </button>
              <button class="btn-secondary btn-sm" onclick="ui.downloadDocument(${doc.id})">
                <i class="fas fa-download mr-2"></i> Download
              </button>
            </div>
            <button class="btn-secondary btn-sm" onclick="ui.showVersionHistory(${doc.id})">
              <i class="fas fa-history mr-2"></i> History
            </button>
          </div>
        </div>
      </div>
    `).join('');
  },

  filterDocuments() {
    const typeFilter = document.getElementById("docTypeFilter").value;
    const statusFilter = document.getElementById("docStatusFilter").value;
    const searchTerm = document.getElementById("docSearch").value.toLowerCase();
    const cards = document.querySelectorAll(".document-card");

    cards.forEach(card => {
      const type = card.getAttribute("data-type");
      const status = card.getAttribute("data-status");
      const title = card.querySelector("h3").textContent.toLowerCase();
      const description = card.querySelector(".text-gray-600").textContent.toLowerCase();
      
      const matchesType = !typeFilter || type === typeFilter;
      const matchesStatus = !statusFilter || status === statusFilter;
      const matchesSearch = !searchTerm || 
        title.includes(searchTerm) || 
        description.includes(searchTerm);
      
      card.style.display = matchesType && matchesStatus && matchesSearch ? "" : "none";
    });
  },

  showAddDocumentModal() {
    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <h2 class="text-xl font-semibold mb-4">Add New Document</h2>
        <form id="addDocumentForm">
          <div class="form-group">
            <label for="docTitle">Title</label>
            <input type="text" id="docTitle" required>
          </div>
          <div class="form-group">
            <label for="docType">Type</label>
            <select id="docType" required>
              <option value="manual">Quality Manual</option>
              <option value="procedure">Procedure</option>
              <option value="form">Form</option>
              <option value="report">Report</option>
            </select>
          </div>
          <div class="form-group">
            <label for="docDescription">Description</label>
            <textarea id="docDescription" rows="3" required></textarea>
          </div>
          <div class="form-group">
            <label for="docFile">Document File</label>
            <input type="file" id="docFile" required>
          </div>
          <div class="flex justify-end space-x-2 mt-4">
            <button type="button" class="btn-secondary" onclick="ui.hideModal()">Cancel</button>
            <button type="submit" class="btn-primary">Add Document</button>
          </div>
        </form>
      </div>
    `;
    document.body.appendChild(modal);

    const form = modal.querySelector('#addDocumentForm');
    form.addEventListener('submit', (e) => {
      e.preventDefault();
      const file = form.querySelector('#docFile').files[0];
      const reader = new FileReader();

      reader.onload = (event) => {
        const doc = {
          id: Date.now(),
          title: form.querySelector('#docTitle').value,
          type: form.querySelector('#docType').value,
          description: form.querySelector('#docDescription').value,
          content: event.target.result,
          version: 1,
          status: 'draft',
          lastUpdated: new Date().toISOString().split('T')[0],
          history: [{
            version: 1,
            date: new Date().toISOString().split('T')[0],
            changes: 'Initial version',
            author: window.appData.state.userName
          }]
        };
        
        if (!window.appData.documents) window.appData.documents = [];
        window.appData.documents.push(doc);
        
        this.saveChanges();
        this.hideModal();
        this.showToast('Document added successfully', 'success');
        this.loadDocumentation();
      };

      reader.readAsText(file);
    });
  },

  editDocument(docId) {
    const doc = window.appData.documents.find(d => d.id === docId);
    if (!doc) return;

    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <h2 class="text-xl font-semibold mb-4">Edit Document</h2>
        <form id="editDocumentForm">
          <div class="form-group">
            <label for="docTitle">Title</label>
            <input type="text" id="docTitle" value="${doc.title}" required>
          </div>
          <div class="form-group">
            <label for="docType">Type</label>
            <select id="docType" required>
              <option value="manual" ${doc.type === 'manual' ? 'selected' : ''}>Quality Manual</option>
              <option value="procedure" ${doc.type === 'procedure' ? 'selected' : ''}>Procedure</option>
              <option value="form" ${doc.type === 'form' ? 'selected' : ''}>Form</option>
              <option value="report" ${doc.type === 'report' ? 'selected' : ''}>Report</option>
            </select>
          </div>
          <div class="form-group">
            <label for="docDescription">Description</label>
            <textarea id="docDescription" rows="3" required>${doc.description}</textarea>
          </div>
          <div class="form-group">
            <label for="docStatus">Status</label>
            <select id="docStatus" required>
              <option value="draft" ${doc.status === 'draft' ? 'selected' : ''}>Draft</option>
              <option value="review" ${doc.status === 'review' ? 'selected' : ''}>In Review</option>
              <option value="approved" ${doc.status === 'approved' ? 'selected' : ''}>Approved</option>
              <option value="archived" ${doc.status === 'archived' ? 'selected' : ''}>Archived</option>
            </select>
          </div>
          <div class="flex justify-end space-x-2 mt-4">
            <button type="button" class="btn-secondary" onclick="ui.hideModal()">Cancel</button>
            <button type="submit" class="btn-primary">Save Changes</button>
          </div>
        </form>
      </div>
    `;
    document.body.appendChild(modal);

    const form = modal.querySelector('#editDocumentForm');
    form.addEventListener('submit', (e) => {
      e.preventDefault();
      doc.title = form.querySelector('#docTitle').value;
      doc.type = form.querySelector('#docType').value;
      doc.description = form.querySelector('#docDescription').value;
      doc.status = form.querySelector('#docStatus').value;
      doc.lastUpdated = new Date().toISOString().split('T')[0];
      
      this.saveChanges();
      this.hideModal();
      this.showToast('Document updated successfully', 'success');
      this.loadDocumentation();
    });
  },

  deleteDocument(docId) {
    if (confirm('Are you sure you want to delete this document? This action cannot be undone.')) {
      window.appData.documents = window.appData.documents.filter(d => d.id !== docId);
      this.saveChanges();
      this.showToast('Document deleted successfully', 'success');
      this.loadDocumentation();
    }
  },

  viewDocument(docId) {
    const doc = window.appData.documents.find(d => d.id === docId);
    if (!doc) return;

    const modal = document.createElement('div');
    modal.className = 'modal modal-lg';
    modal.innerHTML = `
      <div class="modal-content">
        <div class="flex justify-between items-center mb-4">
          <h2 class="text-xl font-semibold">${doc.title}</h2>
          <button class="btn-icon" onclick="ui.hideModal()">
            <i class="fas fa-times"></i>
          </button>
        </div>
        <div class="prose max-w-none">
          <pre class="whitespace-pre-wrap">${doc.content}</pre>
        </div>
      </div>
    `;
    document.body.appendChild(modal);
  },

  downloadDocument(docId) {
    const doc = window.appData.documents.find(d => d.id === docId);
    if (!doc) return;

    const blob = new Blob([doc.content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${doc.title.toLowerCase().replace(/\s+/g, '-')}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  },

  showVersionHistory(docId) {
    const doc = window.appData.documents.find(d => d.id === docId);
    if (!doc) return;

    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <h2 class="text-xl font-semibold mb-4">Version History - ${doc.title}</h2>
        <div class="space-y-4">
          ${doc.history.map(version => `
            <div class="border-b pb-4">
              <div class="flex justify-between items-start">
                <div>
                  <p class="font-medium">Version ${version.version}</p>
                  <p class="text-sm text-gray-600">${version.changes}</p>
                </div>
                <div class="text-right">
                  <p class="text-sm text-gray-500">${version.date}</p>
                  <p class="text-sm text-gray-500">by ${version.author}</p>
                </div>
              </div>
            </div>
          `).join('')}
        </div>
        <div class="flex justify-end mt-4">
          <button class="btn-secondary" onclick="ui.hideModal()">Close</button>
        </div>
      </div>
    `;
    document.body.appendChild(modal);
  },

  loadPlanning() {
    const tabContent = document.getElementById('tabContent');
    if (!tabContent) return;

    // Check if already loading
    if (tabContent.dataset.loading === 'true') {
      console.log('Planning already loading, skipping duplicate load');
      return;
    }

    // Set loading state
    tabContent.dataset.loading = 'true';

    tabContent.innerHTML = `
      <div class="space-y-6">
        <!-- Org Roll-out Header -->
        <div class="flex justify-between items-center">
          <div>
            <h2 class="text-2xl font-semibold">Organization Roll-out Plan</h2>
            <p class="text-gray-600 mt-1">Track the implementation of the new organizational structure</p>
          </div>
          <div class="flex space-x-4">
            <button class="btn-outline" onclick="ui.exportRolloutPlan()">
              <i class="fas fa-download mr-2"></i> Export
            </button>
            <button class="btn-primary" onclick="ui.showAddPhaseModal()">
              <i class="fas fa-plus mr-2"></i> Add Phase
            </button>
          </div>
        </div>

        <!-- Progress Overview -->
        <div class="bg-white p-6 rounded-lg shadow-sm border border-gray-200">
          <div class="flex justify-between items-center mb-4">
            <h3 class="text-lg font-semibold">Overall Progress</h3>
            <span class="text-lg font-bold">${this.calculateOverallProgress()}%</span>
          </div>
          <div class="w-full bg-gray-200 rounded-full h-2.5 mb-6">
            <div class="bg-blue-600 h-2.5 rounded-full" style="width: ${this.calculateOverallProgress()}%"></div>
          </div>
          
          <div class="grid grid-cols-1 md:grid-cols-4 gap-4 text-center">
            <div class="bg-blue-50 p-4 rounded-lg">
              <h4 class="text-sm font-medium text-blue-700 mb-2">Planning</h4>
              <p class="text-2xl font-bold text-blue-700">${this.calculatePhaseProgress('planning')}%</p>
            </div>
            <div class="bg-yellow-50 p-4 rounded-lg">
              <h4 class="text-sm font-medium text-yellow-700 mb-2">Transition</h4>
              <p class="text-2xl font-bold text-yellow-700">${this.calculatePhaseProgress('transition')}%</p>
            </div>
            <div class="bg-green-50 p-4 rounded-lg">
              <h4 class="text-sm font-medium text-green-700 mb-2">Implementation</h4>
              <p class="text-2xl font-bold text-green-700">${this.calculatePhaseProgress('implementation')}%</p>
            </div>
            <div class="bg-purple-50 p-4 rounded-lg">
              <h4 class="text-sm font-medium text-purple-700 mb-2">Review</h4>
              <p class="text-2xl font-bold text-purple-700">${this.calculatePhaseProgress('review')}%</p>
            </div>
          </div>
        </div>

        <!-- Timeline View -->
        <div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
          <div class="p-4 border-b border-gray-200">
            <h3 class="text-lg font-semibold">Implementation Timeline</h3>
          </div>
          <div class="p-4 overflow-x-auto">
            <div id="rolloutTimeline" class="w-full" style="min-width: 800px; height: 400px;">
              <!-- Timeline will be rendered here -->
            </div>
          </div>
        </div>

        <!-- Key Milestones -->
        <div class="bg-white rounded-lg shadow-sm border border-gray-200">
          <div class="p-4 border-b border-gray-200 flex justify-between items-center">
            <h3 class="text-lg font-semibold">Key Milestones</h3>
            <button class="btn-sm btn-secondary" onclick="ui.showAddMilestoneModal()">
              <i class="fas fa-plus mr-1"></i> Add Milestone
            </button>
          </div>
          <div class="p-0">
            <table class="w-full">
              <thead class="bg-gray-50">
                <tr>
                  <th class="px-4 py-2 text-left">Milestone</th>
                  <th class="px-4 py-2 text-left">Phase</th>
                  <th class="px-4 py-2 text-left">Due Date</th>
                  <th class="px-4 py-2 text-left">Status</th>
                  <th class="px-4 py-2 text-left">Owner</th>
                  <th class="px-4 py-2 text-right">Actions</th>
                </tr>
              </thead>
              <tbody>
                ${this.renderMilestones()}
              </tbody>
            </table>
          </div>
        </div>

        <!-- Detailed Tasks by Phase -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <!-- Planning Phase -->
          <div class="bg-white rounded-lg shadow-sm border border-gray-200">
            <div class="p-4 border-b border-gray-200 bg-blue-50">
              <h3 class="font-semibold">Planning Phase</h3>
            </div>
            <div class="p-4">
              <ul class="space-y-2">
                ${this.renderPhaseTasks('planning')}
              </ul>
            </div>
          </div>

          <!-- Transition Phase -->
          <div class="bg-white rounded-lg shadow-sm border border-gray-200">
            <div class="p-4 border-b border-gray-200 bg-yellow-50">
              <h3 class="font-semibold">Transition Phase</h3>
            </div>
            <div class="p-4">
              <ul class="space-y-2">
                ${this.renderPhaseTasks('transition')}
              </ul>
            </div>
          </div>

          <!-- Implementation Phase -->
          <div class="bg-white rounded-lg shadow-sm border border-gray-200">
            <div class="p-4 border-b border-gray-200 bg-green-50">
              <h3 class="font-semibold">Implementation Phase</h3>
            </div>
            <div class="p-4">
              <ul class="space-y-2">
                ${this.renderPhaseTasks('implementation')}
              </ul>
            </div>
          </div>

          <!-- Review Phase -->
          <div class="bg-white rounded-lg shadow-sm border border-gray-200">
            <div class="p-4 border-b border-gray-200 bg-purple-50">
              <h3 class="font-semibold">Review Phase</h3>
            </div>
            <div class="p-4">
              <ul class="space-y-2">
                ${this.renderPhaseTasks('review')}
              </ul>
            </div>
          </div>
        </div>
      </div>
    `;

    // Initialize the rollout data if it doesn't exist
    if (!window.appData.rollout) {
      this.initializeRolloutData();
    }

    // Render the timeline
    this.renderRolloutTimeline();
    
    // Reset loading state
    tabContent.dataset.loading = 'false';
  },

  initializeRolloutData() {
    // Create initial structure for rollout data if not exists
    if (!window.appData.rollout) {
      window.appData.rollout = {
        phases: {
          planning: {
            name: "Planning",
            progress: 75,
            tasks: [
              { id: 1, name: "Assessment of current structure", status: "complete", owner: "John Smith" },
              { id: 2, name: "Define new organizational structure", status: "complete", owner: "Sarah Johnson" },
              { id: 3, name: "Stakeholder alignment", status: "in_progress", owner: "John Smith" },
              { id: 4, name: "Documentation of roles & responsibilities", status: "in_progress", owner: "Michael Brown" }
            ]
          },
          transition: {
            name: "Transition",
            progress: 40,
            tasks: [
              { id: 5, name: "Communication plan", status: "complete", owner: "Sarah Johnson" },
              { id: 6, name: "Change management strategy", status: "in_progress", owner: "Jane Doe" },
              { id: 7, name: "Training plan development", status: "not_started", owner: "Michael Brown" }
            ]
          },
          implementation: {
            name: "Implementation",
            progress: 15,
            tasks: [
              { id: 8, name: "Team restructuring", status: "in_progress", owner: "John Smith" },
              { id: 9, name: "Role assignments", status: "not_started", owner: "Sarah Johnson" },
              { id: 10, name: "System access updates", status: "not_started", owner: "Robert Williams" }
            ]
          },
          review: {
            name: "Review",
            progress: 0,
            tasks: [
              { id: 11, name: "Effectiveness assessment", status: "not_started", owner: "John Smith" },
              { id: 12, name: "Gap analysis", status: "not_started", owner: "Jane Doe" },
              { id: 13, name: "Adjustment plan", status: "not_started", owner: "Sarah Johnson" }
            ]
          }
        },
        milestones: [
          { 
            id: 1, 
            name: "Organization structure approved", 
            phase: "planning", 
            dueDate: "2025-04-15", 
            status: "complete", 
            owner: "John Smith" 
          },
          { 
            id: 2, 
            name: "Communication rolled out", 
            phase: "transition", 
            dueDate: "2025-05-01", 
            status: "in_progress", 
            owner: "Sarah Johnson" 
          },
          { 
            id: 3, 
            name: "Team restructuring complete", 
            phase: "implementation", 
            dueDate: "2025-06-15", 
            status: "not_started", 
            owner: "John Smith" 
          },
          { 
            id: 4, 
            name: "Post-implementation review", 
            phase: "review", 
            dueDate: "2025-07-01", 
            status: "not_started", 
            owner: "Jane Doe" 
          }
        ]
      };
      this.saveChanges();
    }
  },

  calculateOverallProgress() {
    if (!window.appData || !window.appData.rollout || !window.appData.rollout.phases) return 0;
    
    const phases = window.appData.rollout.phases;
    if (Object.keys(phases).length === 0) return 0;
    
    const totalProgress = Object.values(phases).reduce((sum, phase) => sum + (phase.progress || 0), 0);
    return Math.round(totalProgress / Object.keys(phases).length);
  },

  calculatePhaseProgress(phaseId) {
    if (!window.appData || !window.appData.rollout || !window.appData.rollout.phases || !window.appData.rollout.phases[phaseId]) return 0;
    return window.appData.rollout.phases[phaseId].progress || 0;
  },

  renderMilestones() {
    if (!window.appData || !window.appData.rollout || !window.appData.rollout.milestones || window.appData.rollout.milestones.length === 0) {
      return '<tr><td colspan="6" class="px-4 py-4 text-center text-gray-500">No milestones defined yet</td></tr>';
    }
    
    return window.appData.rollout.milestones.map(milestone => {
      const statusClass = 
        milestone.status === 'complete' ? 'bg-green-100 text-green-800' :
        milestone.status === 'in_progress' ? 'bg-yellow-100 text-yellow-800' :
        'bg-gray-100 text-gray-800';
      
      return `
        <tr class="border-b">
          <td class="px-4 py-3">${milestone.name}</td>
          <td class="px-4 py-3 capitalize">${milestone.phase}</td>
          <td class="px-4 py-3">${milestone.dueDate}</td>
          <td class="px-4 py-3">
            <span class="px-2 py-1 rounded-full text-xs ${statusClass}">
              ${milestone.status.replace('_', ' ').replace(/\b\w/g, l => l.toUpperCase())}
            </span>
          </td>
          <td class="px-4 py-3">${milestone.owner}</td>
          <td class="px-4 py-3 text-right">
            <button class="btn-icon btn-sm" onclick="ui.editMilestone(${milestone.id})">
              <i class="fas fa-edit"></i>
            </button>
            <button class="btn-icon btn-sm" onclick="ui.deleteMilestone(${milestone.id})">
              <i class="fas fa-trash"></i>
            </button>
          </td>
        </tr>
      `;
    }).join('');
  },

  renderPhaseTasks(phaseId) {
    if (!window.appData || !window.appData.rollout || !window.appData.rollout.phases || !window.appData.rollout.phases[phaseId]) {
      return '<li class="text-gray-500 text-center">No tasks defined for this phase</li>';
    }
    
    const phase = window.appData.rollout.phases[phaseId];
    
    if (!phase.tasks || phase.tasks.length === 0) {
      return '<li class="text-gray-500 text-center">No tasks defined for this phase</li>';
    }
    
    return phase.tasks.map(task => {
      const statusIcon = 
        task.status === 'complete' ? '<i class="fas fa-check-circle text-green-500 mr-2"></i>' :
        task.status === 'in_progress' ? '<i class="fas fa-clock text-yellow-500 mr-2"></i>' :
        '<i class="far fa-circle text-gray-400 mr-2"></i>';
      
      return `
        <li class="flex items-center justify-between">
          <div class="flex items-center">
            ${statusIcon}
            <span class="${task.status === 'complete' ? 'line-through text-gray-500' : ''}">${task.name}</span>
          </div>
          <div class="text-sm text-gray-500">
            ${task.owner}
          </div>
        </li>
      `;
    }).join('');
  },

  renderRolloutTimeline() {
    const timelineEl = document.getElementById('rolloutTimeline');
    if (!timelineEl) return;
    
    // Create a simple timeline visualization
    let html = `<div class="relative">`;
    
    // Draw the timeline base line
    html += `<div class="absolute top-9 left-0 w-full h-1 bg-gray-200"></div>`;
    
    // Add milestones to the timeline
    if (window.appData && window.appData.rollout && window.appData.rollout.milestones && window.appData.rollout.milestones.length > 0) {
      const milestones = window.appData.rollout.milestones;
      const totalWidth = timelineEl.clientWidth - 40;
      
      // Sort milestones by due date
      const sortedMilestones = [...milestones].sort((a, b) => 
        new Date(a.dueDate) - new Date(b.dueDate)
      );
      
      // Find the earliest and latest dates
      const startDate = new Date(sortedMilestones[0].dueDate);
      const endDate = new Date(sortedMilestones[sortedMilestones.length - 1].dueDate);
      const totalDays = (endDate - startDate) / (1000 * 60 * 60 * 24);
      
      sortedMilestones.forEach((milestone, index) => {
        const date = new Date(milestone.dueDate);
        const daysDiff = (date - startDate) / (1000 * 60 * 60 * 24);
        const position = Math.floor((daysDiff / totalDays) * totalWidth);
        
        const statusColor = 
          milestone.status === 'complete' ? 'bg-green-500' :
          milestone.status === 'in_progress' ? 'bg-yellow-500' :
          'bg-gray-500';
        
        html += `
          <div class="absolute" style="left: ${position}px; top: 0;">
            <div class="${statusColor} w-5 h-5 rounded-full border-4 border-white shadow-sm"></div>
            <div class="mt-4 -ml-10 w-20 text-center">
              <div class="text-xs font-bold">${milestone.dueDate}</div>
              <div class="text-xs whitespace-normal" style="word-break: break-word;">${milestone.name}</div>
            </div>
          </div>
        `;
      });
    } else {
      // No milestones - show empty timeline with a message
      html += `
        <div class="absolute left-1/2 transform -translate-x-1/2 text-center" style="top: 20px;">
          <p class="text-gray-500">No milestones defined yet</p>
        </div>
      `;
    }
    
    html += `</div>`;
    timelineEl.innerHTML = html;
  },

  showAddPhaseModal() {
    // Implementation for adding a new phase
    this.showToast('Add Phase functionality will be implemented', 'info');
  },

  showAddMilestoneModal() {
    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <h2 class="text-xl font-semibold mb-4">Add New Milestone</h2>
        <form id="addMilestoneForm">
          <div class="form-group">
            <label for="milestoneName">Milestone Name</label>
            <input type="text" id="milestoneName" required>
          </div>
          <div class="form-group">
            <label for="milestonePhase">Phase</label>
            <select id="milestonePhase" required>
              <option value="planning">Planning</option>
              <option value="transition">Transition</option>
              <option value="implementation">Implementation</option>
              <option value="review">Review</option>
            </select>
          </div>
          <div class="form-group">
            <label for="milestoneDueDate">Due Date</label>
            <input type="date" id="milestoneDueDate" required>
          </div>
          <div class="form-group">
            <label for="milestoneStatus">Status</label>
            <select id="milestoneStatus" required>
              <option value="not_started">Not Started</option>
              <option value="in_progress">In Progress</option>
              <option value="complete">Complete</option>
            </select>
          </div>
          <div class="form-group">
            <label for="milestoneOwner">Owner</label>
            <input type="text" id="milestoneOwner" required>
          </div>
          <div class="flex justify-end space-x-2 mt-4">
            <button type="button" class="btn-secondary" onclick="ui.hideModal()">Cancel</button>
            <button type="submit" class="btn-primary">Add Milestone</button>
          </div>
        </form>
      </div>
    `;
    document.body.appendChild(modal);

    const form = modal.querySelector('#addMilestoneForm');
    form.addEventListener('submit', (e) => {
      e.preventDefault();
      
      // Initialize rollout data if needed
      if (!window.appData.rollout) {
        this.initializeRolloutData();
      }
      
      // Get the highest existing milestone ID
      const maxId = Math.max(...window.appData.rollout.milestones.map(m => m.id), 0);
      
      const milestone = {
        id: maxId + 1,
        name: form.querySelector('#milestoneName').value,
        phase: form.querySelector('#milestonePhase').value,
        dueDate: form.querySelector('#milestoneDueDate').value,
        status: form.querySelector('#milestoneStatus').value,
        owner: form.querySelector('#milestoneOwner').value
      };
      
      window.appData.rollout.milestones.push(milestone);
      
      this.saveChanges();
      this.hideModal();
      this.showToast('Milestone added successfully', 'success');
      this.loadPlanning();
    });
  },

  editMilestone(milestoneId) {
    if (!window.appData.rollout) return;
    
    const milestone = window.appData.rollout.milestones.find(m => m.id === milestoneId);
    if (!milestone) return;
    
    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <h2 class="text-xl font-semibold mb-4">Edit Milestone</h2>
        <form id="editMilestoneForm">
          <div class="form-group">
            <label for="milestoneName">Milestone Name</label>
            <input type="text" id="milestoneName" value="${milestone.name}" required>
          </div>
          <div class="form-group">
            <label for="milestonePhase">Phase</label>
            <select id="milestonePhase" required>
              <option value="planning" ${milestone.phase === 'planning' ? 'selected' : ''}>Planning</option>
              <option value="transition" ${milestone.phase === 'transition' ? 'selected' : ''}>Transition</option>
              <option value="implementation" ${milestone.phase === 'implementation' ? 'selected' : ''}>Implementation</option>
              <option value="review" ${milestone.phase === 'review' ? 'selected' : ''}>Review</option>
            </select>
          </div>
          <div class="form-group">
            <label for="milestoneDueDate">Due Date</label>
            <input type="date" id="milestoneDueDate" value="${milestone.dueDate}" required>
          </div>
          <div class="form-group">
            <label for="milestoneStatus">Status</label>
            <select id="milestoneStatus" required>
              <option value="not_started" ${milestone.status === 'not_started' ? 'selected' : ''}>Not Started</option>
              <option value="in_progress" ${milestone.status === 'in_progress' ? 'selected' : ''}>In Progress</option>
              <option value="complete" ${milestone.status === 'complete' ? 'selected' : ''}>Complete</option>
            </select>
          </div>
          <div class="form-group">
            <label for="milestoneOwner">Owner</label>
            <input type="text" id="milestoneOwner" value="${milestone.owner}" required>
          </div>
          <div class="flex justify-end space-x-2 mt-4">
            <button type="button" class="btn-secondary" onclick="ui.hideModal()">Cancel</button>
            <button type="submit" class="btn-primary">Save Changes</button>
          </div>
        </form>
      </div>
    `;
    document.body.appendChild(modal);

    const form = modal.querySelector('#editMilestoneForm');
    form.addEventListener('submit', (e) => {
      e.preventDefault();
      
      milestone.name = form.querySelector('#milestoneName').value;
      milestone.phase = form.querySelector('#milestonePhase').value;
      milestone.dueDate = form.querySelector('#milestoneDueDate').value;
      milestone.status = form.querySelector('#milestoneStatus').value;
      milestone.owner = form.querySelector('#milestoneOwner').value;
      
      this.saveChanges();
      this.hideModal();
      this.showToast('Milestone updated successfully', 'success');
      this.loadPlanning();
    });
  },

  deleteMilestone(milestoneId) {
    if (!window.appData.rollout) return;
    
    if (confirm('Are you sure you want to delete this milestone? This action cannot be undone.')) {
      window.appData.rollout.milestones = window.appData.rollout.milestones.filter(m => m.id !== milestoneId);
      
      this.saveChanges();
      this.showToast('Milestone deleted successfully', 'success');
      this.loadPlanning();
    }
  },

  exportRolloutPlan() {
    if (!window.appData.rollout) {
      this.showToast('No rollout data to export', 'error');
      return;
    }
    
    const data = JSON.stringify(window.appData.rollout, null, 2);
    const blob = new Blob([data], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    
    const link = document.createElement('a');
    link.setAttribute('href', url);
    link.setAttribute('download', 'organization_rollout_plan.json');
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
    
    this.showToast('Rollout plan exported successfully', 'success');
  },

  loadPersonnel() {
    try {
      console.log('Loading personnel content...');
      
      const tabContent = document.getElementById('tabContent');
      if (!tabContent) {
        console.error('Tab content element not found');
        return;
      }
      
      // Check if already loading
      if (tabContent.dataset.loading === 'true' && tabContent.dataset.currentTab === 'personnel') {
        console.log('Personnel already loading, skipping duplicate load request');
        return;
      }

      // Set loading state
      tabContent.dataset.loading = 'true';
      tabContent.dataset.currentTab = 'personnel';
      
      // Clear any existing content
      tabContent.innerHTML = `
        <div class="flex justify-center items-center p-12">
          <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
          <p class="ml-4 text-gray-500">Loading personnel content...</p>
        </div>
      `;
      
      // Use a timeout to ensure loading indicator is shown
      setTimeout(() => {
        try {
          // Ensure appData exists
          if (!window.appData) window.appData = {};
          if (!window.appData.teams) window.appData.teams = [];
          const teams = window.appData.teams;
          
          // Extract all personnel from teams
          const allPersonnel = [];
          teams.forEach(team => {
            if (team && team.personnel) {
              team.personnel.forEach(person => {
                if (person) {
                  allPersonnel.push({
                    ...person,
                    team: team.name || 'Unknown Team',
                    stream: team.stream || 'unknown'
                  });
                }
              });
            }
          });
          
          tabContent.innerHTML = `
            <div class="p-4">
              <div class="flex justify-between items-center mb-6">
                <h2 class="text-2xl font-bold">Personnel</h2>
                <div class="flex items-center gap-4">
                  <div class="relative">
                    <input type="text" id="personnelSearch" placeholder="Search personnel..." 
                      class="border rounded-lg pl-10 pr-4 py-2 w-64 focus:outline-none focus:ring-2 focus:ring-blue-400">
                    <i class="fas fa-search absolute left-3 top-3 text-gray-400"></i>
                  </div>
                  <button class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition flex items-center" id="addPersonBtn">
                    <i class="fas fa-plus mr-2"></i> Add Person
                  </button>
                </div>
              </div>
              
              <!-- Personnel Table -->
              <div class="bg-white rounded-lg shadow overflow-hidden">
                <table class="min-w-full divide-y divide-gray-200">
                  <thead class="bg-gray-50">
                    <tr>
                      <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                      <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Role</th>
                      <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Team</th>
                      <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Client</th>
                      <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                    </tr>
                  </thead>
                  <tbody class="bg-white divide-y divide-gray-200">
                    ${allPersonnel.length > 0 ? allPersonnel.map(person => `
                      <tr>
                        <td class="px-6 py-4 whitespace-nowrap">${person.name || 'Unknown'}</td>
                        <td class="px-6 py-4 whitespace-nowrap">${person.role || 'Unspecified'}</td>
                        <td class="px-6 py-4 whitespace-nowrap">
                          <span class="px-2 py-1 text-xs rounded-full text-white bg-gray-600">${person.team}</span>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">${person.client || 'None'}</td>
                        <td class="px-6 py-4 whitespace-nowrap">
                          <button class="text-blue-600 hover:text-blue-800 mr-2 edit-person-btn" data-person-id="${person.id}" title="Edit">
                            <i class="fas fa-edit"></i>
                          </button>
                          <button class="text-red-600 hover:text-red-800 delete-person-btn" data-person-id="${person.id}" title="Delete">
                            <i class="fas fa-trash-alt"></i>
                          </button>
                        </td>
                      </tr>
                    `).join('') : '<tr><td colspan="5" class="px-6 py-4 text-center text-gray-500">No personnel data available</td></tr>'}
                  </tbody>
                </table>
              </div>
            </div>
          `;
          
          // Add event listeners
          if (allPersonnel.length > 0) {
            this.addPersonnelEventListeners(allPersonnel);
          }
          
          // Reset loading state
          tabContent.dataset.loading = 'false';
          
          console.log('Personnel content loaded successfully');
        } catch (error) {
          console.error('Error loading personnel:', error);
          
          tabContent.innerHTML = `
            <div class="p-8 text-center">
              <div class="text-red-500 text-xl mb-4">
                <i class="fas fa-exclamation-triangle mr-2"></i> 
                Error loading Personnel
              </div>
              <p class="mb-4">${error.message || 'An unknown error occurred'}</p>
              <button class="px-4 py-2 bg-blue-600 text-white rounded" onclick="ui.switchTab('personnel')">
                <i class="fas fa-sync-alt mr-2"></i> Try Again
              </button>
            </div>
          `;
          
          // Reset loading state
          tabContent.dataset.loading = 'false';
        }
      }, 150); // Slightly longer delay for better reliability
    } catch (error) {
      console.error('Critical error in loadPersonnel:', error);
      
      const tabContent = document.getElementById('tabContent');
      if (tabContent) {
        tabContent.innerHTML = `
          <div class="p-8 text-center">
            <div class="text-red-500 text-xl mb-4">
              <i class="fas fa-exclamation-triangle mr-2"></i> 
              Critical Error Loading Personnel
            </div>
            <p class="mb-4">${error.message || 'An unknown error occurred'}</p>
            <button class="px-4 py-2 bg-blue-600 text-white rounded" onclick="location.reload()">
              <i class="fas fa-sync-alt mr-2"></i> Refresh Page
            </button>
          </div>
        `;
        
        // Reset loading state
        tabContent.dataset.loading = 'false';
      }
    }
  },

  // Add a helper method for personnel event listeners
  addPersonnelEventListeners(personnelList) {
    // Add search functionality
    const searchInput = document.getElementById('personnelSearch');
    if (searchInput) {
      searchInput.addEventListener('input', (e) => {
        const value = e.target.value.toLowerCase();
        const rows = document.querySelectorAll('tbody tr');
        
        rows.forEach(row => {
          const text = row.textContent.toLowerCase();
          row.style.display = text.includes(value) ? '' : 'none';
        });
      });
    }
    
    // Add person button
    const addPersonBtn = document.getElementById('addPersonBtn');
    if (addPersonBtn) {
      addPersonBtn.addEventListener('click', () => {
        // Check if teams exist before adding a person
        if (window.appData.teams && window.appData.teams.length > 0) {
          this.showAddPersonModal();
        } else {
          this.showToast('You need to create a team first before adding personnel', 'warning');
        }
      });
    }
    
    // Edit person buttons
    const editBtns = document.querySelectorAll('.edit-person-btn');
    editBtns.forEach(btn => {
      const personId = parseInt(btn.getAttribute('data-person-id'));
      btn.addEventListener('click', () => {
        // Find the person in the personnel list
        const person = personnelList.find(p => p.id === personId);
        if (person) {
          this.editPersonnel(personId);
        }
      });
    });
    
    // Delete person buttons
    const deleteBtns = document.querySelectorAll('.delete-person-btn');
    deleteBtns.forEach(btn => {
      const personId = parseInt(btn.getAttribute('data-person-id'));
      btn.addEventListener('click', () => {
        // Find the team that contains this person
        const team = window.appData.teams.find(t => 
          t.personnel && t.personnel.some(p => p.id === personId)
        );
        
        if (team) {
          this.removePersonnel(personId, team.id);
        }
      });
    });
  },

  // Helper function to show add person modal
  showAddPersonModal() {
    try {
      const teams = window.appData?.teams || [];
      
      if (teams.length === 0) {
        this.showToast('You need to create a team first before adding personnel', 'warning');
        return;
      }
      
      const modal = document.createElement('div');
      modal.className = 'modal';
      modal.innerHTML = `
        <div class="modal-content">
          <h2 class="text-xl font-semibold mb-4">Add New Person</h2>
          <form id="addPersonForm">
            <div class="form-group">
              <label for="personName">Name</label>
              <input type="text" id="personName" required>
            </div>
            <div class="form-group">
              <label for="personRole">Role</label>
              <input type="text" id="personRole" required>
            </div>
            <div class="form-group">
              <label for="personClient">Client</label>
              <input type="text" id="personClient" required>
            </div>
            <div class="form-group">
              <label for="personTeam">Team</label>
              <select id="personTeam" required>
                ${teams.map(team => `<option value="${team.id}">${team.name || 'Team #' + team.id}</option>`).join('')}
              </select>
            </div>
            <div class="flex justify-end space-x-2 mt-4">
              <button type="button" class="btn-secondary" onclick="ui.hideModal()">Cancel</button>
              <button type="submit" class="btn-primary">Add Person</button>
            </div>
          </form>
        </div>
      `;
      document.body.appendChild(modal);
      
      const form = modal.querySelector('#addPersonForm');
      if (form) {
        form.addEventListener('submit', (e) => {
          e.preventDefault();
          
          try {
            const teamId = parseInt(form.querySelector('#personTeam').value);
            const team = teams.find(t => t.id === teamId);
            
            if (team) {
              const personId = Date.now();
              const newPerson = {
                id: personId,
                name: form.querySelector('#personName').value,
                role: form.querySelector('#personRole').value,
                client: form.querySelector('#personClient').value
              };
              
              if (!team.personnel) {
                team.personnel = [];
              }
              
              team.personnel.push(newPerson);
              this.saveChanges();
              this.hideModal();
              this.showToast('Person added successfully', 'success');
              this.loadPersonnel();
            } else {
              this.showToast('Selected team not found', 'error');
            }
          } catch (formError) {
            console.error('Error adding person:', formError);
            this.showToast('Error adding person: ' + (formError.message || 'Unknown error'), 'error');
          }
        });
      }
    } catch (error) {
      console.error('Error showing add person modal:', error);
      this.showToast('Could not open add person form', 'error');
    }
  },
  
  // Load dashboard content
  loadDashboard() {
    try {
      console.log('Loading dashboard content...');
      
      const tabContent = document.getElementById('tabContent');
      if (!tabContent) {
        console.error('Tab content element not found');
        return;
      }
      
      // If dashboard is already loading, don't try to load it again
      if (tabContent.dataset.loading === 'true' && tabContent.dataset.currentTab === 'dashboard') {
        console.log('Dashboard already loading, skipping duplicate load request');
        return;
      }
      
      // Set loading state
      tabContent.dataset.loading = 'true';
      tabContent.dataset.currentTab = 'dashboard';
      
      // Calculate statistics once and reuse
      const stats = this.calculateStats();
      
      // Create Dashboard HTML with optimized template structure
      const dashboardHTML = `
        <div class="p-4">
          <h2 class="text-2xl font-bold mb-6">Dashboard</h2>
          
          <!-- Statistics Cards -->
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-8">
            ${this.createStatCard('BBV Stream', stats.bbv.personnel, stats.bbv.teams, 'blue', 'teams', 'bbv')}
            ${this.createStatCard('ADD Stream', stats.add.personnel, stats.add.teams, 'red', 'teams', 'add')}
            ${this.createStatCard('ARB Stream', stats.arb.personnel, stats.arb.teams, 'purple', 'teams', 'arb')}
            ${this.createStatCard('Shared Services', stats.shared.personnel, stats.shared.teams, 'gray', 'teams', 'shared')}
          </div>
          
          <!-- Charts and Activity Section -->
          <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <!-- Personnel Distribution Chart -->
            <div class="bg-white p-4 rounded-lg shadow lg:col-span-1 cursor-pointer" onclick="ui.switchTab('personnel')">
              <h3 class="font-semibold mb-4">Personnel Distribution</h3>
              <div class="chart-container" style="position: relative; height: 220px;">
                <canvas id="personnelChart"></canvas>
              </div>
            </div>
            
            <!-- Team Performance Chart -->
            <div class="bg-white p-4 rounded-lg shadow lg:col-span-2 cursor-pointer" onclick="ui.switchTab('teams')">
              <h3 class="font-semibold mb-4">Team Performance</h3>
              <div class="chart-container" style="position: relative; height: 220px;">
                <canvas id="performanceChart"></canvas>
              </div>
            </div>
            
            <!-- Recent Activities -->
            <div class="bg-white p-4 rounded-lg shadow cursor-pointer" onclick="ui.showAllActivities()">
              <div class="flex justify-between items-center mb-4">
                <h3 class="font-semibold">Recent Activities</h3>
                <button class="text-blue-600 text-sm hover:text-blue-800" id="viewAllActivitiesBtn">
                  View All
                </button>
              </div>
              <div class="activities-container">
                ${this.renderRecentActivities()}
              </div>
            </div>
            
            <!-- Upcoming Tasks -->
            <div class="bg-white p-4 rounded-lg shadow lg:col-span-2 cursor-pointer" onclick="ui.switchTab('planning')">
              <div class="flex justify-between items-center mb-4">
                <h3 class="font-semibold">Upcoming Tasks</h3>
                <button class="text-blue-600 text-sm hover:text-blue-800" id="viewAllTasksBtn">
                  View All
                </button>
              </div>
              <div class="tasks-container">
                ${this.renderUpcomingTasks()}
              </div>
            </div>
          </div>
        </div>
      `;
      
      // Set content
      tabContent.innerHTML = dashboardHTML;
      
      // Initialize charts after content is loaded
      this.initializeCharts();
      
      // Add event listeners for dashboard actions
      document.getElementById('viewAllActivitiesBtn')?.addEventListener('click', (e) => {
        e.stopPropagation(); // Prevent parent div click
        this.showAllActivities();
      });
      document.getElementById('viewAllTasksBtn')?.addEventListener('click', (e) => {
        e.stopPropagation(); // Prevent parent div click
        this.switchTab('planning');
      });
      
      // Reset loading state
      tabContent.dataset.loading = 'false';
      
      console.log('Dashboard loaded successfully');
    } catch (error) {
      console.error('Error loading dashboard:', error);
      
      const tabContent = document.getElementById('tabContent');
      if (tabContent) {
        tabContent.innerHTML = `
          <div class="p-8 text-center">
            <div class="text-red-500 text-xl mb-4">
              <i class="fas fa-exclamation-triangle mr-2"></i> 
              Error Loading Dashboard
            </div>
            <p class="mb-4">${error.message || 'An unknown error occurred'}</p>
            <button class="px-4 py-2 bg-blue-600 text-white rounded" onclick="ui.switchTab('dashboard')">
              <i class="fas fa-sync-alt mr-2"></i> Try Again
            </button>
          </div>
        `;
        
        // Reset loading state
        tabContent.dataset.loading = 'false';
      }
    }
  },

  // Helper function to create stream statistic cards
  createStatCard(title, personnel, teams, color, navTab, filter) {
    return `
      <div class="bg-white p-4 rounded-lg shadow cursor-pointer" onclick="ui.navigateWithFilter('${navTab}', '${filter}')">
        <div class="flex items-center">
          <div class="rounded-full w-12 h-12 flex items-center justify-center bg-${color}-100 text-${color}-800">
            <i class="fas fa-users"></i>
          </div>
          <div class="ml-4">
            <h3 class="text-gray-500 text-sm">${title}</h3>
            <div class="flex items-baseline">
              <p class="text-2xl font-semibold">${personnel}</p>
              <p class="ml-2 text-sm text-gray-600">Personnel</p>
            </div>
          </div>
        </div>
        <div class="mt-2 text-xs text-gray-500">Across ${teams} teams</div>
      </div>
    `;
  },
  
  // Navigate to a tab with a filter applied
  navigateWithFilter(tab, filter) {
    // Store the filter in a session variable
    sessionStorage.setItem('activeFilter', filter);
    
    // Navigate to the tab
    this.switchTab(tab);
  },

  exportTeams() {
    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <h2 class="text-xl font-semibold mb-4">Export Teams Data</h2>
        <div class="space-y-4">
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <button class="btn-secondary p-6 text-center flex flex-col items-center justify-center" onclick="ui.exportTeamsCSV()">
              <i class="fas fa-file-csv text-3xl mb-2"></i>
              <span class="text-lg font-medium">CSV Format</span>
              <span class="text-sm text-gray-500">Export as comma-separated values</span>
            </button>
            <button class="btn-secondary p-6 text-center flex flex-col items-center justify-center" onclick="ui.exportTeamsJSON()">
              <i class="fas fa-file-code text-3xl mb-2"></i>
              <span class="text-lg font-medium">JSON Format</span>
              <span class="text-sm text-gray-500">Export as structured data</span>
            </button>
          </div>
        </div>
        <div class="flex justify-end mt-4">
          <button class="btn-secondary" onclick="ui.hideModal()">Cancel</button>
        </div>
      </div>
    `;
    document.body.appendChild(modal);
  },

  // Load role matrix
  loadRoleMatrix() {
    try {
      console.log('Loading role matrix content...');
      
      const tabContent = document.getElementById('tabContent');
      if (!tabContent) {
        console.error('Tab content element not found');
        return;
      }
      
      // Check if already loading
      if (tabContent.dataset.loading === 'true') {
        console.log('Role matrix already loading, skipping duplicate load');
        return;
      }
      
      // Set loading state
      tabContent.dataset.loading = 'true';
      
      // Create empty arrays if they don't exist
      if (!window.appData.roles) window.appData.roles = [];
      
      tabContent.innerHTML = `
        <div class="p-4">
          <div class="flex justify-between items-center mb-6">
            <h2 class="text-2xl font-bold">Role Matrix</h2>
            <div class="flex space-x-4">
              <button class="btn-secondary" id="exportRoleMatrixBtn">
                <i class="fas fa-download mr-2"></i> Export
              </button>
              <button class="btn-primary" id="addRoleBtn">
                <i class="fas fa-plus mr-2"></i> Add Role
              </button>
            </div>
          </div>

          <div class="bg-white rounded-lg shadow overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
              <thead class="bg-gray-50">
                <tr>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Role</th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Description</th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Stream</th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Personnel Count</th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                </tr>
              </thead>
              <tbody class="bg-white divide-y divide-gray-200">
                ${this.renderRoleMatrix()}
              </tbody>
            </table>
          </div>

          <div class="mt-8">
            <h3 class="text-xl font-semibold mb-4">Role Distribution by Stream</h3>
            <div class="bg-white rounded-lg shadow p-4" style="height: 300px;">
              <canvas id="roleDistributionChart"></canvas>
            </div>
          </div>
        </div>
      `;
      
      // Add event listeners
      document.getElementById('addRoleBtn')?.addEventListener('click', () => this.showAddRoleModal());
      document.getElementById('exportRoleMatrixBtn')?.addEventListener('click', () => this.exportRoleMatrix());
      
      // Initialize charts
      this.initializeRoleDistributionChart();
      
      // Reset loading state
      tabContent.dataset.loading = 'false';
    } catch (error) {
      console.error('Error loading role matrix:', error);
      this.showToast('Error loading role matrix', 'error');
      
      const tabContent = document.getElementById('tabContent');
      if (tabContent) {
        tabContent.innerHTML = `
          <div class="p-8 text-center">
            <div class="text-red-500 text-xl mb-4">
              <i class="fas fa-exclamation-triangle mr-2"></i> 
              Error Loading Role Matrix
            </div>
            <p class="mb-4">${error.message || 'An unknown error occurred'}</p>
            <button class="px-4 py-2 bg-blue-600 text-white rounded" onclick="ui.switchTab('rolematrix')">
              <i class="fas fa-sync-alt mr-2"></i> Try Again
            </button>
          </div>
        `;
        
        // Reset loading state
        tabContent.dataset.loading = 'false';
      }
    }
  },
  
  // Render role matrix table rows
  renderRoleMatrix() {
    // Get all unique roles from personnel
    const allRoles = new Map();
    
    // Extract roles from teams/personnel
    if (window.appData && window.appData.teams) {
      window.appData.teams.forEach(team => {
        if (team && team.personnel) {
          team.personnel.forEach(person => {
            if (person && person.role) {
              // If role exists, increment count, otherwise add it
              if (allRoles.has(person.role)) {
                const roleData = allRoles.get(person.role);
                roleData.count++;
                // Add the stream if it's not already in the list
                if (!roleData.streams.includes(team.stream)) {
                  roleData.streams.push(team.stream);
                }
              } else {
                allRoles.set(person.role, {
                  name: person.role,
                  description: '',
                  streams: [team.stream],
                  count: 1
                });
              }
            }
          });
        }
      });
    }
    
    // Check if we have any roles
    if (allRoles.size === 0) {
      return '<tr><td colspan="5" class="px-6 py-4 text-center text-gray-500">No roles available</td></tr>';
    }
    
    // Convert the Map to an array and sort by role name
    const roles = Array.from(allRoles.values()).sort((a, b) => a.name.localeCompare(b.name));
    
    // Create table rows
    return roles.map(role => `
      <tr>
        <td class="px-6 py-4 whitespace-nowrap font-medium">${this.sanitizeHtml(role.name)}</td>
        <td class="px-6 py-4">${role.description || 'No description available'}</td>
        <td class="px-6 py-4">
          ${role.streams.map(stream => `
            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-${stream}-100 text-${stream}-800 mr-1">
              ${stream.toUpperCase()}
            </span>
          `).join('')}
        </td>
        <td class="px-6 py-4 whitespace-nowrap">${role.count}</td>
        <td class="px-6 py-4 whitespace-nowrap">
          <button class="text-indigo-600 hover:text-indigo-900 mr-3" onclick="ui.showRoleDetails('${role.name}')">
            <i class="fas fa-eye"></i>
          </button>
          <button class="text-indigo-600 hover:text-indigo-900" onclick="ui.showRolePersonnel('${role.name}')">
            <i class="fas fa-users"></i>
          </button>
        </td>
      </tr>
    `).join('');
  },
  
  // Initialize role distribution chart
  initializeRoleDistributionChart() {
    const ctx = document.getElementById('roleDistributionChart');
    if (!ctx || typeof Chart === 'undefined') return;
    
    // Get role counts by stream
    const streamCounts = { bbv: 0, add: 0, arb: 0, shared: 0 };
    
    // Count roles per stream
    if (window.appData && window.appData.teams) {
      window.appData.teams.forEach(team => {
        if (team && team.personnel && team.stream) {
          const stream = team.stream.toLowerCase();
          if (streamCounts.hasOwnProperty(stream)) {
            // Count unique roles in this team
            const teamRoles = new Set();
            team.personnel.forEach(person => {
              if (person && person.role) {
                teamRoles.add(person.role);
              }
            });
            streamCounts[stream] += teamRoles.size;
          }
        }
      });
    }
    
    new Chart(ctx, {
      type: 'bar',
      data: {
        labels: ['BBV', 'ADD', 'ARB', 'Shared'],
        datasets: [{
          label: 'Number of Roles',
          data: [streamCounts.bbv, streamCounts.add, streamCounts.arb, streamCounts.shared],
          backgroundColor: [
            '#00518A', // BBV blue
            '#CC2030', // ADD red
            '#4F46E5', // ARB purple
            '#232323'  // Shared black
          ],
          borderColor: [
            '#00518A',
            '#CC2030',
            '#4F46E5',
            '#232323'
          ],
          borderWidth: 1
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          y: {
            beginAtZero: true
          }
        }
      }
    });
  },
  
  // Show role details modal
  showRoleDetails(roleName) {
    // Get all personnel with this role
    const personnel = [];
    
    if (window.appData && window.appData.teams) {
      window.appData.teams.forEach(team => {
        if (team && team.personnel) {
          team.personnel.forEach(person => {
            if (person && person.role === roleName) {
              personnel.push({
                ...person,
                team: team.name,
                stream: team.stream
              });
            }
          });
        }
      });
    }
    
    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <div class="flex justify-between items-center mb-4">
          <h2 class="text-xl font-semibold">${this.sanitizeHtml(roleName)}</h2>
          <button class="btn-icon" onclick="ui.hideModal()">
            <i class="fas fa-times"></i>
          </button>
        </div>
        
        <h3 class="font-medium text-lg mb-2">Personnel (${personnel.length})</h3>
        <div class="mb-4">
          ${personnel.length > 0 ? `
            <div class="bg-gray-50 rounded overflow-hidden">
              <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-100">
                  <tr>
                    <th scope="col" class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Name</th>
                    <th scope="col" class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Team</th>
                    <th scope="col" class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Stream</th>
                  </tr>
                </thead>
                <tbody>
                  ${personnel.map(person => `
                    <tr>
                      <td class="px-4 py-2 whitespace-nowrap">${this.sanitizeHtml(person.name)}</td>
                      <td class="px-4 py-2 whitespace-nowrap">${this.sanitizeHtml(person.team)}</td>
                      <td class="px-4 py-2 whitespace-nowrap">
                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-${person.stream}-100 text-${person.stream}-800">
                          ${person.stream.toUpperCase()}
                        </span>
                      </td>
                    </tr>
                  `).join('')}
                </tbody>
              </table>
            </div>
          ` : '<p class="text-gray-500">No personnel found with this role</p>'}
        </div>
        
        <div class="flex justify-end">
          <button class="btn-secondary" onclick="ui.hideModal()">Close</button>
        </div>
      </div>
    `;
    
    document.body.appendChild(modal);
  },
  
  // Export role matrix as CSV
  exportRoleMatrix() {
    // Get all roles
    const allRoles = new Map();
    
    if (window.appData && window.appData.teams) {
      window.appData.teams.forEach(team => {
        if (team && team.personnel) {
          team.personnel.forEach(person => {
            if (person && person.role) {
              if (allRoles.has(person.role)) {
                const roleData = allRoles.get(person.role);
                roleData.count++;
                if (!roleData.streams.includes(team.stream)) {
                  roleData.streams.push(team.stream);
                }
              } else {
                allRoles.set(person.role, {
                  name: person.role,
                  description: '',
                  streams: [team.stream],
                  count: 1
                });
              }
            }
          });
        }
      });
    }
    
    // Convert to array
    const roles = Array.from(allRoles.values());
    
    // Create CSV content
    let csvContent = "data:text/csv;charset=utf-8,";
    csvContent += "Role,Description,Streams,Personnel Count\n";
    
    roles.forEach(role => {
      csvContent += `"${role.name}","${role.description}","${role.streams.join(', ')}",${role.count}\n`;
    });
    
    // Create download link
    const encodedUri = encodeURI(csvContent);
    const link = document.createElement("a");
    link.setAttribute("href", encodedUri);
    link.setAttribute("download", "role_matrix.csv");
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
    this.showToast('Role matrix exported successfully', 'success');
  },
  
  // Add new role modal
  showAddRoleModal() {
    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <h2 class="text-xl font-semibold mb-4">Add New Role</h2>
        <form id="addRoleForm">
          <div class="form-group">
            <label for="roleName">Role Name</label>
            <input type="text" id="roleName" class="form-input" required>
          </div>
          <div class="form-group">
            <label for="roleDescription">Description</label>
            <textarea id="roleDescription" class="form-textarea" rows="3"></textarea>
          </div>
          <div class="form-group">
            <label for="roleStream">Stream</label>
            <select id="roleStream" class="form-select" required>
              <option value="bbv">BBV</option>
              <option value="add">ADD</option>
              <option value="arb">ARB</option>
              <option value="shared">Shared</option>
            </select>
          </div>
          <div class="flex justify-end space-x-2 mt-4">
            <button type="button" class="btn-secondary" onclick="ui.hideModal()">Cancel</button>
            <button type="submit" class="btn-primary">Add Role</button>
          </div>
        </form>
      </div>
    `;
    document.body.appendChild(modal);
    
    // Handle form submission
    document.getElementById('addRoleForm').addEventListener('submit', e => {
      e.preventDefault();
      
      // Get form values
      const roleName = document.getElementById('roleName').value;
      const roleDescription = document.getElementById('roleDescription').value;
      const roleStream = document.getElementById('roleStream').value;
      
      // Create role object
      const role = {
        name: roleName,
        description: roleDescription,
        stream: roleStream
      };
      
      // Add to roles array if it doesn't exist
      if (!window.appData.roles) window.appData.roles = [];
      window.appData.roles.push(role);
      
      // Save changes
      this.saveChanges();
      
      // Hide modal
      this.hideModal();
      
      // Show success message
      this.showToast('Role added successfully', 'success');
      
      // Reload tab
      this.loadRoleMatrix();
    });
  },
  
  // Load skills matrix
  loadSkillsMatrix() {
    try {
      console.log('Loading skills matrix content...');
      
      const tabContent = document.getElementById('tabContent');
      if (!tabContent) {
        console.error('Tab content element not found');
        return;
      }
      
      // Check if already loading
      if (tabContent.dataset.loading === 'true') {
        console.log('Skills matrix already loading, skipping duplicate load');
        return;
      }
      
      // Set loading state
      tabContent.dataset.loading = 'true';
      
      // Create empty arrays if they don't exist
      if (!window.appData.skills) window.appData.skills = [];
      
      // Build a list of all skills from personnel
      const allSkills = new Set();
      const personnelWithSkills = [];
      
      if (window.appData && window.appData.teams) {
        window.appData.teams.forEach(team => {
          if (team && team.personnel) {
            team.personnel.forEach(person => {
              if (person) {
                // If person has skills property, add all skill keys to the set
                if (person.skills) {
                  Object.keys(person.skills).forEach(skill => allSkills.add(skill));
                }
                
                // Add to personnel list
                personnelWithSkills.push({
                  ...person,
                  team: team.name,
                  stream: team.stream,
                  // Ensure skills property exists
                  skills: person.skills || {}
                });
              }
            });
          }
        });
      }
      
      tabContent.innerHTML = `
        <div class="p-4">
          <div class="flex justify-between items-center mb-6">
            <h2 class="text-2xl font-bold">Skills Matrix</h2>
            <div class="flex space-x-4">
              <button class="btn-secondary" id="exportSkillsMatrixBtn">
                <i class="fas fa-download mr-2"></i> Export
              </button>
              <button class="btn-primary" id="addSkillBtn">
                <i class="fas fa-plus mr-2"></i> Add Skill
              </button>
            </div>
          </div>
          
          <div class="bg-white rounded-lg shadow p-4 mb-6">
            <div class="flex space-x-4">
              <div class="flex-grow">
                <input type="text" id="skillsSearch" class="form-input w-full" placeholder="Search personnel or skills...">
              </div>
              <div>
                <select id="skillsStreamFilter" class="form-select">
                  <option value="all">All Streams</option>
                  <option value="bbv">BBV</option>
                  <option value="add">ADD</option>
                  <option value="arb">ARB</option>
                  <option value="shared">Shared</option>
                </select>
              </div>
            </div>
          </div>

          <div class="bg-white rounded-lg shadow overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200" id="skillsMatrixTable">
              <thead class="bg-gray-50">
                <tr>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider sticky left-0 bg-gray-50">Person</th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider sticky left-32 bg-gray-50">Team</th>
                  ${Array.from(allSkills).map(skill => `
                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">${this.sanitizeHtml(skill)}</th>
                  `).join('')}
                </tr>
              </thead>
              <tbody class="bg-white divide-y divide-gray-200">
                ${personnelWithSkills.map(person => `
                  <tr data-stream="${person.stream}">
                    <td class="px-6 py-4 whitespace-nowrap font-medium sticky left-0 bg-white">${this.sanitizeHtml(person.name)}</td>
                    <td class="px-6 py-4 whitespace-nowrap sticky left-32 bg-white">
                      <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-${person.stream}-100 text-${person.stream}-800">
                        ${this.sanitizeHtml(person.team)}
                      </span>
                    </td>
                    ${Array.from(allSkills).map(skill => {
                      const skillLevel = person.skills[skill];
                      return `
                        <td class="px-6 py-4 whitespace-nowrap">
                          ${skillLevel ? this.renderSkillLevel(skillLevel) : ''}
                        </td>
                      `;
                    }).join('')}
                  </tr>
                `).join('')}
              </tbody>
            </table>
          </div>

          <div class="mt-8">
            <h3 class="text-xl font-semibold mb-4">Skill Distribution</h3>
            <div class="bg-white rounded-lg shadow p-4" style="height: 300px;">
              <canvas id="skillDistributionChart"></canvas>
            </div>
          </div>
        </div>
      `;
      
      // Add event listeners
      document.getElementById('addSkillBtn')?.addEventListener('click', () => this.showAddSkillModal());
      document.getElementById('exportSkillsMatrixBtn')?.addEventListener('click', () => this.exportSkillsMatrix());
      document.getElementById('skillsSearch')?.addEventListener('input', this.filterSkillsMatrix);
      document.getElementById('skillsStreamFilter')?.addEventListener('change', this.filterSkillsMatrix);
      
      // Initialize charts
      this.initializeSkillDistributionChart(allSkills, personnelWithSkills);
      
      // Reset loading state
      tabContent.dataset.loading = 'false';
    } catch (error) {
      console.error('Error loading skills matrix:', error);
      this.showToast('Error loading skills matrix', 'error');
      
      const tabContent = document.getElementById('tabContent');
      if (tabContent) {
        tabContent.innerHTML = `
          <div class="p-8 text-center">
            <div class="text-red-500 text-xl mb-4">
              <i class="fas fa-exclamation-triangle mr-2"></i> 
              Error Loading Skills Matrix
            </div>
            <p class="mb-4">${error.message || 'An unknown error occurred'}</p>
            <button class="px-4 py-2 bg-blue-600 text-white rounded" onclick="ui.switchTab('skillsmatrix')">
              <i class="fas fa-sync-alt mr-2"></i> Try Again
            </button>
          </div>
        `;
        
        // Reset loading state
        tabContent.dataset.loading = 'false';
      }
    }
  },
  
  // Render skill level indicator
  renderSkillLevel(level) {
    // Convert level to a number between 1-5 if it's not already
    let numLevel = level;
    if (typeof level === 'string') {
      // Try to parse as a number
      const parsed = parseInt(level);
      if (!isNaN(parsed)) {
        numLevel = parsed;
      } else {
        // Map string levels to numbers
        const levelMap = {
          'beginner': 1,
          'basic': 2,
          'intermediate': 3,
          'advanced': 4,
          'expert': 5
        };
        numLevel = levelMap[level.toLowerCase()] || 3;
      }
    }
    
    // Ensure level is between 1-5
    numLevel = Math.min(5, Math.max(1, numLevel));
    
    // Color based on level
    const colors = [
      '',
      'bg-gray-200', // Level 1
      'bg-blue-200', // Level 2
      'bg-green-200', // Level 3
      'bg-yellow-200', // Level 4
      'bg-red-200' // Level 5
    ];
    
    // Text based on level
    const texts = [
      '',
      'Beginner',
      'Basic',
      'Intermediate',
      'Advanced',
      'Expert'
    ];
    
    // Create dots to represent skill level
    let dots = '';
    for (let i = 1; i <= 5; i++) {
      dots += `<div class="h-2 w-2 rounded-full ${i <= numLevel ? 'bg-blue-600' : 'bg-gray-200'} mr-0.5"></div>`;
    }
    
    return `
      <div class="flex flex-col">
        <div class="flex items-center">
          ${dots}
        </div>
        <div class="text-xs text-gray-500 mt-1">${texts[numLevel]}</div>
      </div>
    `;
  },
  
  // Initialize skill distribution chart
  initializeSkillDistributionChart(allSkills, personnel) {
    const ctx = document.getElementById('skillDistributionChart');
    if (!ctx || typeof Chart === 'undefined' || allSkills.size === 0) return;
    
    // Count how many people have each skill
    const skillCounts = {};
    Array.from(allSkills).forEach(skill => {
      skillCounts[skill] = 0;
    });
    
    // Count skills
    personnel.forEach(person => {
      if (person.skills) {
        Object.keys(person.skills).forEach(skill => {
          if (skillCounts.hasOwnProperty(skill)) {
            skillCounts[skill]++;
          }
        });
      }
    });
    
    // Sort skills by count (descending)
    const sortedSkills = Object.keys(skillCounts).sort((a, b) => skillCounts[b] - skillCounts[a]);
    
    // Get top 10 skills
    const topSkills = sortedSkills.slice(0, 10);
    
    new Chart(ctx, {
      type: 'bar',
      data: {
        labels: topSkills,
        datasets: [{
          label: 'Number of Personnel',
          data: topSkills.map(skill => skillCounts[skill]),
          backgroundColor: '#3b82f6',
          borderColor: '#2563eb',
          borderWidth: 1
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          y: {
            beginAtZero: true
          }
        }
      }
    });
  },
  
  // Filter skills matrix
  filterSkillsMatrix() {
    const searchInput = document.getElementById('skillsSearch').value.toLowerCase();
    const streamFilter = document.getElementById('skillsStreamFilter').value;
    
    const table = document.getElementById('skillsMatrixTable');
    if (!table) return;
    
    const rows = table.querySelectorAll('tbody tr');
    
    rows.forEach(row => {
      const stream = row.getAttribute('data-stream');
      const text = row.textContent.toLowerCase();
      
      // Check if row matches search and stream filter
      const matchesSearch = searchInput === '' || text.includes(searchInput);
      const matchesStream = streamFilter === 'all' || stream === streamFilter;
      
      // Show/hide row based on filters
      row.style.display = matchesSearch && matchesStream ? '' : 'none';
    });
  },
  
  // Export skills matrix as CSV
  exportSkillsMatrix() {
    // Build a list of all skills and personnel
    const allSkills = new Set();
    const personnelWithSkills = [];
    
    if (window.appData && window.appData.teams) {
      window.appData.teams.forEach(team => {
        if (team && team.personnel) {
          team.personnel.forEach(person => {
            if (person) {
              // If person has skills property, add all skill keys to the set
              if (person.skills) {
                Object.keys(person.skills).forEach(skill => allSkills.add(skill));
              }
              
              // Add to personnel list
              personnelWithSkills.push({
                ...person,
                team: team.name,
                stream: team.stream,
                // Ensure skills property exists
                skills: person.skills || {}
              });
            }
          });
        }
      });
    }
    
    // Create CSV content
    let csvContent = "data:text/csv;charset=utf-8,";
    
    // Add header row
    csvContent += `"Name","Team","Stream"${Array.from(allSkills).map(skill => `,"${skill}"`).join('')}\n`;
    
    // Add rows for each person
    personnelWithSkills.forEach(person => {
      csvContent += `"${person.name}","${person.team}","${person.stream}"`;
      
      // Add skill levels
      Array.from(allSkills).forEach(skill => {
        const level = person.skills[skill] || '';
        csvContent += `,"${level}"`;
      });
      
      csvContent += '\n';
    });
    
    // Create download link
    const encodedUri = encodeURI(csvContent);
    const link = document.createElement("a");
    link.setAttribute("href", encodedUri);
    link.setAttribute("download", "skills_matrix.csv");
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
    this.showToast('Skills matrix exported successfully', 'success');
  },
  
// UI Components and Interactions
const ui = {
  // Initialize the application
  init() {
    try {
      console.log('Initializing UI...');
      
      // Create a global variable for handling charts
      window.chartFailed = false;
      if (typeof Chart === 'undefined') {
        console.warn('Chart.js is not loaded, charts will be disabled');
        window.chartFailed = true;
      }
      
      // Use existing config or set up default
      window.config = window.config || {
        tabs: [
          { id: 'dashboard', label: 'Dashboard', icon: 'fa-chart-line' },
          { id: 'teams', label: 'Teams', icon: 'fa-users' },
          { id: 'personnel', label: 'Personnel', icon: 'fa-user' },
          { id: 'documentation', label: 'Documentation', icon: 'fa-file-alt' },
          { id: 'planning', label: 'Planning', icon: 'fa-project-diagram' },
          { id: 'orgchart', label: 'Org Chart', icon: 'fa-sitemap' },
          { id: 'rolematrix', label: 'Role Matrix', icon: 'fa-th' },
          { id: 'skillsmatrix', label: 'Skills Matrix', icon: 'fa-cubes' },
          { id: 'racimatrix', label: 'RACI Matrix', icon: 'fa-list-alt' }
        ],
        colors: {
          bbv: '#00518A',     // BBV blue
          add: '#CC2030',     // ADD red
          arb: '#4F46E5',     // ARB purple
          shared: '#232323',  // Shared black
          root: '#333333'     // Root color for org chart
        }
      };
      
      // Use the appData from app.js rather than initializing redundant data
      if (!window.appData) {
        console.error('appData not initialized - this should be done in app.js');
        window.appData = {}; // Create empty object as fallback
      }
      
      // Set up tabs first - do this before other setup
      if (typeof this.setupTabs === 'function') {
        try {
          this.setupTabs();
        } catch (error) {
          console.error('Error in setupTabs:', error);
          
          // Create fallback tabs directly
          this.createFallbackTabs();
        }
      } else {
        console.error('setupTabs method not found');
        throw new Error('Required UI methods are missing');
      }
      
      // Set up login state
      this.updateLoginState();
      
      // Hide login button completely
      const loginBtn = document.getElementById('loginBtn');
      if (loginBtn) {
        loginBtn.style.display = 'none';
      }
      
      // Set up scroll-to-top button
      this.setupScrollToTop();
      
      // Set up save changes button
      this.setupSaveChangesButton();
      
      console.log('UI initialization complete');
    } catch (error) {
      console.error('Critical error in UI initialization:', error);
      // Attempt recovery through fix-critical.js
    }
  },
  
  // Create fallback tabs when setupTabs fails
  createFallbackTabs() {
    console.warn('Setting up fallback tabs due to setupTabs error');
    const tabList = document.getElementById('tabList');
    if (tabList) {
      // Make sure we have the config with all tabs
      const tabsConfig = window.config && window.config.tabs ? window.config.tabs : [
        { id: 'dashboard', label: 'Dashboard', icon: 'fa-chart-line' },
        { id: 'teams', label: 'Teams', icon: 'fa-users' },
        { id: 'personnel', label: 'Personnel', icon: 'fa-user' },
        { id: 'documentation', label: 'Documentation', icon: 'fa-file-alt' },
        { id: 'planning', label: 'Planning', icon: 'fa-project-diagram' },
        { id: 'orgchart', label: 'Org Chart', icon: 'fa-sitemap' },
        { id: 'rolematrix', label: 'Role Matrix', icon: 'fa-th' },
        { id: 'skillsmatrix', label: 'Skills Matrix', icon: 'fa-cubes' },
        { id: 'racimatrix', label: 'RACI Matrix', icon: 'fa-list-alt' }
      ];
      
      // Create tab buttons
      let tabsHTML = '';
      tabsConfig.forEach((tab, index) => {
        tabsHTML += `
          <button class="tab-btn ${index === 0 ? 'active' : ''}" 
                id="tab-${tab.id}" 
                data-tab="${tab.id}" 
                role="tab" 
                aria-selected="${index === 0 ? 'true' : 'false'}" 
                aria-controls="panel-${tab.id}">
            <i class="fas ${tab.icon}" aria-hidden="true"></i>
            <span>${tab.label}</span>
          </button>
        `;
      });
      tabList.innerHTML = tabsHTML;
      
      // Add basic click handlers
      const btns = tabList.querySelectorAll('.tab-btn');
      btns.forEach(btn => {
        btn.addEventListener('click', () => {
          const tabId = btn.getAttribute('data-tab');
          // Update active state on all buttons
          btns.forEach(b => {
            b.classList.toggle('active', b === btn);
            b.setAttribute('aria-selected', b === btn ? 'true' : 'false');
          });
          // Try to switch tab
          this.switchTab(tabId);
        });
      });
    }
  },

  // Set up tabs
  setupTabs() {
    const tabList = document.getElementById('tabList');
    if (!tabList) return;

    // Create tab buttons
    tabList.innerHTML = config.tabs.map((tab, index) => `
      <button class="tab-btn" 
             id="tab-${tab.id}" 
             data-tab="${tab.id}" 
             role="tab" 
             aria-selected="${index === 0 ? 'true' : 'false'}" 
             aria-controls="panel-${tab.id}">
        <i class="fas ${tab.icon}" aria-hidden="true"></i>
        <span>${tab.label}</span>
      </button>
    `).join('');

    // Add click handlers
    const tabButtons = tabList.querySelectorAll('.tab-btn');
    tabButtons.forEach(button => {
      button.addEventListener('click', () => {
        const tabId = button.getAttribute('data-tab');
        this.switchTab(tabId);
      });
      
      // Add keyboard navigation for accessibility
      button.addEventListener('keydown', (e) => {
        const tabs = Array.from(tabList.querySelectorAll('.tab-btn'));
        const index = tabs.indexOf(button);
        
        // Handle arrow key navigation
        if (e.key === 'ArrowRight' || e.key === 'ArrowDown') {
          e.preventDefault();
          const nextIndex = (index + 1) % tabs.length;
          tabs[nextIndex].focus();
        } else if (e.key === 'ArrowLeft' || e.key === 'ArrowUp') {
          e.preventDefault();
          const prevIndex = (index - 1 + tabs.length) % tabs.length;
          tabs[prevIndex].focus();
        } else if (e.key === 'Home') {
          e.preventDefault();
          tabs[0].focus();
        } else if (e.key === 'End') {
          e.preventDefault();
          tabs[tabs.length - 1].focus();
        }
      });
    });
  },

  // Switch to a different tab
  switchTab(tabId) {
    try {
      console.log(`Switching to tab: ${tabId}`);
      
      // Validate tabId to prevent security issues and errors
      if (!tabId || typeof tabId !== 'string') {
        console.error('Invalid tabId:', tabId);
        this.showToast('Invalid tab selection', 'error');
        return;
      }
      
      // Sanitize tabId by using a whitelist approach instead of regex
      const validTabs = (window.config && window.config.tabs) ? 
        window.config.tabs.map(tab => tab.id) : 
        ['dashboard', 'teams', 'personnel', 'documentation', 'planning', 'orgchart', 'rolematrix', 'skillsmatrix', 'analytics', 'racimatrix'];
      
      if (!validTabs.includes(tabId)) {
        console.error(`Invalid tabId: ${tabId} not in allowed list`);
        this.showToast('Invalid tab selection', 'error');
        return;
      }
      
      // Get the tab content element
      const tabContent = document.getElementById('tabContent');
      if (!tabContent) {
        console.error('Tab content element not found');
        this.showToast('Error loading content: Tab container not found', 'error');
        return;
      }
      
      // Update active tab buttons
      this.updateActiveTab(tabId);
      
      // Update application state
      if (window.appData && window.appData.state) {
        window.appData.state.currentTab = tabId;
      }
      
      // Show loading indicator
      tabContent.innerHTML = `
        <div class="tab-loading">
          <div class="loader-spinner"></div>
          <p>Loading ${this.sanitizeHtml(tabId)} content...</p>
        </div>
      `;
      
      // Use a switch statement to call the appropriate loading function
      switch (tabId) {
        case 'dashboard':
          this.loadDashboard();
          break;
        case 'teams':
          this.loadTeams();
          break;
        case 'personnel':
          this.loadPersonnel();
          break;
        case 'documentation':
          this.loadDocumentation();
          break;
        case 'planning':
          this.loadPlanning();
          break;
        case 'orgchart':
          this.loadOrgChart();
          break;
        case 'rolematrix':
          this.loadRoleMatrix();
          break;
        case 'skillsmatrix':
          this.loadSkillsMatrix();
          break;
        case 'analytics':
          this.loadAnalyticsDashboard();
          break;
        case 'racimatrix':
          this.loadRaciMatrix();
          break;
        default:
          console.error(`No loader found for tab: ${tabId}`);
          this.showToast(`Error: Content for ${this.sanitizeHtml(tabId)} not available`, 'error');
      }
    } catch (error) {
      console.error('Error switching tabs:', error);
      this.showToast('An error occurred while switching tabs', 'error');
      
      // Try recovery options
      const tabContent = document.getElementById('tabContent');
      if (tabContent) {
        tabContent.innerHTML = `
          <div class="error-container">
            <h2>Error Loading Content</h2>
            <p>There was a problem loading the requested content.</p>
            <button class="btn btn-primary" onclick="window.ui.switchTab('dashboard')">
              Return to Dashboard
            </button>
          </div>
        `;
      }
    }
  },
  
  // Update the active tab in the UI
  updateActiveTab(tabId) {
    const tabButtons = document.querySelectorAll('.tab-btn');
    tabButtons.forEach(button => {
      const buttonTabId = button.getAttribute('data-tab');
      button.classList.toggle('active', buttonTabId === tabId);
      button.setAttribute('aria-selected', buttonTabId === tabId ? 'true' : 'false');
    });
  },
  
  // Sanitize HTML to prevent XSS attacks
  sanitizeHtml(str) {
    if (!str || typeof str !== 'string') return '';
    return String(str)
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&#39;');
  },
  
  // Safe HTML insertion helper
  setElementHtml(element, html) {
    if (!element) return;
    
    try {
      // For simple strings, use textContent instead of innerHTML
      if (!html.includes('<')) {
        element.textContent = html;
        return;
      }
      
      // For HTML content, use DOMPurify if available
      if (window.DOMPurify) {
        element.innerHTML = window.DOMPurify.sanitize(html);
      } else {
        // Basic fallback - only safe for trusted content
        element.innerHTML = html;
      }
    } catch (error) {
      console.error('Error setting element HTML:', error);
      element.textContent = 'Error displaying content';
    }
  },

  // Set up scroll-to-top button
  setupScrollToTop() {
    const scrollTopBtn = document.getElementById('scrollTopBtn');
    if (scrollTopBtn) {
      window.addEventListener('scroll', () => {
        scrollTopBtn.classList.toggle('visible', window.pageYOffset > 300);
      });
      
      scrollTopBtn.addEventListener('click', () => {
        window.scrollTo({ top: 0, behavior: 'smooth' });
      });
    }
  },
  
  // Set up save changes button
  setupSaveChangesButton() {
    const saveChangesBtn = document.getElementById('saveChangesBtn');
    if (saveChangesBtn) {
      saveChangesBtn.addEventListener('click', () => this.saveChanges());
    }
  },

  // Save changes to localStorage
  saveChanges() {
    try {
      localStorage.setItem('appData', JSON.stringify(window.appData));
      this.showToast('Changes saved successfully', 'success');
    } catch (error) {
      console.error('Error saving changes:', error);
      this.showToast('Error saving changes', 'error');
    }
  },

  // Display toast notification
  showToast(message, type = 'info') {
    // Validate inputs
    if (!message || typeof message !== 'string') {
      console.error('Invalid toast message:', message);
      return;
    }
    
    // Sanitize message to prevent XSS
    const sanitizedMessage = this.sanitizeHtml(message);
    
    // Validate type and set default if invalid
    const validTypes = ['info', 'success', 'warning', 'error'];
    if (!validTypes.includes(type)) {
      console.warn(`Invalid toast type "${type}", defaulting to "info"`);
      type = 'info';
    }
    
    // Get toast container or create it if it doesn't exist
    let toastContainer = document.getElementById('toastContainer');
    if (!toastContainer) {
      toastContainer = document.createElement('div');
      toastContainer.id = 'toastContainer';
      toastContainer.className = 'toast-container';
      document.body.appendChild(toastContainer);
    }
    
    // Create toast element with safe content
    const toast = document.createElement('div');
    toast.className = `toast toast-${type}`;
    
    // Set icon based on type
    let icon = '';
    switch (type) {
      case 'success':
        icon = '<i class="fas fa-check-circle"></i>';
        break;
      case 'warning':
        icon = '<i class="fas fa-exclamation-triangle"></i>';
        break;
      case 'error':
        icon = '<i class="fas fa-times-circle"></i>';
        break;
      default:
        icon = '<i class="fas fa-info-circle"></i>';
    }
    
    // Safely set toast content
    toast.innerHTML = `
      <div class="toast-content">
        <div class="toast-icon">${icon}</div>
        <div class="toast-message">${sanitizedMessage}</div>
        <button class="toast-close" aria-label="Close notification">×</button>
      </div>
    `;
    
    // Add close functionality
    const closeButton = toast.querySelector('.toast-close');
    if (closeButton) {
      closeButton.addEventListener('click', () => {
        toast.classList.add('toast-hiding');
        setTimeout(() => {
          if (toast.parentNode) {
            toast.parentNode.removeChild(toast);
          }
        }, 300);
      });
    }
    
    // Add to container
    toastContainer.appendChild(toast);
    
    // Auto-dismiss after delay
    const displayTime = type === 'error' ? 8000 : 4000;
    setTimeout(() => {
      if (toast.parentNode) {
        toast.classList.add('toast-hiding');
        setTimeout(() => {
          if (toast.parentNode) {
            toast.parentNode.removeChild(toast);
          }
        }, 300);
      }
    }, displayTime);
  },

  // Calculate statistics for dashboard
  calculateStats() {
    try {
      const stats = {
        bbv: { personnel: 0, teams: 0 },
        add: { personnel: 0, teams: 0 },
        arb: { personnel: 0, teams: 0 },
        shared: { personnel: 0, teams: 0 }
      };

      // Make sure window.appData and teams exist
      if (!window.appData || !window.appData.teams || !Array.isArray(window.appData.teams)) {
        console.warn('No appData or teams available for statistics');
        return stats;
      }

      // Count personnel and teams by stream
      window.appData.teams.forEach(team => {
        if (!team) return;
        
        const stream = (team.stream || 'unknown').toLowerCase();
        if (stats[stream]) {
          stats[stream].teams++;
          stats[stream].personnel += Array.isArray(team.personnel) ? team.personnel.length : 0;
        }
      });

      return stats;
    } catch (error) {
      console.error('Error calculating stats:', error);
      return {
        bbv: { personnel: 0, teams: 0 },
        add: { personnel: 0, teams: 0 },
        arb: { personnel: 0, teams: 0 },
        shared: { personnel: 0, teams: 0 }
      };
    }
  },

  // Initialize charts for dashboard
  initializeCharts() {
    try {
      // Check if Chart is loaded
      if (typeof Chart === 'undefined' || window.chartFailed) {
        console.warn('Chart.js is not loaded or initialization failed');
        this.showChartPlaceholders();
        return;
      }

      // Personnel Distribution Chart
      const personnelCtx = document.getElementById('personnelChart');
      if (personnelCtx) {
        try {
          // Get statistics for personnel distribution with safe access
          const stats = this.calculateStats() || {
            bbv: { personnel: 0 },
            add: { personnel: 0 },
            arb: { personnel: 0 },
            shared: { personnel: 0 }
          };
          
          // Create chart configuration
          const chartConfig = {
            type: 'doughnut',
            data: {
              labels: ['BBV', 'ADD', 'ARB', 'Shared'],
              datasets: [{
                data: [
                  stats.bbv.personnel || 0,
                  stats.add.personnel || 0,
                  stats.arb.personnel || 0,
                  stats.shared.personnel || 0
                ],
                backgroundColor: [
                  '#00518A', // BBV blue
                  '#CC2030', // ADD red
                  '#4F46E5', // ARB purple
                  '#232323'  // Shared black
                ]
              }]
            },
            options: {
              responsive: true,
              maintainAspectRatio: false,
              plugins: {
                legend: {
                  position: 'bottom'
                },
                tooltip: {
                  callbacks: {
                    label: function(context) {
                      const label = context.label || '';
                      const value = context.raw || 0;
                      const total = context.dataset.data.reduce((a, b) => a + b, 0);
                      const percentage = total > 0 ? Math.round((value / total) * 100) : 0;
                      return `${label}: ${value} (${percentage}%)`;
                    }
                  }
                }
              }
            }
          };
          
          // Create new chart with error handling
          try {
            new Chart(personnelCtx, chartConfig);
            console.log('Personnel chart created successfully');
          } catch (chartError) {
            console.error('Failed to create personnel chart:', chartError);
            this.showChartErrorPlaceholder(personnelCtx, 'Personnel Distribution');
          }
        } catch (error) {
          console.error('Error creating personnel chart:', error);
          this.showChartErrorPlaceholder(personnelCtx, 'Personnel Distribution');
        }
      }

      // Team Performance Chart
      const performanceCtx = document.getElementById('performanceChart');
      if (performanceCtx) {
        try {
          // Make sure we have teams data
          if (!window.appData || !window.appData.teams || window.appData.teams.length === 0) {
            this.showChartErrorPlaceholder(performanceCtx, 'Team Performance');
            return;
          }
          
          // Create chart configuration with safe access
          const chartConfig = {
            type: 'bar',
            data: {
              labels: window.appData.teams.map(team => team.name || 'Unnamed Team'),
              datasets: [{
                label: 'Performance Score',
                data: window.appData.teams.map(team => team.performance || 0),
                backgroundColor: window.appData.teams.map(team => {
                  const stream = (team.stream || 'unknown').toLowerCase();
                  return {
                    bbv: '#00518A',
                    add: '#CC2030',
                    arb: '#4F46E5',
                    shared: '#232323'
                  }[stream] || '#666666';
                })
              }]
            },
            options: {
              responsive: true,
              maintainAspectRatio: false,
              scales: {
                y: {
                  beginAtZero: true,
                  max: 100,
                  title: {
                    display: true,
                    text: 'Performance (%)'
                  }
                },
                x: {
                  title: {
                    display: true,
                    text: 'Teams'
                  }
                }
              },
              plugins: {
                legend: {
                  display: false
                }
              }
            }
          };
          
          // Create new chart with error handling
          try {
            new Chart(performanceCtx, chartConfig);
            console.log('Performance chart created successfully');
          } catch (chartError) {
            console.error('Failed to create performance chart:', chartError);
            this.showChartErrorPlaceholder(performanceCtx, 'Team Performance');
          }
        } catch (error) {
          console.error('Error creating performance chart:', error);
          this.showChartErrorPlaceholder(performanceCtx, 'Team Performance');
        }
      }
    } catch (error) {
      console.error('Error in initializeCharts:', error);
      this.showChartPlaceholders();
    }
  },
  
  // Show placeholders when charts can't be loaded
  showChartPlaceholders() {
    const chartElements = ['personnelChart', 'performanceChart'];
    chartElements.forEach(id => {
      const element = document.getElementById(id);
      if (element) {
        this.showChartErrorPlaceholder(element, id === 'personnelChart' ? 'Personnel Distribution' : 'Team Performance');
      }
    });
  },
  
  // Show a specific error placeholder for a chart
  showChartErrorPlaceholder(element, title) {
    // Save the original content in case we need to restore it
    if (!element.dataset.originalHtml) {
      element.dataset.originalHtml = element.innerHTML;
    }
    
    element.innerHTML = `
      <div class="flex flex-col items-center justify-center h-full text-center p-4">
        <div class="text-red-500 mb-2">
          <i class="fas fa-chart-bar text-3xl"></i>
        </div>
        <h3 class="font-semibold text-gray-600">${title}</h3>
        <p class="text-sm text-gray-500 mt-2">Chart could not be loaded</p>
      </div>
    `;
  },

  // Render recent activities
  renderRecentActivities() {
    try {
      if (!window.appData || !window.appData.activities || !Array.isArray(window.appData.activities)) {
        return '<p>No recent activities</p>';
      }
      
      const activities = window.appData.activities.slice(0, 5); // Show last 5 activities
      
      if (activities.length === 0) {
        return '<p>No recent activities</p>';
      }

      return activities.map(activity => {
        if (!activity) return '';
        
        const type = activity.type || 'update';
        const description = activity.description || 'Activity';
        const team = activity.team || '';
        const date = activity.date || new Date().toISOString();
        
        return `
          <div class="activity-item p-3 border-b border-gray-100 last:border-0">
            <div class="flex items-center space-x-3">
              <div class="activity-icon ${type}">
                <i class="fas ${this.getActivityIcon(type)}"></i>
              </div>
              <div>
                <p class="text-sm font-medium">${description}</p>
                <p class="text-xs text-gray-500">
                  ${team} • ${this.formatDate(date)}
                </p>
              </div>
            </div>
          </div>
        `;
      }).join('');
    } catch (error) {
      console.error('Error rendering activities:', error);
      return '<p>Error loading activities</p>';
    }
  },

  // Render upcoming tasks
  renderUpcomingTasks() {
    try {
      if (!window.appData || !window.appData.tasks || !Array.isArray(window.appData.tasks)) {
        return '<p>No upcoming tasks</p>';
      }
      
      // Sort tasks by due date and show the first 5
      const tasks = [...window.appData.tasks]
        .filter(task => task) // Filter out null tasks
        .sort((a, b) => {
          try {
            return new Date(a.dueDate || 0) - new Date(b.dueDate || 0);
          } catch (err) {
            return 0;
          }
        })
        .slice(0, 5);
      
      if (tasks.length === 0) {
        return '<p>No upcoming tasks</p>';
      }

      return tasks.map(task => {
        try {
          const progress = task.progress || 0;
          const title = task.title || 'Unnamed Task';
          const dueDate = task.dueDate || new Date().toISOString();
          const assignedTo = task.assignedTo || 'Unassigned';
          const priority = task.priority || 'Normal';
          
          return `
            <div class="task-item p-3 border-b border-gray-100 last:border-0">
              <div class="flex items-center justify-between">
                <div>
                  <p class="text-sm font-medium">${title}</p>
                  <p class="text-xs text-gray-500">
                    Due: ${this.formatDate(dueDate)} • 
                    Assigned to: ${assignedTo} • 
                    Priority: ${priority}
                  </p>
                </div>
                <div class="flex items-center space-x-2">
                  <div class="w-20 bg-gray-200 rounded-full h-2">
                    <div class="bg-blue-600 h-2 rounded-full" style="width: ${progress}%"></div>
                  </div>
                  <span class="text-xs text-gray-500">${progress}%</span>
                </div>
              </div>
            </div>
          `;
        } catch (taskError) {
          console.error('Error rendering task:', taskError);
          return '';
        }
      }).join('');
    } catch (error) {
      console.error('Error rendering tasks:', error);
      return '<p>Error loading tasks</p>';
    }
  },

  // Get activity icon based on type
  getActivityIcon(type) {
    const icons = {
      update: 'fa-edit',
      create: 'fa-plus',
      delete: 'fa-trash',
      comment: 'fa-comment',
      status: 'fa-check-circle'
    };
    return icons[type] || 'fa-info-circle';
  },

  // Format date
  formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  },

  // Show all activities modal
  showAllActivities() {
    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <div class="flex justify-between items-center mb-4">
          <h2>Activity History</h2>
          <button class="close-btn" onclick="ui.closeModal(this)">
            <i class="fas fa-times"></i>
          </button>
        </div>
        <div class="space-y-4">
          ${window.appData.history && window.appData.history.activities ? window.appData.history.activities.map(activity => `
            <div class="activity-item">
              <div class="flex items-center space-x-3">
                <div class="activity-icon ${activity.type}">
                  <i class="fas ${this.getActivityIcon(activity.type)}"></i>
                </div>
                <div>
                  <p class="text-sm font-medium">${activity.description}</p>
                  <p class="text-xs text-gray-500">${activity.user} • ${this.formatDate(activity.timestamp)}</p>
                </div>
              </div>
            </div>
          `).join('') : '<p>No activity history available</p>'}
        </div>
      </div>
    `;
    document.body.appendChild(modal);
  },

  // Show add task modal
  showAddTaskModal() {
    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <div class="flex justify-between items-center mb-4">
          <h2>Add New Task</h2>
          <button class="close-btn" onclick="ui.closeModal(this)">
            <i class="fas fa-times"></i>
          </button>
        </div>
        <form id="addTaskForm" onsubmit="ui.handleAddTask(event)">
          <div class="form-group">
            <label for="taskTitle">Title</label>
            <input type="text" id="taskTitle" required>
          </div>
          <div class="form-group">
            <label for="taskDescription">Description</label>
            <textarea id="taskDescription" required></textarea>
          </div>
          <div class="form-group">
            <label for="taskDueDate">Due Date</label>
            <input type="date" id="taskDueDate" required>
          </div>
          <div class="form-group">
            <label for="taskPriority">Priority</label>
            <select id="taskPriority" required>
              <option value="low">Low</option>
              <option value="medium">Medium</option>
              <option value="high">High</option>
            </select>
          </div>
          <div class="form-group">
            <label for="taskAssignee">Assignee</label>
            <select id="taskAssignee" required>
              ${window.appData.personnel && Array.isArray(window.appData.personnel) ? window.appData.personnel.map(person => `
                <option value="${person.id}">${person.name}</option>
              `).join('') : '<option value="">No personnel available</option>'}
            </select>
          </div>
          <button type="submit" class="btn-primary">Add Task</button>
        </form>
      </div>
    `;
    document.body.appendChild(modal);
  },

  // Handle add task form submission
  handleAddTask(event) {
    event.preventDefault();
    const form = event.target;
    const task = {
      id: window.appData.tasks.length + 1,
      title: form.querySelector('#taskTitle').value,
      description: form.querySelector('#taskDescription').value,
      dueDate: form.querySelector('#taskDueDate').value,
      priority: form.querySelector('#taskPriority').value,
      assignee: form.querySelector('#taskAssignee').value,
      progress: 0,
      status: 'pending'
    };
    window.appData.tasks.push(task);
    this.saveChanges();
    this.closeModal(form.closest('.modal'));
    this.loadDashboard();
  },

  // Close modal
  closeModal(button) {
    const modal = button.closest('.modal');
    if (modal) {
      modal.remove();
    }
  },
  
  // Hide modal - alternate method that can be called without a button reference
  hideModal() {
    const modal = document.querySelector('.modal');
    if (modal) {
      modal.remove();
    }
  },

  // Update login state
  updateLoginState() {
    const loginBtn = document.getElementById('loginBtn');
    const userInfo = document.getElementById('userInfo');
    const userName = document.getElementById('userName');
    const userRole = document.getElementById('userRole');
    const saveChangesBtn = document.getElementById('saveChangesBtn');

    // Ensure appData exists and has a state
    if (!window.appData || !window.appData.state) {
      console.warn('appData or its state is undefined in updateLoginState');
      window.appData = window.appData || {};
      window.appData.state = window.appData.state || {};
    }

    // Ensure appData.state has an isLoggedIn property
    if (typeof window.appData.state.isLoggedIn !== 'boolean') {
      console.warn('appData.state.isLoggedIn is not properly defined');
      window.appData.state = window.appData.state || {};
      window.appData.state.isLoggedIn = true;
      window.appData.state.userName = "User";
      window.appData.state.userRole = "Administrator";
    }
    
    // Always set to logged in
    window.appData.state.isLoggedIn = true;

    if (window.appData.state.isLoggedIn) {
      if (loginBtn) loginBtn.classList.add('hidden');
      if (userInfo) userInfo.classList.remove('hidden');
      if (saveChangesBtn) saveChangesBtn.classList.remove('hidden');
      
      const currentUser = window.appData.users && window.appData.users.find(user => user.id === window.appData.state.currentUser);
      if (currentUser) {
        if (userName) userName.textContent = currentUser.name;
        if (userRole) userRole.textContent = currentUser.role;
      } else {
        // Fall back to state values if user not found in users array
        if (userName) userName.textContent = window.appData.state.userName || 'User';
        if (userRole) userRole.textContent = window.appData.state.userRole || 'Guest';
      }
    } else {
      if (loginBtn) loginBtn.classList.remove('hidden');
      if (userInfo) userInfo.classList.add('hidden');
      if (saveChangesBtn) saveChangesBtn.classList.add('hidden');
    }
  },

  // Helper method to ensure images are lazy-loaded
  createLazyImage(src, altText, className = '') {
    return `<img src="${src}" alt="${altText}" class="${className}" loading="lazy">`;
  },
  
  // Render teams grid with lazy loading
  renderTeamsGrid() {
    return window.appData.teams.map(team => {
      const teamLogo = team.logo || 'https://via.placeholder.com/64x64?text=' + team.name.charAt(0);
      
      return `
        <div class="team-card bg-white rounded-lg shadow overflow-hidden transition-all hover:shadow-lg" data-team-id="${team.id}">
          <div class="p-4 flex items-center space-x-4">
            ${this.createLazyImage(teamLogo, `${team.name} logo`, 'w-16 h-16 object-cover rounded-full')}
            <div>
              <h3 class="text-lg font-semibold">
                <span class="text-${team.stream.toLowerCase()}">${team.name}</span>
              </h3>
              <p class="text-sm text-gray-500">${team.personnel.length} Members</p>
            </div>
          </div>
          <div class="px-4 pb-4">
            <div class="truncate-description">
              <p class="text-gray-700">${team.description}</p>
              <button class="text-blue-500 text-sm mt-1 show-more-btn" data-team-id="${team.id}" data-action="description">
                Show More
              </button>
            </div>
            
            <div class="mt-4 flex justify-between">
              <button class="px-3 py-1 text-sm bg-blue-500 text-white rounded hover:bg-blue-600" data-action="view" data-team-id="${team.id}">
                View Team
              </button>
              <div class="flex space-x-2">
                <button class="p-1 text-gray-500 hover:text-blue-500" data-action="edit" data-team-id="${team.id}" title="Edit Team">
                  <i class="fas fa-edit"></i>
                </button>
                <button class="p-1 text-gray-500 hover:text-red-500" data-action="delete" data-team-id="${team.id}" title="Delete Team">
                  <i class="fas fa-trash-alt"></i>
                </button>
              </div>
            </div>
          </div>
        </div>
      `;
    }).join('');
  },

  // Helper method to toggle description visibility
  toggleDescription(button, teamId) {
    const team = appData.teams.find(t => t.id === teamId);
    if (!team) return;
    
    const descriptionElement = button.previousElementSibling;
    
    if (descriptionElement.classList.contains('line-clamp-2')) {
      descriptionElement.classList.remove('line-clamp-2');
      button.textContent = 'Show less';
    } else {
      descriptionElement.classList.add('line-clamp-2');
      button.textContent = 'Read more';
    }
  },
  
  // Helper method to toggle responsibilities visibility
  toggleResponsibilities(button, teamId) {
    const team = appData.teams.find(t => t.id === teamId);
    if (!team) return;
    
    const responsibilitiesElement = button.previousElementSibling;
    
    if (responsibilitiesElement.classList.contains('line-clamp-2')) {
      responsibilitiesElement.classList.remove('line-clamp-2');
      button.textContent = 'Show less';
    } else {
      responsibilitiesElement.classList.add('line-clamp-2');
      button.textContent = 'Read more';
    }
  },
  
  // Show comprehensive team details in a modal
  showTeamDetails(teamId) {
    const team = window.appData.teams.find(t => t.id === teamId);
    if (!team) return;
    
    // Find sub-teams (teams that reference this team as parent)
    const subTeams = window.appData.teams.filter(t => t.parentTeamId === teamId);
    
    const modal = document.createElement('div');
    modal.className = 'modal modal-lg';
    modal.innerHTML = `
      <div class="modal-content">
        <div class="flex justify-between items-start mb-6">
          <div>
            <h2 class="text-2xl font-semibold text-${team.stream}">${team.name}</h2>
            <p class="text-sm text-gray-600">${team.stream.toUpperCase()} Stream</p>
          </div>
          <button class="btn-icon" onclick="ui.hideModal()">
            <i class="fas fa-times"></i>
          </button>
        </div>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
          <div>
            <h3 class="text-lg font-medium mb-3">Description</h3>
            <p class="text-gray-700">${team.description}</p>
          </div>
          
          <div>
            <h3 class="text-lg font-medium mb-3">Responsibilities</h3>
            <p class="text-gray-700">${team.responsibilities}</p>
          </div>
        </div>
        
        <div class="mb-6">
          <h3 class="text-lg font-medium mb-3">Performance</h3>
          <div class="flex items-center space-x-4">
            <div class="w-full bg-gray-200 rounded-full h-2.5">
              <div class="bg-${team.stream} h-2.5 rounded-full" style="width: ${team.performance || 0}%"></div>
            </div>
            <span class="text-lg font-semibold">${team.performance || 0}%</span>
          </div>
        </div>
        
        ${subTeams.length > 0 ? `
          <div class="mb-6">
            <div class="flex justify-between items-center mb-4">
              <h3 class="text-lg font-medium">Sub-Teams (${subTeams.length})</h3>
            </div>
            
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              ${subTeams.map(subTeam => `
                <div class="bg-white border border-gray-200 rounded-lg shadow-sm p-4 cursor-pointer" onclick="ui.showTeamDetails(${subTeam.id})">
                  <div class="flex items-center space-x-3">
                    <div class="w-8 h-8 rounded-full flex items-center justify-center text-white bg-${subTeam.stream}-600">
                      ${subTeam.name.charAt(0)}
                    </div>
                    <div>
                      <h4 class="font-medium">${subTeam.name}</h4>
                      <p class="text-xs text-gray-500">${subTeam.personnel ? subTeam.personnel.length : 0} members</p>
                    </div>
                  </div>
                </div>
              `).join('')}
            </div>
          </div>
        ` : ''}
        
        <div>
          <div class="flex justify-between items-center mb-4">
            <h3 class="text-lg font-medium">Personnel (${team.personnel.length})</h3>
            <button class="btn-primary btn-sm" onclick="ui.showAddPersonnelModal(${team.id})">
              <i class="fas fa-user-plus mr-2"></i> Add Personnel
            </button>
          </div>
          
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            ${team.personnel.map(person => `
              <div class="bg-gray-50 p-4 rounded-md hover:shadow-md transition-shadow">
                <div class="flex justify-between items-start">
                  <div>
                    <p class="font-medium">${person.name}</p>
                    <p class="text-sm text-gray-600">${person.role}</p>
                    <p class="text-sm text-gray-600 mt-1">Client: ${person.client}</p>
                  </div>
                  <div class="flex space-x-1">
                    <button class="btn-icon btn-sm" onclick="ui.editPersonnel(${person.id})">
                      <i class="fas fa-user-edit"></i>
                    </button>
                    <button class="btn-icon btn-sm" onclick="ui.removePersonnel(${person.id}, ${team.id})">
                      <i class="fas fa-user-minus"></i>
                    </button>
                  </div>
                </div>
                ${person.skills ? `
                <div class="mt-3 pt-3 border-t">
                  <p class="text-xs text-gray-500 mb-1">Skills:</p>
                  <div class="flex flex-wrap gap-1">
                    ${Object.entries(person.skills).slice(0, 3).map(([id, level]) => {
                      const skill = window.appData.skills?.find(s => s.id == id);
                      return skill ? `
                        <span class="px-2 py-0.5 text-xs rounded-full bg-${team.stream} bg-opacity-10 text-${team.stream}">
                          ${skill.name}: ${level}
                        </span>
                      ` : '';
                    }).join('')}
                    ${Object.keys(person.skills).length > 3 ? `
                      <span class="px-2 py-0.5 text-xs rounded-full bg-gray-100 text-gray-600">
                        +${Object.keys(person.skills).length - 3} more
                      </span>
                    ` : ''}
                  </div>
                </div>
                ` : ''}
              </div>
            `).join('')}
          </div>
        </div>
        
        <div class="mt-6 flex justify-end space-x-3">
          <button class="btn-secondary" onclick="ui.editTeam(${team.id})">
            <i class="fas fa-edit mr-2"></i> Edit Team
          </button>
          <button class="btn-primary" onclick="ui.showAddSubTeamModal(${team.id})">
            <i class="fas fa-plus mr-2"></i> Add Sub-Team
          </button>
        </div>
      </div>
    `;
    document.body.appendChild(modal);
    
    // Add CSS for line clamp if not already added
    if (!document.getElementById('line-clamp-css')) {
      const style = document.createElement('style');
      style.id = 'line-clamp-css';
      style.textContent = `
        .line-clamp-2 {
          display: -webkit-box;
          -webkit-line-clamp: 2;
          -webkit-box-orient: vertical;
          overflow: hidden;
        }
        .tooltip-trigger {
          position: relative;
        }
        .tooltip {
          visibility: hidden;
          position: absolute;
          top: -30px;
          left: 50%;
          transform: translateX(-50%);
          background-color: #333;
          color: white;
          padding: 4px 8px;
          border-radius: 4px;
          font-size: 12px;
          white-space: nowrap;
          opacity: 0;
          transition: opacity 0.3s;
          z-index: 10;
        }
        .tooltip-trigger:hover .tooltip {
          visibility: visible;
          opacity: 1;
        }
      `;
      document.head.appendChild(style);
    }
  },
  
  // Create a sub-team
  showAddSubTeamModal(parentTeamId) {
    const parentTeam = window.appData.teams.find(t => t.id === parentTeamId);
    if (!parentTeam) return;
    
    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <h2 class="text-xl font-semibold mb-4">Add Sub-Team to ${parentTeam.name}</h2>
        <form id="addSubTeamForm">
          <div class="form-group">
            <label for="teamName">Team Name</label>
            <input type="text" id="teamName" class="form-input" required>
          </div>
          <div class="form-group">
            <label for="teamStream">Stream</label>
            <select id="teamStream" class="form-select" required>
              <option value="${parentTeam.stream}" selected>${parentTeam.stream.toUpperCase()}</option>
              <option value="bbv">BBV</option>
              <option value="add">ADD</option>
              <option value="arb">ARB</option>
              <option value="shared">Shared</option>
            </select>
          </div>
          <div class="form-group">
            <label for="teamDescription">Description</label>
            <textarea id="teamDescription" class="form-textarea" rows="3" required></textarea>
          </div>
          <div class="form-group">
            <label for="teamResponsibilities">Responsibilities</label>
            <textarea id="teamResponsibilities" class="form-textarea" rows="3" required></textarea>
          </div>
          <div class="flex justify-end space-x-2 mt-4">
            <button type="button" class="btn-secondary" onclick="ui.hideModal()">Cancel</button>
            <button type="submit" class="btn-primary">Add Sub-Team</button>
          </div>
        </form>
      </div>
    `;
    document.body.appendChild(modal);
    
    // Handle form submission
    document.getElementById('addSubTeamForm').addEventListener('submit', e => {
      e.preventDefault();
      
      // Generate a new ID
      const newId = Date.now();
      
      // Create new team
      const newTeam = {
        id: newId,
        parentTeamId: parentTeamId,
        name: document.getElementById('teamName').value,
        stream: document.getElementById('teamStream').value,
        description: document.getElementById('teamDescription').value,
        responsibilities: document.getElementById('teamResponsibilities').value,
        performance: 0,
        personnel: []
      };
      
      // Add to teams array
      if (!window.appData.teams) window.appData.teams = [];
      window.appData.teams.push(newTeam);
      
      // Save changes
      this.saveChanges();
      
      // Hide modal
      this.hideModal();
      
      // Show success message
      this.showToast('Sub-team added successfully', 'success');
      
      // Open the new team details
      this.showTeamDetails(newId);
    });
  },
  
  loadTeams() {
    try {
      console.log('Loading teams content...');
      
      const tabContent = document.getElementById('tabContent');
      if (!tabContent) {
        console.error('Tab content element not found');
        return;
      }

      // Check if already loading to prevent duplicate loads
      if (tabContent.dataset.loading === 'true' && tabContent.dataset.currentTab === 'teams') {
        console.log('Teams already loading, skipping duplicate load request');
        return;
      }
      
      // Set loading state
      tabContent.dataset.loading = 'true';
      tabContent.dataset.currentTab = 'teams';
      
      // Clear any existing content first - important to avoid content from other tabs persisting
      tabContent.innerHTML = `
        <div class="flex justify-center items-center p-12">
          <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
          <p class="ml-4 text-gray-500">Loading teams content...</p>
        </div>
      `;

      // Use a setTimeout to allow the loading indicator to render
      setTimeout(() => {
        try {
          // Ensure appData and teams array exists - defensive coding
          if (!window.appData) window.appData = {};
          if (!window.appData.teams) window.appData.teams = [];
          
          // Check if a stream filter was set from dashboard navigation
          const activeFilter = sessionStorage.getItem('activeFilter');
          let teams = window.appData.teams;
          
          // Filter teams if an active filter is set
          if (activeFilter) {
            teams = teams.filter(team => team && team.stream === activeFilter);
            console.log(`Applying stream filter: ${activeFilter}, filtered to ${teams.length} teams`);
          }

          // Generate team cards with safe access to properties
          const teamCards = teams.length > 0 ? teams.map(team => {
            // Ensure team has all required properties
            if (!team) return '';
            
            // Ensure personnel exists
            if (!team.personnel) team.personnel = [];
            
            return `
              <div class="bg-white rounded-lg shadow-sm hover:shadow transition-all p-4 border border-gray-200 cursor-pointer team-card" data-team-id="${team.id || ''}">
                <div class="flex items-center space-x-3 mb-3">
                  <div class="w-10 h-10 rounded-full flex items-center justify-center text-white bg-${team.stream || 'gray'}-600">
                    ${team.name ? team.name.charAt(0) : '?'}
                  </div>
                  <div>
                    <h3 class="font-semibold">${team.name || 'Unnamed Team'}</h3>
                    <p class="text-xs text-gray-500">${(team.stream || 'unknown').toUpperCase()} • ${team.personnel.length} members</p>
                  </div>
                </div>
                
                <p class="text-sm text-gray-600 mb-4">${team.description || 'No description available'}</p>
                
                <div class="text-xs text-gray-500 mb-1 flex justify-between">
                  <span>Performance</span>
                  <span>${team.performance || 0}%</span>
                </div>
                
                <div class="w-full bg-gray-200 rounded-full h-2 mb-4">
                  <div class="bg-${team.stream || 'blue'}-600 h-2 rounded-full" style="width: ${team.performance || 0}%"></div>
                </div>
                
                <div class="flex justify-between">
                  <button class="text-blue-600 text-sm hover:text-blue-800 view-team-btn" data-team-id="${team.id || ''}">
                    View Details
                  </button>
                  <div>
                    <button class="text-gray-500 hover:text-blue-600 mx-2 edit-team-btn" data-team-id="${team.id || ''}">
                      <i class="fas fa-edit"></i>
                    </button>
                    <button class="text-gray-500 hover:text-red-600 delete-team-btn" data-team-id="${team.id || ''}">
                      <i class="fas fa-trash-alt"></i>
                    </button>
                  </div>
                </div>
              </div>
            `;
          }).join('') : '<p class="col-span-full text-center py-8 text-gray-500">No teams available</p>';

          // Render the final teams tab content with filter info if active
          tabContent.innerHTML = `
            <div class="p-4">
              <div class="flex justify-between items-center mb-6">
                <div>
                  <h2 class="text-2xl font-bold">Teams</h2>
                  ${activeFilter ? `
                    <div class="flex items-center mt-2">
                      <span class="text-sm text-gray-600 mr-2">Filtered by: ${activeFilter.toUpperCase()}</span>
                      <button class="text-xs text-blue-600 hover:text-blue-800 flex items-center" id="clearFilterBtn">
                        <i class="fas fa-times-circle mr-1"></i> Clear filter
                      </button>
                    </div>
                  ` : ''}
                </div>
                <button class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition flex items-center" id="addTeamButton">
                  <i class="fas fa-plus mr-2"></i> Add Team
                </button>
              </div>
              
              <!-- Team Cards -->
              <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6" id="teamsGrid">
                ${teamCards}
              </div>
            </div>
          `;
          
          // Add event listeners to team actions
          this.addTeamEventListeners();
          
          // Add event listener to clear filter button if it exists
          const clearFilterBtn = document.getElementById('clearFilterBtn');
          if (clearFilterBtn) {
            clearFilterBtn.addEventListener('click', () => {
              sessionStorage.removeItem('activeFilter');
              this.loadTeams();
            });
          }
          
          // Reset loading state
          tabContent.dataset.loading = 'false';
          
          console.log('Teams content loaded successfully');
        } catch (error) {
          console.error('Error rendering teams:', error);
          
          // Show error message
          tabContent.innerHTML = `
            <div class="p-8 text-center">
              <div class="text-red-500 text-xl mb-4">
                <i class="fas fa-exclamation-triangle mr-2"></i> 
                Error loading Teams
              </div>
              <p class="mb-4">${error.message || 'An unknown error occurred'}</p>
              <button class="px-4 py-2 bg-blue-600 text-white rounded" onclick="ui.switchTab('teams')">
                <i class="fas fa-sync-alt mr-2"></i> Try Again
              </button>
            </div>
          `;
          
          // Reset loading state
          tabContent.dataset.loading = 'false';
        }
      }, 150); // Slightly longer delay for better reliability
    } catch (error) {
      console.error('Critical error in loadTeams:', error);
      
      // Show error message
      const tabContent = document.getElementById('tabContent');
      if (tabContent) {
        tabContent.innerHTML = `
          <div class="p-8 text-center">
            <div class="text-red-500 text-xl mb-4">
              <i class="fas fa-exclamation-triangle mr-2"></i> 
              Critical Error Loading Teams
            </div>
            <p class="mb-4">${error.message || 'An unknown error occurred'}</p>
            <button class="px-4 py-2 bg-blue-600 text-white rounded" onclick="location.reload()">
              <i class="fas fa-sync-alt mr-2"></i> Refresh Page
            </button>
          </div>
        `;
        
        // Reset loading state
        tabContent.dataset.loading = 'false';
      }
    }
  },
  
  // Add a new helper method to attach event listeners to team elements
  addTeamEventListeners() {
    try {
      // Add team button
      const addTeamButton = document.getElementById('addTeamButton');
      if (addTeamButton) {
        addTeamButton.addEventListener('click', () => this.showAddTeamModal());
      }
      
      // Make entire team cards clickable
      const teamCards = document.querySelectorAll('.team-card');
      teamCards.forEach(card => {
        const teamId = parseInt(card.getAttribute('data-team-id'));
        if (!isNaN(teamId)) {
          card.addEventListener('click', (e) => {
            // Only handle click if it's directly on the card (not on a button)
            if (e.target.closest('button') === null) {
              this.showTeamDetails(teamId);
            }
          });
        }
      });
      
      // View team buttons
      const viewTeamBtns = document.querySelectorAll('.view-team-btn');
      viewTeamBtns.forEach(btn => {
        const teamIdAttr = btn.getAttribute('data-team-id');
        if (teamIdAttr) {
          const teamId = parseInt(teamIdAttr);
          if (!isNaN(teamId)) {
            btn.addEventListener('click', (e) => {
              e.stopPropagation(); // Prevent card click
              this.showTeamDetails(teamId);
            });
          }
        }
      });
      
      // Edit team buttons
      const editTeamBtns = document.querySelectorAll('.edit-team-btn');
      editTeamBtns.forEach(btn => {
        const teamIdAttr = btn.getAttribute('data-team-id');
        if (teamIdAttr) {
          const teamId = parseInt(teamIdAttr);
          if (!isNaN(teamId)) {
            btn.addEventListener('click', (e) => {
              e.stopPropagation(); // Prevent card click
              this.editTeam(teamId);
            });
          }
        }
      });
      
      // Delete team buttons
      const deleteTeamBtns = document.querySelectorAll('.delete-team-btn');
      deleteTeamBtns.forEach(btn => {
        const teamIdAttr = btn.getAttribute('data-team-id');
        if (teamIdAttr) {
          const teamId = parseInt(teamIdAttr);
          if (!isNaN(teamId)) {
            btn.addEventListener('click', (e) => {
              e.stopPropagation(); // Prevent card click
              this.deleteTeam(teamId);
            });
          }
        }
      });
    } catch (error) {
      console.error('Error setting up team event listeners:', error);
      this.showToast('Error setting up team interactions', 'error');
    }
  },
  
  // Helper functions for team statistics
  countAllPersonnel() {
    let count = 0;
    if (window.appData && window.appData.teams) {
      window.appData.teams.forEach(team => {
        if (team.personnel) count += team.personnel.length;
      });
    }
    return count;
  },
  
  calculateAverageTeamSize() {
    if (!window.appData || !window.appData.teams || window.appData.teams.length === 0) {
      return 0;
    }
    const totalPersonnel = this.countAllPersonnel();
    return Math.round(totalPersonnel / window.appData.teams.length);
  },
  
  calculateAveragePerformance() {
    if (!window.appData || !window.appData.teams || window.appData.teams.length === 0) {
      return 0;
    }
    const totalPerformance = window.appData.teams.reduce((sum, team) => sum + (team.performance || 0), 0);
    return Math.round(totalPerformance / window.appData.teams.length);
  },
  
  // Simple team rendering
  renderTeamsSimple() {
    if (!window.appData || !window.appData.teams || window.appData.teams.length === 0) {
      return '<div class="col-span-full text-center py-8 text-gray-500">No teams available</div>';
    }
    
    return window.appData.teams.map(team => `
      <div class="bg-white rounded-lg shadow-sm hover:shadow transition-all p-4 border border-gray-200">
        <div class="flex items-center space-x-3 mb-3">
          <div class="w-10 h-10 rounded-full flex items-center justify-center text-white bg-gray-600">
            ${team.name.charAt(0)}
          </div>
          <div>
            <h3 class="font-semibold">${team.name}</h3>
            <p class="text-xs text-gray-500">${team.stream.toUpperCase()} • ${team.personnel ? team.personnel.length : 0} members</p>
          </div>
        </div>
        
        <p class="text-sm text-gray-600 mb-4">${team.description}</p>
        
        <div class="text-xs text-gray-500 mb-1 flex justify-between">
          <span>Performance</span>
          <span>${team.performance || 0}%</span>
        </div>
        
        <div class="w-full bg-gray-200 rounded-full h-2 mb-4">
          <div class="bg-blue-600 h-2 rounded-full" style="width: ${team.performance || 0}%"></div>
        </div>
        
        <div class="flex justify-between">
          <button class="text-blue-600 text-sm hover:text-blue-800" onclick="ui.showTeamDetails(${team.id})">
            View Details
          </button>
          <div>
            <button class="text-gray-500 hover:text-blue-600 mx-2" onclick="ui.editTeam(${team.id})">
              <i class="fas fa-edit"></i>
            </button>
            <button class="text-gray-500 hover:text-red-600" onclick="ui.deleteTeam(${team.id})">
              <i class="fas fa-trash-alt"></i>
            </button>
          </div>
        </div>
      </div>
    `).join('');
  },
  
  // Export teams data as CSV or JSON
  exportTeamsCSV() {
    let csvContent = "data:text/csv;charset=utf-8,";
    
    // Add headers
    csvContent += "Team ID,Team Name,Stream,Personnel Count,Performance,Description,Responsibilities\n";
    
    // Add team data
    window.appData.teams.forEach(team => {
      csvContent += [
        team.id,
        `"${team.name.replace(/"/g, '""')}"`,
        team.stream,
        team.personnel.length,
        team.performance || 0,
        `"${team.description.replace(/"/g, '""')}"`,
        `"${team.responsibilities.replace(/"/g, '""')}"`
      ].join(',') + '\n';
    });
    
    // Create download link
    const encodedUri = encodeURI(csvContent);
    const link = document.createElement("a");
    link.setAttribute("href", encodedUri);
    link.setAttribute("download", "teams_data.csv");
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
    this.hideModal();
    this.showToast('Teams exported as CSV', 'success');
  },
  
  exportTeamsJSON() {
    const data = JSON.stringify(window.appData.teams, null, 2);
    const blob = new Blob([data], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    
    const link = document.createElement("a");
    link.setAttribute("href", url);
    link.setAttribute("download", "teams_data.json");
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
    
    this.hideModal();
    this.showToast('Teams exported as JSON', 'success');
  },
  
  sortTeams() {
    const sortBy = document.getElementById('sortTeams').value;
    const grid = document.getElementById('teamsGrid');
    const cards = Array.from(grid.querySelectorAll('.team-card'));
    
    cards.sort((a, b) => {
      const aId = parseInt(a.getAttribute('data-id'));
      const bId = parseInt(b.getAttribute('data-id'));
      const aTeam = window.appData.teams.find(t => t.id === aId);
      const bTeam = window.appData.teams.find(t => t.id === bId);
      
      if (!aTeam || !bTeam) return 0;
      
      switch (sortBy) {
        case 'name':
          return aTeam.name.localeCompare(bTeam.name);
        case 'size':
          return bTeam.personnel.length - aTeam.personnel.length;
        case 'performance':
          return (bTeam.performance || 0) - (aTeam.performance || 0);
        default:
          return 0;
      }
    });
    
    // Re-append cards in the sorted order
    cards.forEach(card => grid.appendChild(card));
  },

  showAddTeamModal() {
    try {
      const modal = document.createElement('div');
      modal.className = 'modal';
      modal.innerHTML = `
        <div class="modal-content">
          <h2 class="text-xl font-semibold mb-4">Add New Team</h2>
          <form id="addTeamForm">
            <div class="form-group">
              <label for="teamName">Team Name</label>
              <input type="text" id="teamName" required>
            </div>
            <div class="form-group">
              <label for="teamStream">Stream</label>
              <select id="teamStream" required>
                <option value="bbv">BBV</option>
                <option value="add">ADD</option>
                <option value="arb">ARB</option>
                <option value="shared">Shared</option>
              </select>
            </div>
            <div class="form-group">
              <label for="teamDescription">Description</label>
              <textarea id="teamDescription" rows="3" required></textarea>
            </div>
            <div class="form-group">
              <label for="teamResponsibilities">Responsibilities</label>
              <textarea id="teamResponsibilities" rows="3" required></textarea>
            </div>
            <div class="flex justify-end space-x-2 mt-4">
              <button type="button" class="btn-secondary" onclick="ui.hideModal()">Cancel</button>
              <button type="submit" class="btn-primary">Add Team</button>
            </div>
          </form>
        </div>
      `;
      document.body.appendChild(modal);

      const form = modal.querySelector('#addTeamForm');
      if (form) {
        form.addEventListener('submit', (e) => {
          e.preventDefault();
          try {
            // Ensure appData and teams exist
            if (!window.appData) window.appData = {};
            if (!window.appData.teams) window.appData.teams = [];
            
            const team = {
              id: Date.now(),
              name: form.querySelector('#teamName').value.trim(),
              stream: form.querySelector('#teamStream').value,
              description: form.querySelector('#teamDescription').value.trim(),
              responsibilities: form.querySelector('#teamResponsibilities').value.trim(),
              performance: 0,
              personnel: []
            };
            
            window.appData.teams.push(team);
            
            this.saveChanges();
            this.hideModal();
            this.showToast('Team added successfully', 'success');
            this.loadTeams();
          } catch (formError) {
            console.error('Error adding team:', formError);
            this.showToast('Error adding team: ' + (formError.message || 'Unknown error'), 'error');
          }
        });
      }
    } catch (error) {
      console.error('Error showing add team modal:', error);
      this.showToast('Could not open add team form', 'error');
    }
  },

  editTeam(teamId) {
    const team = window.appData.teams.find(t => t.id === teamId);
    if (!team) return;

    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <h2 class="text-xl font-semibold mb-4">Edit Team</h2>
        <form id="editTeamForm">
          <div class="form-group">
            <label for="teamName">Team Name</label>
            <input type="text" id="teamName" value="${team.name}" required>
          </div>
          <div class="form-group">
            <label for="teamStream">Stream</label>
            <select id="teamStream" required>
              <option value="bbv" ${team.stream === 'bbv' ? 'selected' : ''}>BBV</option>
              <option value="add" ${team.stream === 'add' ? 'selected' : ''}>ADD</option>
              <option value="arb" ${team.stream === 'arb' ? 'selected' : ''}>ARB</option>
              <option value="shared" ${team.stream === 'shared' ? 'selected' : ''}>Shared</option>
            </select>
          </div>
          <div class="form-group">
            <label for="teamDescription">Description</label>
            <textarea id="teamDescription" rows="3" required>${team.description}</textarea>
          </div>
          <div class="form-group">
            <label for="teamResponsibilities">Responsibilities</label>
            <textarea id="teamResponsibilities" rows="3" required>${team.responsibilities}</textarea>
          </div>
          <div class="form-group">
            <label for="teamPerformance">Performance Score</label>
            <input type="number" id="teamPerformance" min="0" max="100" value="${team.performance}" required>
          </div>
          <div class="flex justify-end space-x-2 mt-4">
            <button type="button" class="btn-secondary" onclick="ui.hideModal()">Cancel</button>
            <button type="submit" class="btn-primary">Save Changes</button>
          </div>
        </form>
      </div>
    `;
    document.body.appendChild(modal);

    const form = modal.querySelector('#editTeamForm');
    form.addEventListener('submit', (e) => {
      e.preventDefault();
      team.name = form.querySelector('#teamName').value;
      team.stream = form.querySelector('#teamStream').value;
      team.description = form.querySelector('#teamDescription').value;
      team.responsibilities = form.querySelector('#teamResponsibilities').value;
      team.performance = parseInt(form.querySelector('#teamPerformance').value);
      
      this.saveChanges();
      this.hideModal();
      this.showToast('Team updated successfully', 'success');
      this.loadTeams();
    });
  },

  deleteTeam(teamId) {
    if (confirm('Are you sure you want to delete this team? This action cannot be undone.')) {
      window.appData.teams = window.appData.teams.filter(t => t.id !== teamId);
      this.saveChanges();
      this.showToast('Team deleted successfully', 'success');
      this.loadTeams();
    }
  },

  showAddPersonnelModal(teamId) {
    const team = window.appData.teams.find(t => t.id === teamId);
    if (!team) return;

    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <h2 class="text-xl font-semibold mb-4">Add Personnel to ${team.name}</h2>
        <form id="addPersonnelForm">
          <div class="form-group">
            <label for="personnelName">Name</label>
            <input type="text" id="personnelName" required>
          </div>
          <div class="form-group">
            <label for="personnelRole">Role</label>
            <input type="text" id="personnelRole" required>
          </div>
          <div class="form-group">
            <label for="personnelClient">Client</label>
            <input type="text" id="personnelClient" required>
          </div>
          <div class="flex justify-end space-x-2 mt-4">
            <button type="button" class="btn-secondary" onclick="ui.hideModal()">Cancel</button>
            <button type="submit" class="btn-primary">Add Personnel</button>
          </div>
        </form>
      </div>
    `;
    document.body.appendChild(modal);

    const form = modal.querySelector('#addPersonnelForm');
    form.addEventListener('submit', (e) => {
      e.preventDefault();
      const personnel = {
        id: Date.now(),
        name: form.querySelector('#personnelName').value,
        role: form.querySelector('#personnelRole').value,
        client: form.querySelector('#personnelClient').value
      };
      
      team.personnel.push(personnel);
      this.saveChanges();
      this.hideModal();
      this.showToast('Personnel added successfully', 'success');
      this.loadTeams();
    });
  },

  editPersonnel(personnelId) {
    const team = window.appData.teams.find(t => t.personnel.some(p => p.id === personnelId));
    const personnel = team?.personnel.find(p => p.id === personnelId);
    if (!personnel) return;

    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <h2 class="text-xl font-semibold mb-4">Edit Personnel</h2>
        <form id="editPersonnelForm">
          <div class="form-group">
            <label for="personnelName">Name</label>
            <input type="text" id="personnelName" value="${personnel.name}" required>
          </div>
          <div class="form-group">
            <label for="personnelRole">Role</label>
            <input type="text" id="personnelRole" value="${personnel.role}" required>
          </div>
          <div class="form-group">
            <label for="personnelClient">Client</label>
            <input type="text" id="personnelClient" value="${personnel.client}" required>
          </div>
          <div class="flex justify-end space-x-2 mt-4">
            <button type="button" class="btn-secondary" onclick="ui.hideModal()">Cancel</button>
            <button type="submit" class="btn-primary">Save Changes</button>
          </div>
        </form>
      </div>
    `;
    document.body.appendChild(modal);

    const form = modal.querySelector('#editPersonnelForm');
    form.addEventListener('submit', (e) => {
      e.preventDefault();
      personnel.name = form.querySelector('#personnelName').value;
      personnel.role = form.querySelector('#personnelRole').value;
      personnel.client = form.querySelector('#personnelClient').value;
      
      this.saveChanges();
      this.hideModal();
      this.showToast('Personnel updated successfully', 'success');
      this.loadTeams();
    });
  },

  removePersonnel(personnelId, teamId) {
    const team = window.appData.teams.find(t => t.id === teamId);
    if (!team) return;

    if (confirm('Are you sure you want to remove this personnel? This action cannot be undone.')) {
      team.personnel = team.personnel.filter(p => p.id !== personnelId);
      this.saveChanges();
      this.showToast('Personnel removed successfully', 'success');
      this.loadTeams();
    }
  },

  loadOrgChart() {
    try {
      const tabContent = document.getElementById('tabContent');
      if (!tabContent) {
        console.error('Tab content element not found');
        return;
      }
      
      // Check if already loading
      if (tabContent.dataset.loading === 'true') {
        console.log('Organization chart already loading, skipping duplicate load');
        return;
      }
      
      // Set loading state
      tabContent.dataset.loading = 'true';
      
      tabContent.innerHTML = `
        <div class="p-4 space-y-6">
          <div class="flex flex-wrap items-center justify-between gap-4">
            <div>
              <h2 class="text-2xl font-semibold">Organization Chart</h2>
              <p class="text-gray-600 mt-1">Interactive visualization of the quality organization structure</p>
            </div>
            <div class="flex gap-2">
              <div class="relative">
                <select id="clientFilter" class="form-select text-sm pr-8 py-2 pl-3 border rounded-lg">
                  <option value="all">All Clients</option>
                  ${this.getUniqueClients().map(client => 
                    `<option value="${client}">${client}</option>`).join('')}
                </select>
              </div>
              <div class="relative">
                <select id="streamFilter" class="form-select text-sm pr-8 py-2 pl-3 border rounded-lg">
                  <option value="all">All Streams</option>
                  <option value="bbv">BBV</option>
                  <option value="add">ADD</option>
                  <option value="arb">ARB</option>
                  <option value="shared">Shared</option>
                </select>
              </div>
              <button id="exportOrgChartBtn" class="btn btn-secondary text-sm py-2 px-3 rounded-lg border bg-white hover:bg-gray-50">
                <i class="fas fa-download mr-1"></i> Export
              </button>
              <div class="dropdown relative inline-block">
                <button id="layoutOptionsBtn" class="btn btn-secondary text-sm py-2 px-3 rounded-lg border bg-white hover:bg-gray-50">
                  <i class="fas fa-sitemap mr-1"></i> Layout <i class="fas fa-caret-down ml-1"></i>
                </button>
                <div id="layoutDropdown" class="dropdown-content hidden absolute right-0 mt-2 bg-white border rounded-lg shadow-lg z-10 w-48">
                  <div class="p-2">
                    <button id="verticalLayout" class="block w-full text-left p-2 hover:bg-gray-100 rounded">
                      <i class="fas fa-arrows-alt-v mr-2"></i> Vertical
                    </button>
                    <button id="horizontalLayout" class="block w-full text-left p-2 hover:bg-gray-100 rounded">
                      <i class="fas fa-arrows-alt-h mr-2"></i> Horizontal
                    </button>
                    <button id="compactLayout" class="block w-full text-left p-2 hover:bg-gray-100 rounded">
                      <i class="fas fa-compress-arrows-alt mr-2"></i> Compact
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <div class="flex flex-wrap gap-4 mb-2">
            <div class="p-2 bg-white rounded-lg shadow-sm flex items-center">
              <div class="mr-2 text-sm font-medium">Zoom:</div>
              <button id="zoomOut" class="p-1 rounded hover:bg-gray-100"><i class="fas fa-minus"></i></button>
              <div id="zoomLevel" class="px-2 text-sm">100%</div>
              <button id="zoomIn" class="p-1 rounded hover:bg-gray-100"><i class="fas fa-plus"></i></button>
              <button id="zoomReset" class="ml-2 p-1 px-2 text-xs bg-gray-100 rounded hover:bg-gray-200">Reset</button>
            </div>
            
            <div class="p-2 bg-white rounded-lg shadow-sm flex items-center">
              <div class="mr-2 text-sm font-medium">Show:</div>
              <label class="inline-flex items-center cursor-pointer mr-3">
                <input type="checkbox" id="showNames" class="form-checkbox" checked>
                <span class="ml-1 text-sm">Names</span>
              </label>
              <label class="inline-flex items-center cursor-pointer mr-3">
                <input type="checkbox" id="showRoles" class="form-checkbox" checked>
                <span class="ml-1 text-sm">Roles</span>
              </label>
              <label class="inline-flex items-center cursor-pointer">
                <input type="checkbox" id="showClients" class="form-checkbox" checked>
                <span class="ml-1 text-sm">Clients</span>
              </label>
            </div>
            
            <div class="flex-grow"></div>
            
            <div class="p-2 bg-white rounded-lg shadow-sm flex items-center">
              <input type="text" id="searchOrgChart" placeholder="Search..." 
                class="border rounded px-3 py-1 text-sm focus:outline-none focus:ring-2 focus:ring-blue-300">
            </div>
          </div>
          
          <div class="bg-white p-4 rounded-lg shadow-md border border-gray-200">
            <div id="orgChartContainer" class="w-full" style="height: 700px; overflow: auto;">
              <div id="orgChart" class="w-full h-full"></div>
            </div>
          </div>
          
          <div id="nodeDetails" class="hidden bg-white p-4 rounded-lg shadow-md border border-gray-200 mt-4">
            <div class="flex justify-between items-start">
              <h3 class="text-lg font-semibold" id="detailsTitle">Node Details</h3>
              <button id="closeDetails" class="text-gray-400 hover:text-gray-600">
                <i class="fas fa-times"></i>
              </button>
            </div>
            <div id="detailsContent" class="mt-3"></div>
          </div>
        </div>
      `;
      
      // Set up event listeners for controls
      this.setupOrgChartControls();
      
      // Initialize the org chart
      this.initializeOrgChart();
      
      // Reset loading state
      tabContent.dataset.loading = 'false';
    } catch (error) {
      console.error('Error loading organization chart:', error);
      
      const tabContent = document.getElementById('tabContent');
      if (tabContent) {
        tabContent.innerHTML = `
          <div class="p-8 text-center">
            <div class="text-red-500 text-xl mb-4">
              <i class="fas fa-exclamation-triangle mr-2"></i> 
              Error Loading Organization Chart
            </div>
            <p class="mb-4">${error.message || 'An unknown error occurred'}</p>
            <button class="px-4 py-2 bg-blue-600 text-white rounded" onclick="ui.switchTab('orgchart')">
              <i class="fas fa-sync-alt mr-2"></i> Try Again
            </button>
          </div>
        `;
        
        // Reset loading state
        tabContent.dataset.loading = 'false';
      }
    }
  },

  // Set up org chart controls
  setupOrgChartControls() {
    console.log('Setting up org chart controls');
    
    // Client filter
    const clientFilter = document.getElementById('clientFilter');
    const streamFilter = document.getElementById('streamFilter');
    
    if (clientFilter && streamFilter) {
      // Get unique clients
      const clients = this.getUniqueClients();
      
      // Populate client filter
      clientFilter.innerHTML = `
        <option value="all">All Clients</option>
        ${clients.map(client => `<option value="${client}">${client}</option>`).join('')}
      `;
      
      // Add enhanced detail filter
      const detailLevel = document.getElementById('detailLevelFilter') || document.createElement('select');
      if (!document.getElementById('detailLevelFilter')) {
        detailLevel.id = 'detailLevelFilter';
        detailLevel.className = 'form-select px-3 py-2 border rounded-md text-sm';
        detailLevel.innerHTML = `
          <option value="high">High Detail</option>
          <option value="medium" selected>Medium Detail</option>
          <option value="low">Low Detail</option>
        `;
        
        // Add after stream filter
        streamFilter.parentNode.appendChild(detailLevel);
        
        // Add label
        const label = document.createElement('label');
        label.htmlFor = 'detailLevelFilter';
        label.className = 'block text-sm font-medium text-gray-700 mr-2';
        label.innerText = 'Detail Level:';
        streamFilter.parentNode.insertBefore(label, detailLevel);
      }
      
      // Event listeners - use a combined update function for efficiency
      const updateChart = () => {
        const clientValue = clientFilter.value;
        const streamValue = streamFilter.value;
        const detailValue = detailLevel.value;
        
        // Update the org chart with new filters
        this.prepareOrgChartData(clientValue, streamValue, detailValue);
      };
      
      clientFilter.addEventListener('change', updateChart);
      streamFilter.addEventListener('change', updateChart);
      detailLevel.addEventListener('change', updateChart);
      
      // Enhanced export options
      const exportContainer = document.querySelector('.export-options') || document.createElement('div');
      if (!document.querySelector('.export-options')) {
        exportContainer.className = 'export-options mt-4 flex flex-wrap gap-2';
        exportContainer.innerHTML = `
          <button id="exportOrgChartSvg" class="btn btn-sm btn-outline">
            <i class="fas fa-file-code mr-1"></i> Export SVG
          </button>
          <button id="exportOrgChartPng" class="btn btn-sm btn-outline">
            <i class="fas fa-file-image mr-1"></i> Export PNG
          </button>
          <button id="exportOrgChartPdf" class="btn btn-sm btn-outline">
            <i class="fas fa-file-pdf mr-1"></i> Export PDF
          </button>
          <button id="exportOrgChartData" class="btn btn-sm btn-outline">
            <i class="fas fa-file-csv mr-1"></i> Export Data
          </button>
        `;
        
        // Add export container to the chart controls
        const controlsContainer = document.querySelector('.org-chart-controls') || streamFilter.parentNode.parentNode;
        controlsContainer.appendChild(exportContainer);
        
        // Add event listeners for new export buttons
        document.getElementById('exportOrgChartSvg').addEventListener('click', () => this.exportOrgChartSvg());
        document.getElementById('exportOrgChartPng').addEventListener('click', () => this.exportOrgChartPng());
        document.getElementById('exportOrgChartPdf').addEventListener('click', () => this.exportOrgChartPdf());
        document.getElementById('exportOrgChartData').addEventListener('click', () => this.exportOrgChartData());
      }
    }
  },
  
  // Get unique client names from personnel
  getUniqueClients() {
    const clients = new Set();
    
    if (window.appData && window.appData.teams) {
      window.appData.teams.forEach(team => {
        if (team && team.personnel) {
          team.personnel.forEach(person => {
            if (person && person.client) {
              clients.add(person.client);
            }
          });
        }
      });
    }
    
    return Array.from(clients).sort();
  },

  // Initialize the d3.js org chart visualization
  initializeOrgChart() {
    // Check if d3 is loaded
    if (typeof d3 === 'undefined') {
      console.error('D3.js library not loaded. Cannot initialize org chart.');
      const orgChart = document.getElementById('orgChart');
      if (orgChart) {
        orgChart.innerHTML = `
          <div class="flex flex-col items-center justify-center h-full p-8 text-center">
            <i class="fas fa-exclamation-circle text-red-500 text-3xl mb-4"></i>
            <h3 class="font-bold">Cannot load organization chart</h3>
            <p class="text-gray-500 mt-2">Required libraries are not available.</p>
          </div>
        `;
      }
      return;
    }
    
    // Parse filter values
    const clientFilter = document.getElementById('clientFilter')?.value || 'all';
    const streamFilter = document.getElementById('streamFilter')?.value || 'all';
    
    // Display options
    const showNames = document.getElementById('showNames')?.checked ?? true;
    const showRoles = document.getElementById('showRoles')?.checked ?? true;
    const showClients = document.getElementById('showClients')?.checked ?? true;
    
    // Cache current layout
    this.currentOrgChartLayout = this.currentOrgChartLayout || 'vertical';
    
    // Clear any existing SVG
    const orgChart = document.getElementById('orgChart');
    if (!orgChart) return;
    
    d3.select("#orgChart").selectAll("*").remove();

    // Prepare the data
    const data = this.prepareOrgChartData(clientFilter, streamFilter);
    if (!data || !data.children || data.children.length === 0) {
      orgChart.innerHTML = `
        <div class="flex flex-col items-center justify-center h-full p-8 text-center">
          <i class="fas fa-users text-gray-400 text-3xl mb-4"></i>
          <h3 class="font-bold">No organization data</h3>
          <p class="text-gray-500 mt-2">Add teams and personnel to see the organization chart.</p>
        </div>
      `;
      return;
    }

    // Set up the SVG
    const width = orgChart.clientWidth;
    const height = orgChart.clientHeight || 600;
    
    const svg = d3.select("#orgChart")
      .append("svg")
      .attr("width", "100%")
      .attr("height", "100%")
      .attr("viewBox", `0 0 ${width} ${height}`)
      .attr("preserveAspectRatio", "xMidYMid meet");

    // Create a group for zooming and panning
    const g = svg.append("g");
    
    // Create the chart layout based on current orientation
    let treeLayout;
    
    if (this.currentOrgChartLayout === 'horizontal') {
      treeLayout = d3.tree()
        .size([height - 100, width - 200]);
    } else if (this.currentOrgChartLayout === 'compact') {
      treeLayout = d3.cluster()
        .size([2 * Math.PI, Math.min(width, height) / 2 - 120]);
    } else {
      // Default to vertical layout
      treeLayout = d3.tree()
        .size([width - 100, height - 200]);
    }

    // Create the root node
    const root = d3.hierarchy(data);
    
    // Generate the tree layout
    let treeData;
    
    if (this.currentOrgChartLayout === 'compact') {
      // For radial layout
      treeData = treeLayout(root);
      
      // Position nodes in a circle
      g.attr("transform", `translate(${width / 2},${height / 2})`);
      
      // Add links
      g.selectAll(".link")
        .data(treeData.links())
        .enter()
        .append("path")
        .attr("class", "link")
        .attr("d", d3.linkRadial()
          .angle(d => d.x)
          .radius(d => d.y))
        .style("fill", "none")
        .style("stroke", "#ccc")
        .style("stroke-width", "1.5px");
      
      // Add nodes
      const node = g.selectAll(".node")
        .data(treeData.descendants())
        .enter()
        .append("g")
        .attr("class", "node")
        .attr("transform", d => `translate(${d.y * Math.sin(d.x)},${-d.y * Math.cos(d.x)})`)
        .on("click", (event, d) => this.showNodeDetails(d.data));
      
      // Add node circles
      node.append("circle")
        .attr("r", d => d.data.type === 'team' ? 15 : 10)
        .style("fill", d => {
          const stream = d.data.stream || 'default';
          return window.config?.colors?.[stream] || '#ccc';
        })
        .style("stroke", "#fff")
        .style("stroke-width", "2px");
      
      // Add node labels
      if (showNames) {
        node.append("text")
          .attr("dy", d => d.data.type === 'team' ? -20 : -15)
          .attr("text-anchor", "middle")
          .attr("font-size", d => d.data.type === 'team' ? "12px" : "10px")
          .attr("font-weight", d => d.data.type === 'team' ? "bold" : "normal")
          .text(d => d.data.name)
          .style("fill", "#333");
      }
      
      // Add role labels
      if (showRoles && showNames) {
        node.append("text")
          .attr("dy", -5)
          .attr("text-anchor", "middle")
          .attr("font-size", "9px")
          .text(d => d.data.role || "")
          .style("fill", "#666");
      }
      
      // Add client labels
      if (showClients && showNames) {
        node.append("text")
          .attr("dy", 20)
          .attr("text-anchor", "middle")
          .attr("font-size", "8px")
          .attr("font-style", "italic")
          .text(d => d.data.client || "")
          .style("fill", "#999");
      }
      
    } else if (this.currentOrgChartLayout === 'horizontal') {
      // For horizontal layout
      treeData = treeLayout(root);
      
      // Add links
      g.selectAll(".link")
        .data(treeData.links())
        .enter()
        .append("path")
        .attr("class", "link")
        .attr("d", d3.linkHorizontal()
          .x(d => d.y)
          .y(d => d.x))
        .style("fill", "none")
        .style("stroke", "#ccc")
        .style("stroke-width", "1.5px");

      // Add nodes
      const node = g.selectAll(".node")
        .data(treeData.descendants())
        .enter()
        .append("g")
        .attr("class", "node")
        .attr("transform", d => `translate(${d.y},${d.x})`)
        .on("click", (event, d) => this.showNodeDetails(d.data));
      
      // Add node circles
      node.append("circle")
        .attr("r", d => d.data.type === 'team' ? 15 : 10)
        .style("fill", d => {
          const stream = d.data.stream || 'default';
          return window.config?.colors?.[stream] || '#ccc';
        })
        .style("stroke", "#fff")
        .style("stroke-width", "2px");
      
      // Add node labels
      if (showNames) {
        node.append("text")
          .attr("dx", d => d.children ? -8 : 8)
          .attr("dy", 4)
          .attr("text-anchor", d => d.children ? "end" : "start")
          .attr("font-size", d => d.data.type === 'team' ? "12px" : "10px")
          .attr("font-weight", d => d.data.type === 'team' ? "bold" : "normal")
          .text(d => d.data.name)
          .style("fill", "#333");
      }
      
      // Add role labels
      if (showRoles) {
        node.append("text")
          .attr("dx", d => d.children ? -8 : 8)
          .attr("dy", 18)
          .attr("text-anchor", d => d.children ? "end" : "start")
          .attr("font-size", "9px")
          .text(d => d.data.role || "")
          .style("fill", "#666");
      }
      
      // Add client labels
      if (showClients) {
        node.append("text")
          .attr("dx", d => d.children ? -8 : 8)
          .attr("dy", 30)
          .attr("text-anchor", d => d.children ? "end" : "start")
          .attr("font-size", "8px")
          .attr("font-style", "italic")
          .text(d => d.data.client || "")
          .style("fill", "#999");
      }
      
    } else {
      // For vertical layout (default)
      treeData = treeLayout(root);
      
      // Add links
      g.selectAll(".link")
        .data(treeData.links())
        .enter()
        .append("path")
        .attr("class", "link")
        .attr("d", d3.linkVertical()
          .x(d => d.x)
          .y(d => d.y))
        .style("fill", "none")
        .style("stroke", "#ccc")
        .style("stroke-width", "1.5px");

      // Add nodes
      const node = g.selectAll(".node")
        .data(treeData.descendants())
        .enter()
        .append("g")
        .attr("class", "node")
        .attr("transform", d => `translate(${d.x},${d.y})`)
        .on("click", (event, d) => this.showNodeDetails(d.data));
        
      // Add node rectangles with rounded corners for teams
      node.filter(d => d.data.type === 'team')
        .append("rect")
        .attr("x", -50)
        .attr("y", -20)
        .attr("width", 100)
        .attr("height", 40)
        .attr("rx", 5)
        .attr("ry", 5)
        .style("fill", d => {
          const stream = d.data.stream || 'default';
          return window.config?.colors?.[stream] || '#ccc';
        })
        .style("stroke", "#fff")
        .style("stroke-width", "2px");
        
      // Add node circles for personnel
      node.filter(d => d.data.type !== 'team')
        .append("circle")
        .attr("r", 10)
        .style("fill", d => {
          const stream = d.data.stream || 'default';
          return window.config?.colors?.[stream] || '#ccc';
        })
        .style("stroke", "#fff")
        .style("stroke-width", "2px");
      
      // Add node labels
      if (showNames) {
        // Team labels
        node.filter(d => d.data.type === 'team')
          .append("text")
          .attr("text-anchor", "middle")
          .attr("dominant-baseline", "central")
          .attr("font-size", "11px")
          .attr("font-weight", "bold")
          .attr("fill", "white")
          .text(d => {
            const name = d.data.name || "";
            return name.length > 15 ? name.substring(0, 12) + "..." : name;
          });
          
        // Personnel labels
        node.filter(d => d.data.type !== 'team')
          .append("text")
          .attr("dy", -15)
          .attr("text-anchor", "middle")
          .attr("font-size", "10px")
          .text(d => d.data.name)
          .style("fill", "#333");
      }
      
      // Add role labels for personnel
      if (showRoles) {
        node.filter(d => d.data.type !== 'team')
          .append("text")
          .attr("dy", 20)
          .attr("text-anchor", "middle")
          .attr("font-size", "8px")
          .text(d => d.data.role || "")
          .style("fill", "#666");
      }
      
      // Add client labels for personnel
      if (showClients) {
        node.filter(d => d.data.type !== 'team' && d.data.client)
          .append("text")
          .attr("dy", 32)
          .attr("text-anchor", "middle")
          .attr("font-size", "8px")
          .attr("font-style", "italic")
          .text(d => d.data.client || "")
          .style("fill", "#999");
      }
    }

    // Add zoom behavior
    const zoom = d3.zoom()
      .scaleExtent([0.1, 3])
      .on("zoom", (event) => {
        g.attr("transform", event.transform);
        // Update zoom level display
        document.getElementById('zoomLevel').textContent = `${Math.round(event.transform.k * 100)}%`;
      });

    svg.call(zoom);

    // Center the visualization initially
    const svgNode = svg.node();
    if (svgNode) {
      const bounds = g.node().getBBox();
      const transX = width / 2 - (bounds.x + bounds.width / 2);
      const transY = 40; // Add top margin
      
      svg.call(zoom.transform, d3.zoomIdentity
        .translate(transX, transY)
        .scale(0.8));
      
      // Update zoom level display
      document.getElementById('zoomLevel').textContent = '80%';
    }
    
    // Store references for later use
    this.orgChartSvg = svg;
    this.orgChartZoom = zoom;
  },

  // Prepare hierarchical data for org chart
  prepareOrgChartData(clientFilter = 'all', streamFilter = 'all') {
    // Check if we have teams data
    if (!window.appData || !window.appData.teams || !Array.isArray(window.appData.teams) || window.appData.teams.length === 0) {
      return null;
    }
    
    // Filter teams by stream if specified
    let filteredTeams = window.appData.teams;
    if (streamFilter !== 'all') {
      filteredTeams = filteredTeams.filter(team => team && team.stream === streamFilter);
    }
    
    // Create the organizational structure
    const root = {
      name: "Quality Organization",
      stream: "root",
      type: "organization",
      children: []
    };
    
    // Group teams by stream
    const streamGroups = {};
    
    filteredTeams.forEach(team => {
      if (!team) return;
      
      const stream = team.stream || "unknown";
      
      if (!streamGroups[stream]) {
        streamGroups[stream] = {
          name: stream.toUpperCase() + " Stream",
          stream: stream,
          type: "stream",
          children: []
        };
        root.children.push(streamGroups[stream]);
      }
      
      // Create team node
      const teamNode = {
        id: team.id,
        name: team.name || "Unnamed Team",
        stream: stream,
        type: "team",
        description: team.description,
        responsibilities: team.responsibilities,
        performance: team.performance,
        children: []
      };
      
      // Add personnel nodes filtered by client if needed
      if (Array.isArray(team.personnel)) {
        team.personnel.forEach(person => {
          if (!person) return;
          
          // Apply client filter
          if (clientFilter !== 'all' && person.client !== clientFilter) {
            return;
          }
          
          teamNode.children.push({
            id: person.id,
            name: person.name || "Unnamed",
            stream: stream,
            type: "person",
            role: person.role,
            client: person.client,
            skills: person.skills
          });
        });
      }
      
      // Only add team if it has personnel after filtering
      if (clientFilter === 'all' || teamNode.children.length > 0) {
        streamGroups[stream].children.push(teamNode);
      }
    });
    
    // Remove empty streams
    root.children = root.children.filter(stream => stream.children.length > 0);
    
    return root;
  },

  // Change org chart layout
  changeOrgChartLayout(layout) {
    if (layout !== this.currentOrgChartLayout) {
      this.currentOrgChartLayout = layout;
      this.updateOrgChart();
    }
  },

  // Update the org chart
  updateOrgChart() {
    this.initializeOrgChart();
  },

  // Zoom org chart
  zoomOrgChart(factor) {
    if (!this.orgChartSvg || !this.orgChartZoom) return;
    
    const currentTransform = d3.zoomTransform(this.orgChartSvg.node());
    const newScale = currentTransform.k * factor;
    
    this.orgChartSvg.transition()
      .duration(300)
      .call(this.orgChartZoom.transform, d3.zoomIdentity
        .translate(currentTransform.x, currentTransform.y)
        .scale(newScale));
    
    // Update zoom level display
    document.getElementById('zoomLevel').textContent = `${Math.round(newScale * 100)}%`;
  },

  // Reset org chart zoom
  resetOrgChartZoom() {
    if (!this.orgChartSvg || !this.orgChartZoom) return;
    
    const width = document.getElementById('orgChart').clientWidth;
    const g = this.orgChartSvg.select("g");
    const bounds = g.node().getBBox();
    const transX = width / 2 - (bounds.x + bounds.width / 2);
    const transY = 40; // Add top margin
    
    this.orgChartSvg.transition()
      .duration(500)
      .call(this.orgChartZoom.transform, d3.zoomIdentity
        .translate(transX, transY)
        .scale(0.8));
    
    // Update zoom level display
    document.getElementById('zoomLevel').textContent = '80%';
  },

  // Search in org chart
  searchOrgChart(searchTerm) {
    if (!searchTerm) {
      // Reset all nodes to normal opacity
      d3.selectAll(".node")
        .style("opacity", 1)
        .select("circle, rect")
        .style("stroke", "#fff");
      return;
    }
    
    searchTerm = searchTerm.toLowerCase();
    
    d3.selectAll(".node").each(function(d) {
      // Check if node data matches search term
      const node = d3.select(this);
      const data = d.data;
      
      const nameMatch = (data.name || "").toLowerCase().includes(searchTerm);
      const roleMatch = (data.role || "").toLowerCase().includes(searchTerm);
      const clientMatch = (data.client || "").toLowerCase().includes(searchTerm);
      
      const matches = nameMatch || roleMatch || clientMatch;
      
      // Highlight matching nodes
      node.style("opacity", matches ? 1 : 0.2);
      node.select("circle, rect")
        .style("stroke", matches ? "#ff6b6b" : "#fff")
        .style("stroke-width", matches ? 3 : 2);
    });
  },

  // Export org chart as SVG
  exportOrgChart() {
    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <h2 class="text-xl font-semibold mb-4">Export Organization Chart</h2>
        <div class="space-y-4">
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <button class="btn-secondary p-6 text-center flex flex-col items-center justify-center" id="exportSvgBtn">
              <i class="fas fa-file-image text-3xl mb-2"></i>
              <span class="text-lg font-medium">SVG Format</span>
              <span class="text-sm text-gray-500">Vector graphic for high-quality prints</span>
            </button>
            <button class="btn-secondary p-6 text-center flex flex-col items-center justify-center" id="exportPngBtn">
              <i class="fas fa-image text-3xl mb-2"></i>
              <span class="text-lg font-medium">PNG Format</span>
              <span class="text-sm text-gray-500">Image for presentations and documents</span>
            </button>
          </div>
        </div>
        <div class="flex justify-end mt-4">
          <button class="btn-secondary" onclick="ui.hideModal()">Cancel</button>
        </div>
      </div>
    `;
    document.body.appendChild(modal);
    
    // Add export button handlers
    document.getElementById('exportSvgBtn').addEventListener('click', () => {
      this.exportOrgChartSvg();
      this.hideModal();
    });
    
    document.getElementById('exportPngBtn').addEventListener('click', () => {
      this.exportOrgChartPng();
      this.hideModal();
    });
  },
  
  // Export org chart as SVG
  exportOrgChartSvg() {
    const svg = document.querySelector("#orgChart svg");
    if (!svg) {
      this.showToast('Error: SVG element not found', 'error');
      return;
    }
    
    try {
      // Get client and stream filter values for filename
      const clientFilter = document.getElementById('clientFilter')?.value || 'all';
      const streamFilter = document.getElementById('streamFilter')?.value || 'all';
      
      // Clone the SVG to avoid modifying the original
      const svgClone = svg.cloneNode(true);
      
      // Add CSS styles to the SVG
      const style = document.createElement('style');
      style.textContent = `
        .node circle, .node rect {
          stroke: #fff;
          stroke-width: 2px;
        }
        .link {
          fill: none;
          stroke: #ccc;
          stroke-width: 1.5px;
        }
        text {
          font-family: Arial, sans-serif;
        }
      `;
      svgClone.appendChild(style);
      
      // Set explicit width and height
      svgClone.setAttribute('width', '1200');
      svgClone.setAttribute('height', '800');
      
      // Add title and metadata
      const title = document.createElement('title');
      title.textContent = 'Quality Organization Chart';
      svgClone.appendChild(title);
      
      const metadata = document.createElement('metadata');
      metadata.innerHTML = `<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
        <rdf:Description>
          <dc:title xmlns:dc="http://purl.org/dc/elements/1.1/">Quality Organization Chart</dc:title>
          <dc:date xmlns:dc="http://purl.org/dc/elements/1.1/">${new Date().toISOString()}</dc:date>
        </rdf:Description>
      </rdf:RDF>`;
      svgClone.appendChild(metadata);
      
      // Add footer text with generation info
      const footer = document.createElementNS("http://www.w3.org/2000/svg", "text");
      footer.setAttribute("x", "10");
      footer.setAttribute("y", "790");
      footer.setAttribute("font-size", "10");
      footer.setAttribute("fill", "#999");
      footer.textContent = `Generated: ${new Date().toLocaleString()}`;
      svgClone.appendChild(footer);
      
      // Add filter info if applicable
      if (clientFilter !== 'all' || streamFilter !== 'all') {
        const filterInfo = document.createElementNS("http://www.w3.org/2000/svg", "text");
        filterInfo.setAttribute("x", "10");
        filterInfo.setAttribute("y", "770");
        filterInfo.setAttribute("font-size", "10");
        filterInfo.setAttribute("fill", "#999");
        
        let filterText = 'Filtered by: ';
        if (streamFilter !== 'all') filterText += `Stream: ${streamFilter.toUpperCase()} `;
        if (clientFilter !== 'all') filterText += `Client: ${clientFilter}`;
        
        filterInfo.textContent = filterText;
        svgClone.appendChild(filterInfo);
      }
      
      // Convert to SVG string
      const serializer = new XMLSerializer();
      const source = serializer.serializeToString(svgClone);
      
      // Create and trigger download
      const blob = new Blob([source], { type: "image/svg+xml" });
      const url = URL.createObjectURL(blob);
      
      // Generate filename based on filters
      let filename = 'org-chart';
      if (streamFilter !== 'all') filename += `-${streamFilter}`;
      if (clientFilter !== 'all') filename += `-${clientFilter.replace(/\s+/g, '-')}`;
      
      const a = document.createElement("a");
      a.href = url;
      a.download = `${filename}.svg`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      
      this.showToast('SVG exported successfully', 'success');
    } catch (error) {
      console.error('Error exporting SVG:', error);
      this.showToast('Error exporting SVG: ' + error.message, 'error');
    }
  },
  
  // Export org chart as PNG
  exportOrgChartPng() {
    const svg = document.querySelector("#orgChart svg");
    if (!svg) {
      this.showToast('Error: SVG element not found', 'error');
      return;
    }
    
    try {
      // Check if html2canvas is loaded
      if (typeof html2canvas === 'undefined') {
        this.showToast('Error: html2canvas library not loaded', 'error');
        return;
      }
      
      // Get client and stream filter values for filename
      const clientFilter = document.getElementById('clientFilter')?.value || 'all';
      const streamFilter = document.getElementById('streamFilter')?.value || 'all';
      
      // Generate filename based on filters
      let filename = 'org-chart';
      if (streamFilter !== 'all') filename += `-${streamFilter}`;
      if (clientFilter !== 'all') filename += `-${clientFilter.replace(/\s+/g, '-')}`;
      
      // Use html2canvas to create PNG
      html2canvas(svg).then(canvas => {
        // Create and trigger download
        const link = document.createElement('a');
        link.download = `${filename}.png`;
        link.href = canvas.toDataURL('image/png');
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        
        this.showToast('PNG exported successfully', 'success');
      }).catch(error => {
        console.error('Error creating PNG:', error);
        this.showToast('Error creating PNG: ' + error.message, 'error');
      });
    } catch (error) {
      console.error('Error exporting PNG:', error);
      this.showToast('Error exporting PNG: ' + error.message, 'error');
    }
  },
  
  // Show node details
  showNodeDetails(nodeData) {
    if (!nodeData) return;
    
    const detailsDiv = document.getElementById('nodeDetails');
    const titleDiv = document.getElementById('detailsTitle');
    const contentDiv = document.getElementById('detailsContent');
    
    if (!detailsDiv || !titleDiv || !contentDiv) return;
    
    // Set title based on node type
    titleDiv.textContent = nodeData.type === 'team' ? 'Team Details' : 'Personnel Details';
    
    // Create content based on node type
    let content = '';
    
    if (nodeData.type === 'team') {
      content = `
        <div class="space-y-4">
          <div>
            <h4 class="font-semibold">Name</h4>
            <p>${this.sanitizeHtml(nodeData.name)}</p>
          </div>
          <div>
            <h4 class="font-semibold">Stream</h4>
            <p class="capitalize">${this.sanitizeHtml(nodeData.stream)}</p>
          </div>
          ${nodeData.description ? `
            <div>
              <h4 class="font-semibold">Description</h4>
              <p>${this.sanitizeHtml(nodeData.description)}</p>
            </div>
          ` : ''}
          ${nodeData.responsibilities ? `
            <div>
              <h4 class="font-semibold">Responsibilities</h4>
              <p>${this.sanitizeHtml(nodeData.responsibilities)}</p>
            </div>
          ` : ''}
          ${nodeData.performance !== undefined ? `
            <div>
              <h4 class="font-semibold">Performance</h4>
              <div class="w-full bg-gray-200 rounded-full h-2 mb-1">
                <div class="bg-${nodeData.stream}-600 h-2 rounded-full" style="width: ${nodeData.performance}%"></div>
              </div>
              <p class="text-right text-sm text-gray-600">${nodeData.performance}%</p>
            </div>
          ` : ''}
          <div class="flex justify-end">
            <button class="btn-primary" onclick="ui.viewTeamDetails(${nodeData.id})">View Full Details</button>
          </div>
        </div>
      `;
    } else {
      content = `
        <div class="space-y-4">
          <div>
            <h4 class="font-semibold">Name</h4>
            <p>${this.sanitizeHtml(nodeData.name)}</p>
          </div>
          ${nodeData.role ? `
            <div>
              <h4 class="font-semibold">Role</h4>
              <p>${this.sanitizeHtml(nodeData.role)}</p>
            </div>
          ` : ''}
          ${nodeData.client ? `
            <div>
              <h4 class="font-semibold">Client</h4>
              <p>${this.sanitizeHtml(nodeData.client)}</p>
            </div>
          ` : ''}
          ${nodeData.skills && Object.keys(nodeData.skills).length > 0 ? `
            <div>
              <h4 class="font-semibold">Skills</h4>
              <div class="flex flex-wrap gap-1 mt-2">
                ${Object.entries(nodeData.skills).map(([skill, level]) => `
                  <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-${nodeData.stream}-100 text-${nodeData.stream}-800">
                    ${this.sanitizeHtml(skill)}: ${level}
                  </span>
                `).join('')}
              </div>
            </div>
          ` : ''}
        </div>
      `;
    }
    
    contentDiv.innerHTML = content;
    detailsDiv.classList.remove('hidden');
  },
  
  // View team details from org chart node
  viewTeamDetails(teamId) {
    // Hide the node details panel
    document.getElementById('nodeDetails')?.classList.add('hidden');
    
    // Show the team details
    this.showTeamDetails(teamId);
  },

  loadDocumentation() {
    const tabContent = document.getElementById('tabContent');
    if (!tabContent) return;
    
    // Check if already loading
    if (tabContent.dataset.loading === 'true') {
      console.log('Documentation already loading, skipping duplicate load');
      return;
    }

    // Set loading state
    tabContent.dataset.loading = 'true';
    
    tabContent.innerHTML = `
      <div class="space-y-6">
        <div class="flex justify-between items-center">
          <h2 class="text-2xl font-semibold">Documentation</h2>
          <button class="btn-primary" onclick="ui.showAddDocumentModal()">
            <i class="fas fa-plus mr-2"></i> Add Document
          </button>
        </div>

        <!-- Document Filters -->
        <div class="flex space-x-4 mb-4">
          <select id="docTypeFilter" class="form-select" onchange="ui.filterDocuments()">
            <option value="">All Types</option>
            <option value="manual">Quality Manual</option>
            <option value="procedure">Procedure</option>
            <option value="form">Form</option>
            <option value="report">Report</option>
          </select>
          <select id="docStatusFilter" class="form-select" onchange="ui.filterDocuments()">
            <option value="">All Statuses</option>
            <option value="draft">Draft</option>
            <option value="review">In Review</option>
            <option value="approved">Approved</option>
            <option value="archived">Archived</option>
          </select>
          <input type="text" id="docSearch" class="form-input flex-1" 
                 placeholder="Search documents..." oninput="ui.filterDocuments()">
        </div>

        <!-- Documents Grid -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6" id="documentsGrid">
          ${this.renderDocumentationCards()}
        </div>
      </div>
    `;
    
    // Reset loading state
    tabContent.dataset.loading = 'false';
  },

  renderDocumentationCards() {
    if (!window.appData || !window.appData.documents || !Array.isArray(window.appData.documents) || window.appData.documents.length === 0) {
      return '<p class="text-gray-500 text-center py-8">No documents found. Use the "Add Document" button to create your first document.</p>';
    }
    
    return window.appData.documents.map(doc => `
      <div class="card document-card" data-type="${doc.type}" data-status="${doc.status}">
        <div class="flex justify-between items-start mb-4">
          <div>
            <h3 class="text-xl font-semibold">${doc.title}</h3>
            <p class="text-sm text-gray-600">${doc.type.charAt(0).toUpperCase() + doc.type.slice(1)}</p>
          </div>
          <div class="flex space-x-2">
            <button class="btn-icon" onclick="ui.editDocument(${doc.id})">
              <i class="fas fa-edit"></i>
            </button>
            <button class="btn-icon" onclick="ui.deleteDocument(${doc.id})">
              <i class="fas fa-trash"></i>
            </button>
          </div>
        </div>

        <div class="space-y-4">
          <div>
            <p class="text-gray-600">${doc.description}</p>
          </div>

          <div class="flex items-center justify-between">
            <div class="flex items-center space-x-2">
              <span class="px-2 py-1 text-xs rounded-full ${
                doc.status === 'approved' ? 'bg-green-100 text-green-800' :
                doc.status === 'review' ? 'bg-yellow-100 text-yellow-800' :
                doc.status === 'draft' ? 'bg-gray-100 text-gray-800' :
                'bg-red-100 text-red-800'
              }">
                ${doc.status.charAt(0).toUpperCase() + doc.status.slice(1)}
              </span>
              <span class="text-sm text-gray-500">v${doc.version}</span>
            </div>
            <span class="text-sm text-gray-500">Last updated: ${doc.lastUpdated}</span>
          </div>

          <div class="flex items-center justify-between">
            <div class="flex items-center space-x-2">
              <button class="btn-secondary btn-sm" onclick="ui.viewDocument(${doc.id})">
                <i class="fas fa-eye mr-2"></i> View
              </button>
              <button class="btn-secondary btn-sm" onclick="ui.downloadDocument(${doc.id})">
                <i class="fas fa-download mr-2"></i> Download
              </button>
            </div>
            <button class="btn-secondary btn-sm" onclick="ui.showVersionHistory(${doc.id})">
              <i class="fas fa-history mr-2"></i> History
            </button>
          </div>
        </div>
      </div>
    `).join('');
  },

  filterDocuments() {
    const typeFilter = document.getElementById("docTypeFilter").value;
    const statusFilter = document.getElementById("docStatusFilter").value;
    const searchTerm = document.getElementById("docSearch").value.toLowerCase();
    const cards = document.querySelectorAll(".document-card");

    cards.forEach(card => {
      const type = card.getAttribute("data-type");
      const status = card.getAttribute("data-status");
      const title = card.querySelector("h3").textContent.toLowerCase();
      const description = card.querySelector(".text-gray-600").textContent.toLowerCase();
      
      const matchesType = !typeFilter || type === typeFilter;
      const matchesStatus = !statusFilter || status === statusFilter;
      const matchesSearch = !searchTerm || 
        title.includes(searchTerm) || 
        description.includes(searchTerm);
      
      card.style.display = matchesType && matchesStatus && matchesSearch ? "" : "none";
    });
  },

  showAddDocumentModal() {
    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <h2 class="text-xl font-semibold mb-4">Add New Document</h2>
        <form id="addDocumentForm">
          <div class="form-group">
            <label for="docTitle">Title</label>
            <input type="text" id="docTitle" required>
          </div>
          <div class="form-group">
            <label for="docType">Type</label>
            <select id="docType" required>
              <option value="manual">Quality Manual</option>
              <option value="procedure">Procedure</option>
              <option value="form">Form</option>
              <option value="report">Report</option>
            </select>
          </div>
          <div class="form-group">
            <label for="docDescription">Description</label>
            <textarea id="docDescription" rows="3" required></textarea>
          </div>
          <div class="form-group">
            <label for="docFile">Document File</label>
            <input type="file" id="docFile" required>
          </div>
          <div class="flex justify-end space-x-2 mt-4">
            <button type="button" class="btn-secondary" onclick="ui.hideModal()">Cancel</button>
            <button type="submit" class="btn-primary">Add Document</button>
          </div>
        </form>
      </div>
    `;
    document.body.appendChild(modal);

    const form = modal.querySelector('#addDocumentForm');
    form.addEventListener('submit', (e) => {
      e.preventDefault();
      const file = form.querySelector('#docFile').files[0];
      const reader = new FileReader();

      reader.onload = (event) => {
        const doc = {
          id: Date.now(),
          title: form.querySelector('#docTitle').value,
          type: form.querySelector('#docType').value,
          description: form.querySelector('#docDescription').value,
          content: event.target.result,
          version: 1,
          status: 'draft',
          lastUpdated: new Date().toISOString().split('T')[0],
          history: [{
            version: 1,
            date: new Date().toISOString().split('T')[0],
            changes: 'Initial version',
            author: window.appData.state.userName
          }]
        };
        
        if (!window.appData.documents) window.appData.documents = [];
        window.appData.documents.push(doc);
        
        this.saveChanges();
        this.hideModal();
        this.showToast('Document added successfully', 'success');
        this.loadDocumentation();
      };

      reader.readAsText(file);
    });
  },

  editDocument(docId) {
    const doc = window.appData.documents.find(d => d.id === docId);
    if (!doc) return;

    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <h2 class="text-xl font-semibold mb-4">Edit Document</h2>
        <form id="editDocumentForm">
          <div class="form-group">
            <label for="docTitle">Title</label>
            <input type="text" id="docTitle" value="${doc.title}" required>
          </div>
          <div class="form-group">
            <label for="docType">Type</label>
            <select id="docType" required>
              <option value="manual" ${doc.type === 'manual' ? 'selected' : ''}>Quality Manual</option>
              <option value="procedure" ${doc.type === 'procedure' ? 'selected' : ''}>Procedure</option>
              <option value="form" ${doc.type === 'form' ? 'selected' : ''}>Form</option>
              <option value="report" ${doc.type === 'report' ? 'selected' : ''}>Report</option>
            </select>
          </div>
          <div class="form-group">
            <label for="docDescription">Description</label>
            <textarea id="docDescription" rows="3" required>${doc.description}</textarea>
          </div>
          <div class="form-group">
            <label for="docStatus">Status</label>
            <select id="docStatus" required>
              <option value="draft" ${doc.status === 'draft' ? 'selected' : ''}>Draft</option>
              <option value="review" ${doc.status === 'review' ? 'selected' : ''}>In Review</option>
              <option value="approved" ${doc.status === 'approved' ? 'selected' : ''}>Approved</option>
              <option value="archived" ${doc.status === 'archived' ? 'selected' : ''}>Archived</option>
            </select>
          </div>
          <div class="flex justify-end space-x-2 mt-4">
            <button type="button" class="btn-secondary" onclick="ui.hideModal()">Cancel</button>
            <button type="submit" class="btn-primary">Save Changes</button>
          </div>
        </form>
      </div>
    `;
    document.body.appendChild(modal);

    const form = modal.querySelector('#editDocumentForm');
    form.addEventListener('submit', (e) => {
      e.preventDefault();
      doc.title = form.querySelector('#docTitle').value;
      doc.type = form.querySelector('#docType').value;
      doc.description = form.querySelector('#docDescription').value;
      doc.status = form.querySelector('#docStatus').value;
      doc.lastUpdated = new Date().toISOString().split('T')[0];
      
      this.saveChanges();
      this.hideModal();
      this.showToast('Document updated successfully', 'success');
      this.loadDocumentation();
    });
  },

  deleteDocument(docId) {
    if (confirm('Are you sure you want to delete this document? This action cannot be undone.')) {
      window.appData.documents = window.appData.documents.filter(d => d.id !== docId);
      this.saveChanges();
      this.showToast('Document deleted successfully', 'success');
      this.loadDocumentation();
    }
  },

  viewDocument(docId) {
    const doc = window.appData.documents.find(d => d.id === docId);
    if (!doc) return;

    const modal = document.createElement('div');
    modal.className = 'modal modal-lg';
    modal.innerHTML = `
      <div class="modal-content">
        <div class="flex justify-between items-center mb-4">
          <h2 class="text-xl font-semibold">${doc.title}</h2>
          <button class="btn-icon" onclick="ui.hideModal()">
            <i class="fas fa-times"></i>
          </button>
        </div>
        <div class="prose max-w-none">
          <pre class="whitespace-pre-wrap">${doc.content}</pre>
        </div>
      </div>
    `;
    document.body.appendChild(modal);
  },

  downloadDocument(docId) {
    const doc = window.appData.documents.find(d => d.id === docId);
    if (!doc) return;

    const blob = new Blob([doc.content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${doc.title.toLowerCase().replace(/\s+/g, '-')}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  },

  showVersionHistory(docId) {
    const doc = window.appData.documents.find(d => d.id === docId);
    if (!doc) return;

    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <h2 class="text-xl font-semibold mb-4">Version History - ${doc.title}</h2>
        <div class="space-y-4">
          ${doc.history.map(version => `
            <div class="border-b pb-4">
              <div class="flex justify-between items-start">
                <div>
                  <p class="font-medium">Version ${version.version}</p>
                  <p class="text-sm text-gray-600">${version.changes}</p>
                </div>
                <div class="text-right">
                  <p class="text-sm text-gray-500">${version.date}</p>
                  <p class="text-sm text-gray-500">by ${version.author}</p>
                </div>
              </div>
            </div>
          `).join('')}
        </div>
        <div class="flex justify-end mt-4">
          <button class="btn-secondary" onclick="ui.hideModal()">Close</button>
        </div>
      </div>
    `;
    document.body.appendChild(modal);
  },

  loadPlanning() {
    const tabContent = document.getElementById('tabContent');
    if (!tabContent) return;

    // Check if already loading
    if (tabContent.dataset.loading === 'true') {
      console.log('Planning already loading, skipping duplicate load');
      return;
    }

    // Set loading state
    tabContent.dataset.loading = 'true';

    tabContent.innerHTML = `
      <div class="space-y-6">
        <!-- Org Roll-out Header -->
        <div class="flex justify-between items-center">
          <div>
            <h2 class="text-2xl font-semibold">Organization Roll-out Plan</h2>
            <p class="text-gray-600 mt-1">Track the implementation of the new organizational structure</p>
          </div>
          <div class="flex space-x-4">
            <button class="btn-outline" onclick="ui.exportRolloutPlan()">
              <i class="fas fa-download mr-2"></i> Export
            </button>
            <button class="btn-primary" onclick="ui.showAddPhaseModal()">
              <i class="fas fa-plus mr-2"></i> Add Phase
            </button>
          </div>
        </div>

        <!-- Progress Overview -->
        <div class="bg-white p-6 rounded-lg shadow-sm border border-gray-200">
          <div class="flex justify-between items-center mb-4">
            <h3 class="text-lg font-semibold">Overall Progress</h3>
            <span class="text-lg font-bold">${this.calculateOverallProgress()}%</span>
          </div>
          <div class="w-full bg-gray-200 rounded-full h-2.5 mb-6">
            <div class="bg-blue-600 h-2.5 rounded-full" style="width: ${this.calculateOverallProgress()}%"></div>
          </div>
          
          <div class="grid grid-cols-1 md:grid-cols-4 gap-4 text-center">
            <div class="bg-blue-50 p-4 rounded-lg">
              <h4 class="text-sm font-medium text-blue-700 mb-2">Planning</h4>
              <p class="text-2xl font-bold text-blue-700">${this.calculatePhaseProgress('planning')}%</p>
            </div>
            <div class="bg-yellow-50 p-4 rounded-lg">
              <h4 class="text-sm font-medium text-yellow-700 mb-2">Transition</h4>
              <p class="text-2xl font-bold text-yellow-700">${this.calculatePhaseProgress('transition')}%</p>
            </div>
            <div class="bg-green-50 p-4 rounded-lg">
              <h4 class="text-sm font-medium text-green-700 mb-2">Implementation</h4>
              <p class="text-2xl font-bold text-green-700">${this.calculatePhaseProgress('implementation')}%</p>
            </div>
            <div class="bg-purple-50 p-4 rounded-lg">
              <h4 class="text-sm font-medium text-purple-700 mb-2">Review</h4>
              <p class="text-2xl font-bold text-purple-700">${this.calculatePhaseProgress('review')}%</p>
            </div>
          </div>
        </div>

        <!-- Timeline View -->
        <div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
          <div class="p-4 border-b border-gray-200">
            <h3 class="text-lg font-semibold">Implementation Timeline</h3>
          </div>
          <div class="p-4 overflow-x-auto">
            <div id="rolloutTimeline" class="w-full" style="min-width: 800px; height: 400px;">
              <!-- Timeline will be rendered here -->
            </div>
          </div>
        </div>

        <!-- Key Milestones -->
        <div class="bg-white rounded-lg shadow-sm border border-gray-200">
          <div class="p-4 border-b border-gray-200 flex justify-between items-center">
            <h3 class="text-lg font-semibold">Key Milestones</h3>
            <button class="btn-sm btn-secondary" onclick="ui.showAddMilestoneModal()">
              <i class="fas fa-plus mr-1"></i> Add Milestone
            </button>
          </div>
          <div class="p-0">
            <table class="w-full">
              <thead class="bg-gray-50">
                <tr>
                  <th class="px-4 py-2 text-left">Milestone</th>
                  <th class="px-4 py-2 text-left">Phase</th>
                  <th class="px-4 py-2 text-left">Due Date</th>
                  <th class="px-4 py-2 text-left">Status</th>
                  <th class="px-4 py-2 text-left">Owner</th>
                  <th class="px-4 py-2 text-right">Actions</th>
                </tr>
              </thead>
              <tbody>
                ${this.renderMilestones()}
              </tbody>
            </table>
          </div>
        </div>

        <!-- Detailed Tasks by Phase -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <!-- Planning Phase -->
          <div class="bg-white rounded-lg shadow-sm border border-gray-200">
            <div class="p-4 border-b border-gray-200 bg-blue-50">
              <h3 class="font-semibold">Planning Phase</h3>
            </div>
            <div class="p-4">
              <ul class="space-y-2">
                ${this.renderPhaseTasks('planning')}
              </ul>
            </div>
          </div>

          <!-- Transition Phase -->
          <div class="bg-white rounded-lg shadow-sm border border-gray-200">
            <div class="p-4 border-b border-gray-200 bg-yellow-50">
              <h3 class="font-semibold">Transition Phase</h3>
            </div>
            <div class="p-4">
              <ul class="space-y-2">
                ${this.renderPhaseTasks('transition')}
              </ul>
            </div>
          </div>

          <!-- Implementation Phase -->
          <div class="bg-white rounded-lg shadow-sm border border-gray-200">
            <div class="p-4 border-b border-gray-200 bg-green-50">
              <h3 class="font-semibold">Implementation Phase</h3>
            </div>
            <div class="p-4">
              <ul class="space-y-2">
                ${this.renderPhaseTasks('implementation')}
              </ul>
            </div>
          </div>

          <!-- Review Phase -->
          <div class="bg-white rounded-lg shadow-sm border border-gray-200">
            <div class="p-4 border-b border-gray-200 bg-purple-50">
              <h3 class="font-semibold">Review Phase</h3>
            </div>
            <div class="p-4">
              <ul class="space-y-2">
                ${this.renderPhaseTasks('review')}
              </ul>
            </div>
          </div>
        </div>
      </div>
    `;

    // Initialize the rollout data if it doesn't exist
    if (!window.appData.rollout) {
      this.initializeRolloutData();
    }

    // Render the timeline
    this.renderRolloutTimeline();
    
    // Reset loading state
    tabContent.dataset.loading = 'false';
  },

  initializeRolloutData() {
    // Create initial structure for rollout data if not exists
    if (!window.appData.rollout) {
      window.appData.rollout = {
        phases: {
          planning: {
            name: "Planning",
            progress: 75,
            tasks: [
              { id: 1, name: "Assessment of current structure", status: "complete", owner: "John Smith" },
              { id: 2, name: "Define new organizational structure", status: "complete", owner: "Sarah Johnson" },
              { id: 3, name: "Stakeholder alignment", status: "in_progress", owner: "John Smith" },
              { id: 4, name: "Documentation of roles & responsibilities", status: "in_progress", owner: "Michael Brown" }
            ]
          },
          transition: {
            name: "Transition",
            progress: 40,
            tasks: [
              { id: 5, name: "Communication plan", status: "complete", owner: "Sarah Johnson" },
              { id: 6, name: "Change management strategy", status: "in_progress", owner: "Jane Doe" },
              { id: 7, name: "Training plan development", status: "not_started", owner: "Michael Brown" }
            ]
          },
          implementation: {
            name: "Implementation",
            progress: 15,
            tasks: [
              { id: 8, name: "Team restructuring", status: "in_progress", owner: "John Smith" },
              { id: 9, name: "Role assignments", status: "not_started", owner: "Sarah Johnson" },
              { id: 10, name: "System access updates", status: "not_started", owner: "Robert Williams" }
            ]
          },
          review: {
            name: "Review",
            progress: 0,
            tasks: [
              { id: 11, name: "Effectiveness assessment", status: "not_started", owner: "John Smith" },
              { id: 12, name: "Gap analysis", status: "not_started", owner: "Jane Doe" },
              { id: 13, name: "Adjustment plan", status: "not_started", owner: "Sarah Johnson" }
            ]
          }
        },
        milestones: [
          { 
            id: 1, 
            name: "Organization structure approved", 
            phase: "planning", 
            dueDate: "2025-04-15", 
            status: "complete", 
            owner: "John Smith" 
          },
          { 
            id: 2, 
            name: "Communication rolled out", 
            phase: "transition", 
            dueDate: "2025-05-01", 
            status: "in_progress", 
            owner: "Sarah Johnson" 
          },
          { 
            id: 3, 
            name: "Team restructuring complete", 
            phase: "implementation", 
            dueDate: "2025-06-15", 
            status: "not_started", 
            owner: "John Smith" 
          },
          { 
            id: 4, 
            name: "Post-implementation review", 
            phase: "review", 
            dueDate: "2025-07-01", 
            status: "not_started", 
            owner: "Jane Doe" 
          }
        ]
      };
      this.saveChanges();
    }
  },

  calculateOverallProgress() {
    if (!window.appData || !window.appData.rollout || !window.appData.rollout.phases) return 0;
    
    const phases = window.appData.rollout.phases;
    if (Object.keys(phases).length === 0) return 0;
    
    const totalProgress = Object.values(phases).reduce((sum, phase) => sum + (phase.progress || 0), 0);
    return Math.round(totalProgress / Object.keys(phases).length);
  },

  calculatePhaseProgress(phaseId) {
    if (!window.appData || !window.appData.rollout || !window.appData.rollout.phases || !window.appData.rollout.phases[phaseId]) return 0;
    return window.appData.rollout.phases[phaseId].progress || 0;
  },

  renderMilestones() {
    if (!window.appData || !window.appData.rollout || !window.appData.rollout.milestones || window.appData.rollout.milestones.length === 0) {
      return '<tr><td colspan="6" class="px-4 py-4 text-center text-gray-500">No milestones defined yet</td></tr>';
    }
    
    return window.appData.rollout.milestones.map(milestone => {
      const statusClass = 
        milestone.status === 'complete' ? 'bg-green-100 text-green-800' :
        milestone.status === 'in_progress' ? 'bg-yellow-100 text-yellow-800' :
        'bg-gray-100 text-gray-800';
      
      return `
        <tr class="border-b">
          <td class="px-4 py-3">${milestone.name}</td>
          <td class="px-4 py-3 capitalize">${milestone.phase}</td>
          <td class="px-4 py-3">${milestone.dueDate}</td>
          <td class="px-4 py-3">
            <span class="px-2 py-1 rounded-full text-xs ${statusClass}">
              ${milestone.status.replace('_', ' ').replace(/\b\w/g, l => l.toUpperCase())}
            </span>
          </td>
          <td class="px-4 py-3">${milestone.owner}</td>
          <td class="px-4 py-3 text-right">
            <button class="btn-icon btn-sm" onclick="ui.editMilestone(${milestone.id})">
              <i class="fas fa-edit"></i>
            </button>
            <button class="btn-icon btn-sm" onclick="ui.deleteMilestone(${milestone.id})">
              <i class="fas fa-trash"></i>
            </button>
          </td>
        </tr>
      `;
    }).join('');
  },

  renderPhaseTasks(phaseId) {
    if (!window.appData || !window.appData.rollout || !window.appData.rollout.phases || !window.appData.rollout.phases[phaseId]) {
      return '<li class="text-gray-500 text-center">No tasks defined for this phase</li>';
    }
    
    const phase = window.appData.rollout.phases[phaseId];
    
    if (!phase.tasks || phase.tasks.length === 0) {
      return '<li class="text-gray-500 text-center">No tasks defined for this phase</li>';
    }
    
    return phase.tasks.map(task => {
      const statusIcon = 
        task.status === 'complete' ? '<i class="fas fa-check-circle text-green-500 mr-2"></i>' :
        task.status === 'in_progress' ? '<i class="fas fa-clock text-yellow-500 mr-2"></i>' :
        '<i class="far fa-circle text-gray-400 mr-2"></i>';
      
      return `
        <li class="flex items-center justify-between">
          <div class="flex items-center">
            ${statusIcon}
            <span class="${task.status === 'complete' ? 'line-through text-gray-500' : ''}">${task.name}</span>
          </div>
          <div class="text-sm text-gray-500">
            ${task.owner}
          </div>
        </li>
      `;
    }).join('');
  },

  renderRolloutTimeline() {
    const timelineEl = document.getElementById('rolloutTimeline');
    if (!timelineEl) return;
    
    // Create a simple timeline visualization
    let html = `<div class="relative">`;
    
    // Draw the timeline base line
    html += `<div class="absolute top-9 left-0 w-full h-1 bg-gray-200"></div>`;
    
    // Add milestones to the timeline
    if (window.appData && window.appData.rollout && window.appData.rollout.milestones && window.appData.rollout.milestones.length > 0) {
      const milestones = window.appData.rollout.milestones;
      const totalWidth = timelineEl.clientWidth - 40;
      
      // Sort milestones by due date
      const sortedMilestones = [...milestones].sort((a, b) => 
        new Date(a.dueDate) - new Date(b.dueDate)
      );
      
      // Find the earliest and latest dates
      const startDate = new Date(sortedMilestones[0].dueDate);
      const endDate = new Date(sortedMilestones[sortedMilestones.length - 1].dueDate);
      const totalDays = (endDate - startDate) / (1000 * 60 * 60 * 24);
      
      sortedMilestones.forEach((milestone, index) => {
        const date = new Date(milestone.dueDate);
        const daysDiff = (date - startDate) / (1000 * 60 * 60 * 24);
        const position = Math.floor((daysDiff / totalDays) * totalWidth);
        
        const statusColor = 
          milestone.status === 'complete' ? 'bg-green-500' :
          milestone.status === 'in_progress' ? 'bg-yellow-500' :
          'bg-gray-500';
        
        html += `
          <div class="absolute" style="left: ${position}px; top: 0;">
            <div class="${statusColor} w-5 h-5 rounded-full border-4 border-white shadow-sm"></div>
            <div class="mt-4 -ml-10 w-20 text-center">
              <div class="text-xs font-bold">${milestone.dueDate}</div>
              <div class="text-xs whitespace-normal" style="word-break: break-word;">${milestone.name}</div>
            </div>
          </div>
        `;
      });
    } else {
      // No milestones - show empty timeline with a message
      html += `
        <div class="absolute left-1/2 transform -translate-x-1/2 text-center" style="top: 20px;">
          <p class="text-gray-500">No milestones defined yet</p>
        </div>
      `;
    }
    
    html += `</div>`;
    timelineEl.innerHTML = html;
  },

  showAddPhaseModal() {
    // Implementation for adding a new phase
    this.showToast('Add Phase functionality will be implemented', 'info');
  },

  showAddMilestoneModal() {
    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <h2 class="text-xl font-semibold mb-4">Add New Milestone</h2>
        <form id="addMilestoneForm">
          <div class="form-group">
            <label for="milestoneName">Milestone Name</label>
            <input type="text" id="milestoneName" required>
          </div>
          <div class="form-group">
            <label for="milestonePhase">Phase</label>
            <select id="milestonePhase" required>
              <option value="planning">Planning</option>
              <option value="transition">Transition</option>
              <option value="implementation">Implementation</option>
              <option value="review">Review</option>
            </select>
          </div>
          <div class="form-group">
            <label for="milestoneDueDate">Due Date</label>
            <input type="date" id="milestoneDueDate" required>
          </div>
          <div class="form-group">
            <label for="milestoneStatus">Status</label>
            <select id="milestoneStatus" required>
              <option value="not_started">Not Started</option>
              <option value="in_progress">In Progress</option>
              <option value="complete">Complete</option>
            </select>
          </div>
          <div class="form-group">
            <label for="milestoneOwner">Owner</label>
            <input type="text" id="milestoneOwner" required>
          </div>
          <div class="flex justify-end space-x-2 mt-4">
            <button type="button" class="btn-secondary" onclick="ui.hideModal()">Cancel</button>
            <button type="submit" class="btn-primary">Add Milestone</button>
          </div>
        </form>
      </div>
    `;
    document.body.appendChild(modal);

    const form = modal.querySelector('#addMilestoneForm');
    form.addEventListener('submit', (e) => {
      e.preventDefault();
      
      // Initialize rollout data if needed
      if (!window.appData.rollout) {
        this.initializeRolloutData();
      }
      
      // Get the highest existing milestone ID
      const maxId = Math.max(...window.appData.rollout.milestones.map(m => m.id), 0);
      
      const milestone = {
        id: maxId + 1,
        name: form.querySelector('#milestoneName').value,
        phase: form.querySelector('#milestonePhase').value,
        dueDate: form.querySelector('#milestoneDueDate').value,
        status: form.querySelector('#milestoneStatus').value,
        owner: form.querySelector('#milestoneOwner').value
      };
      
      window.appData.rollout.milestones.push(milestone);
      
      this.saveChanges();
      this.hideModal();
      this.showToast('Milestone added successfully', 'success');
      this.loadPlanning();
    });
  },

  editMilestone(milestoneId) {
    if (!window.appData.rollout) return;
    
    const milestone = window.appData.rollout.milestones.find(m => m.id === milestoneId);
    if (!milestone) return;
    
    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <h2 class="text-xl font-semibold mb-4">Edit Milestone</h2>
        <form id="editMilestoneForm">
          <div class="form-group">
            <label for="milestoneName">Milestone Name</label>
            <input type="text" id="milestoneName" value="${milestone.name}" required>
          </div>
          <div class="form-group">
            <label for="milestonePhase">Phase</label>
            <select id="milestonePhase" required>
              <option value="planning" ${milestone.phase === 'planning' ? 'selected' : ''}>Planning</option>
              <option value="transition" ${milestone.phase === 'transition' ? 'selected' : ''}>Transition</option>
              <option value="implementation" ${milestone.phase === 'implementation' ? 'selected' : ''}>Implementation</option>
              <option value="review" ${milestone.phase === 'review' ? 'selected' : ''}>Review</option>
            </select>
          </div>
          <div class="form-group">
            <label for="milestoneDueDate">Due Date</label>
            <input type="date" id="milestoneDueDate" value="${milestone.dueDate}" required>
          </div>
          <div class="form-group">
            <label for="milestoneStatus">Status</label>
            <select id="milestoneStatus" required>
              <option value="not_started" ${milestone.status === 'not_started' ? 'selected' : ''}>Not Started</option>
              <option value="in_progress" ${milestone.status === 'in_progress' ? 'selected' : ''}>In Progress</option>
              <option value="complete" ${milestone.status === 'complete' ? 'selected' : ''}>Complete</option>
            </select>
          </div>
          <div class="form-group">
            <label for="milestoneOwner">Owner</label>
            <input type="text" id="milestoneOwner" value="${milestone.owner}" required>
          </div>
          <div class="flex justify-end space-x-2 mt-4">
            <button type="button" class="btn-secondary" onclick="ui.hideModal()">Cancel</button>
            <button type="submit" class="btn-primary">Save Changes</button>
          </div>
        </form>
      </div>
    `;
    document.body.appendChild(modal);

    const form = modal.querySelector('#editMilestoneForm');
    form.addEventListener('submit', (e) => {
      e.preventDefault();
      
      milestone.name = form.querySelector('#milestoneName').value;
      milestone.phase = form.querySelector('#milestonePhase').value;
      milestone.dueDate = form.querySelector('#milestoneDueDate').value;
      milestone.status = form.querySelector('#milestoneStatus').value;
      milestone.owner = form.querySelector('#milestoneOwner').value;
      
      this.saveChanges();
      this.hideModal();
      this.showToast('Milestone updated successfully', 'success');
      this.loadPlanning();
    });
  },

  deleteMilestone(milestoneId) {
    if (!window.appData.rollout) return;
    
    if (confirm('Are you sure you want to delete this milestone? This action cannot be undone.')) {
      window.appData.rollout.milestones = window.appData.rollout.milestones.filter(m => m.id !== milestoneId);
      
      this.saveChanges();
      this.showToast('Milestone deleted successfully', 'success');
      this.loadPlanning();
    }
  },

  exportRolloutPlan() {
    if (!window.appData.rollout) {
      this.showToast('No rollout data to export', 'error');
      return;
    }
    
    const data = JSON.stringify(window.appData.rollout, null, 2);
    const blob = new Blob([data], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    
    const link = document.createElement('a');
    link.setAttribute('href', url);
    link.setAttribute('download', 'organization_rollout_plan.json');
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
    
    this.showToast('Rollout plan exported successfully', 'success');
  },

  loadPersonnel() {
    try {
      console.log('Loading personnel content...');
      
      const tabContent = document.getElementById('tabContent');
      if (!tabContent) {
        console.error('Tab content element not found');
        return;
      }
      
      // Check if already loading
      if (tabContent.dataset.loading === 'true' && tabContent.dataset.currentTab === 'personnel') {
        console.log('Personnel already loading, skipping duplicate load request');
        return;
      }

      // Set loading state
      tabContent.dataset.loading = 'true';
      tabContent.dataset.currentTab = 'personnel';
      
      // Clear any existing content
      tabContent.innerHTML = `
        <div class="flex justify-center items-center p-12">
          <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
          <p class="ml-4 text-gray-500">Loading personnel content...</p>
        </div>
      `;
      
      // Use a timeout to ensure loading indicator is shown
      setTimeout(() => {
        try {
          // Ensure appData exists
          if (!window.appData) window.appData = {};
          if (!window.appData.teams) window.appData.teams = [];
          const teams = window.appData.teams;
          
          // Extract all personnel from teams
          const allPersonnel = [];
          teams.forEach(team => {
            if (team && team.personnel) {
              team.personnel.forEach(person => {
                if (person) {
                  allPersonnel.push({
                    ...person,
                    team: team.name || 'Unknown Team',
                    stream: team.stream || 'unknown'
                  });
                }
              });
            }
          });
          
          tabContent.innerHTML = `
            <div class="p-4">
              <div class="flex justify-between items-center mb-6">
                <h2 class="text-2xl font-bold">Personnel</h2>
                <div class="flex items-center gap-4">
                  <div class="relative">
                    <input type="text" id="personnelSearch" placeholder="Search personnel..." 
                      class="border rounded-lg pl-10 pr-4 py-2 w-64 focus:outline-none focus:ring-2 focus:ring-blue-400">
                    <i class="fas fa-search absolute left-3 top-3 text-gray-400"></i>
                  </div>
                  <button class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition flex items-center" id="addPersonBtn">
                    <i class="fas fa-plus mr-2"></i> Add Person
                  </button>
                </div>
              </div>
              
              <!-- Personnel Table -->
              <div class="bg-white rounded-lg shadow overflow-hidden">
                <table class="min-w-full divide-y divide-gray-200">
                  <thead class="bg-gray-50">
                    <tr>
                      <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                      <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Role</th>
                      <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Team</th>
                      <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Client</th>
                      <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                    </tr>
                  </thead>
                  <tbody class="bg-white divide-y divide-gray-200">
                    ${allPersonnel.length > 0 ? allPersonnel.map(person => `
                      <tr>
                        <td class="px-6 py-4 whitespace-nowrap">${person.name || 'Unknown'}</td>
                        <td class="px-6 py-4 whitespace-nowrap">${person.role || 'Unspecified'}</td>
                        <td class="px-6 py-4 whitespace-nowrap">
                          <span class="px-2 py-1 text-xs rounded-full text-white bg-gray-600">${person.team}</span>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">${person.client || 'None'}</td>
                        <td class="px-6 py-4 whitespace-nowrap">
                          <button class="text-blue-600 hover:text-blue-800 mr-2 edit-person-btn" data-person-id="${person.id}" title="Edit">
                            <i class="fas fa-edit"></i>
                          </button>
                          <button class="text-red-600 hover:text-red-800 delete-person-btn" data-person-id="${person.id}" title="Delete">
                            <i class="fas fa-trash-alt"></i>
                          </button>
                        </td>
                      </tr>
                    `).join('') : '<tr><td colspan="5" class="px-6 py-4 text-center text-gray-500">No personnel data available</td></tr>'}
                  </tbody>
                </table>
              </div>
            </div>
          `;
          
          // Add event listeners
          if (allPersonnel.length > 0) {
            this.addPersonnelEventListeners(allPersonnel);
          }
          
          // Reset loading state
          tabContent.dataset.loading = 'false';
          
          console.log('Personnel content loaded successfully');
        } catch (error) {
          console.error('Error loading personnel:', error);
          
          tabContent.innerHTML = `
            <div class="p-8 text-center">
              <div class="text-red-500 text-xl mb-4">
                <i class="fas fa-exclamation-triangle mr-2"></i> 
                Error loading Personnel
              </div>
              <p class="mb-4">${error.message || 'An unknown error occurred'}</p>
              <button class="px-4 py-2 bg-blue-600 text-white rounded" onclick="ui.switchTab('personnel')">
                <i class="fas fa-sync-alt mr-2"></i> Try Again
              </button>
            </div>
          `;
          
          // Reset loading state
          tabContent.dataset.loading = 'false';
        }
      }, 150); // Slightly longer delay for better reliability
    } catch (error) {
      console.error('Critical error in loadPersonnel:', error);
      
      const tabContent = document.getElementById('tabContent');
      if (tabContent) {
        tabContent.innerHTML = `
          <div class="p-8 text-center">
            <div class="text-red-500 text-xl mb-4">
              <i class="fas fa-exclamation-triangle mr-2"></i> 
              Critical Error Loading Personnel
            </div>
            <p class="mb-4">${error.message || 'An unknown error occurred'}</p>
            <button class="px-4 py-2 bg-blue-600 text-white rounded" onclick="location.reload()">
              <i class="fas fa-sync-alt mr-2"></i> Refresh Page
            </button>
          </div>
        `;
        
        // Reset loading state
        tabContent.dataset.loading = 'false';
      }
    }
  },

  // Add a helper method for personnel event listeners
  addPersonnelEventListeners(personnelList) {
    // Add search functionality
    const searchInput = document.getElementById('personnelSearch');
    if (searchInput) {
      searchInput.addEventListener('input', (e) => {
        const value = e.target.value.toLowerCase();
        const rows = document.querySelectorAll('tbody tr');
        
        rows.forEach(row => {
          const text = row.textContent.toLowerCase();
          row.style.display = text.includes(value) ? '' : 'none';
        });
      });
    }
    
    // Add person button
    const addPersonBtn = document.getElementById('addPersonBtn');
    if (addPersonBtn) {
      addPersonBtn.addEventListener('click', () => {
        // Check if teams exist before adding a person
        if (window.appData.teams && window.appData.teams.length > 0) {
          this.showAddPersonModal();
        } else {
          this.showToast('You need to create a team first before adding personnel', 'warning');
        }
      });
    }
    
    // Edit person buttons
    const editBtns = document.querySelectorAll('.edit-person-btn');
    editBtns.forEach(btn => {
      const personId = parseInt(btn.getAttribute('data-person-id'));
      btn.addEventListener('click', () => {
        // Find the person in the personnel list
        const person = personnelList.find(p => p.id === personId);
        if (person) {
          this.editPersonnel(personId);
        }
      });
    });
    
    // Delete person buttons
    const deleteBtns = document.querySelectorAll('.delete-person-btn');
    deleteBtns.forEach(btn => {
      const personId = parseInt(btn.getAttribute('data-person-id'));
      btn.addEventListener('click', () => {
        // Find the team that contains this person
        const team = window.appData.teams.find(t => 
          t.personnel && t.personnel.some(p => p.id === personId)
        );
        
        if (team) {
          this.removePersonnel(personId, team.id);
        }
      });
    });
  },

  // Helper function to show add person modal
  showAddPersonModal() {
    try {
      const teams = window.appData?.teams || [];
      
      if (teams.length === 0) {
        this.showToast('You need to create a team first before adding personnel', 'warning');
        return;
      }
      
      const modal = document.createElement('div');
      modal.className = 'modal';
      modal.innerHTML = `
        <div class="modal-content">
          <h2 class="text-xl font-semibold mb-4">Add New Person</h2>
          <form id="addPersonForm">
            <div class="form-group">
              <label for="personName">Name</label>
              <input type="text" id="personName" required>
            </div>
            <div class="form-group">
              <label for="personRole">Role</label>
              <input type="text" id="personRole" required>
            </div>
            <div class="form-group">
              <label for="personClient">Client</label>
              <input type="text" id="personClient" required>
            </div>
            <div class="form-group">
              <label for="personTeam">Team</label>
              <select id="personTeam" required>
                ${teams.map(team => `<option value="${team.id}">${team.name || 'Team #' + team.id}</option>`).join('')}
              </select>
            </div>
            <div class="flex justify-end space-x-2 mt-4">
              <button type="button" class="btn-secondary" onclick="ui.hideModal()">Cancel</button>
              <button type="submit" class="btn-primary">Add Person</button>
            </div>
          </form>
        </div>
      `;
      document.body.appendChild(modal);
      
      const form = modal.querySelector('#addPersonForm');
      if (form) {
        form.addEventListener('submit', (e) => {
          e.preventDefault();
          
          try {
            const teamId = parseInt(form.querySelector('#personTeam').value);
            const team = teams.find(t => t.id === teamId);
            
            if (team) {
              const personId = Date.now();
              const newPerson = {
                id: personId,
                name: form.querySelector('#personName').value,
                role: form.querySelector('#personRole').value,
                client: form.querySelector('#personClient').value
              };
              
              if (!team.personnel) {
                team.personnel = [];
              }
              
              team.personnel.push(newPerson);
              this.saveChanges();
              this.hideModal();
              this.showToast('Person added successfully', 'success');
              this.loadPersonnel();
            } else {
              this.showToast('Selected team not found', 'error');
            }
          } catch (formError) {
            console.error('Error adding person:', formError);
            this.showToast('Error adding person: ' + (formError.message || 'Unknown error'), 'error');
          }
        });
      }
    } catch (error) {
      console.error('Error showing add person modal:', error);
      this.showToast('Could not open add person form', 'error');
    }
  },
  
  // Load dashboard content
  loadDashboard() {
    try {
      console.log('Loading dashboard content...');
      
      const tabContent = document.getElementById('tabContent');
      if (!tabContent) {
        console.error('Tab content element not found');
        return;
      }
      
      // If dashboard is already loading, don't try to load it again
      if (tabContent.dataset.loading === 'true' && tabContent.dataset.currentTab === 'dashboard') {
        console.log('Dashboard already loading, skipping duplicate load request');
        return;
      }
      
      // Set loading state
      tabContent.dataset.loading = 'true';
      tabContent.dataset.currentTab = 'dashboard';
      
      // Calculate statistics once and reuse
      const stats = this.calculateStats();
      
      // Create Dashboard HTML with optimized template structure
      const dashboardHTML = `
        <div class="p-4">
          <h2 class="text-2xl font-bold mb-6">Dashboard</h2>
          
          <!-- Statistics Cards -->
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-8">
            ${this.createStatCard('BBV Stream', stats.bbv.personnel, stats.bbv.teams, 'blue', 'teams', 'bbv')}
            ${this.createStatCard('ADD Stream', stats.add.personnel, stats.add.teams, 'red', 'teams', 'add')}
            ${this.createStatCard('ARB Stream', stats.arb.personnel, stats.arb.teams, 'purple', 'teams', 'arb')}
            ${this.createStatCard('Shared Services', stats.shared.personnel, stats.shared.teams, 'gray', 'teams', 'shared')}
          </div>
          
          <!-- Charts and Activity Section -->
          <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <!-- Personnel Distribution Chart -->
            <div class="bg-white p-4 rounded-lg shadow lg:col-span-1 cursor-pointer" onclick="ui.switchTab('personnel')">
              <h3 class="font-semibold mb-4">Personnel Distribution</h3>
              <div class="chart-container" style="position: relative; height: 220px;">
                <canvas id="personnelChart"></canvas>
              </div>
            </div>
            
            <!-- Team Performance Chart -->
            <div class="bg-white p-4 rounded-lg shadow lg:col-span-2 cursor-pointer" onclick="ui.switchTab('teams')">
              <h3 class="font-semibold mb-4">Team Performance</h3>
              <div class="chart-container" style="position: relative; height: 220px;">
                <canvas id="performanceChart"></canvas>
              </div>
            </div>
            
            <!-- Recent Activities -->
            <div class="bg-white p-4 rounded-lg shadow cursor-pointer" onclick="ui.showAllActivities()">
              <div class="flex justify-between items-center mb-4">
                <h3 class="font-semibold">Recent Activities</h3>
                <button class="text-blue-600 text-sm hover:text-blue-800" id="viewAllActivitiesBtn">
                  View All
                </button>
              </div>
              <div class="activities-container">
                ${this.renderRecentActivities()}
              </div>
            </div>
            
            <!-- Upcoming Tasks -->
            <div class="bg-white p-4 rounded-lg shadow lg:col-span-2 cursor-pointer" onclick="ui.switchTab('planning')">
              <div class="flex justify-between items-center mb-4">
                <h3 class="font-semibold">Upcoming Tasks</h3>
                <button class="text-blue-600 text-sm hover:text-blue-800" id="viewAllTasksBtn">
                  View All
                </button>
              </div>
              <div class="tasks-container">
                ${this.renderUpcomingTasks()}
              </div>
            </div>
          </div>
        </div>
      `;
      
      // Set content
      tabContent.innerHTML = dashboardHTML;
      
      // Initialize charts after content is loaded
      this.initializeCharts();
      
      // Add event listeners for dashboard actions
      document.getElementById('viewAllActivitiesBtn')?.addEventListener('click', (e) => {
        e.stopPropagation(); // Prevent parent div click
        this.showAllActivities();
      });
      document.getElementById('viewAllTasksBtn')?.addEventListener('click', (e) => {
        e.stopPropagation(); // Prevent parent div click
        this.switchTab('planning');
      });
      
      // Reset loading state
      tabContent.dataset.loading = 'false';
      
      console.log('Dashboard loaded successfully');
    } catch (error) {
      console.error('Error loading dashboard:', error);
      
      const tabContent = document.getElementById('tabContent');
      if (tabContent) {
        tabContent.innerHTML = `
          <div class="p-8 text-center">
            <div class="text-red-500 text-xl mb-4">
              <i class="fas fa-exclamation-triangle mr-2"></i> 
              Error Loading Dashboard
            </div>
            <p class="mb-4">${error.message || 'An unknown error occurred'}</p>
            <button class="px-4 py-2 bg-blue-600 text-white rounded" onclick="ui.switchTab('dashboard')">
              <i class="fas fa-sync-alt mr-2"></i> Try Again
            </button>
          </div>
        `;
        
        // Reset loading state
        tabContent.dataset.loading = 'false';
      }
    }
  },

  // Helper function to create stream statistic cards
  createStatCard(title, personnel, teams, color, navTab, filter) {
    return `
      <div class="bg-white p-4 rounded-lg shadow cursor-pointer" onclick="ui.navigateWithFilter('${navTab}', '${filter}')">
        <div class="flex items-center">
          <div class="rounded-full w-12 h-12 flex items-center justify-center bg-${color}-100 text-${color}-800">
            <i class="fas fa-users"></i>
          </div>
          <div class="ml-4">
            <h3 class="text-gray-500 text-sm">${title}</h3>
            <div class="flex items-baseline">
              <p class="text-2xl font-semibold">${personnel}</p>
              <p class="ml-2 text-sm text-gray-600">Personnel</p>
            </div>
          </div>
        </div>
        <div class="mt-2 text-xs text-gray-500">Across ${teams} teams</div>
      </div>
    `;
  },
  
  // Navigate to a tab with a filter applied
  navigateWithFilter(tab, filter) {
    // Store the filter in a session variable
    sessionStorage.setItem('activeFilter', filter);
    
    // Navigate to the tab
    this.switchTab(tab);
  },

  exportTeams() {
    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <h2 class="text-xl font-semibold mb-4">Export Teams Data</h2>
        <div class="space-y-4">
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <button class="btn-secondary p-6 text-center flex flex-col items-center justify-center" onclick="ui.exportTeamsCSV()">
              <i class="fas fa-file-csv text-3xl mb-2"></i>
              <span class="text-lg font-medium">CSV Format</span>
              <span class="text-sm text-gray-500">Export as comma-separated values</span>
            </button>
            <button class="btn-secondary p-6 text-center flex flex-col items-center justify-center" onclick="ui.exportTeamsJSON()">
              <i class="fas fa-file-code text-3xl mb-2"></i>
              <span class="text-lg font-medium">JSON Format</span>
              <span class="text-sm text-gray-500">Export as structured data</span>
            </button>
          </div>
        </div>
        <div class="flex justify-end mt-4">
          <button class="btn-secondary" onclick="ui.hideModal()">Cancel</button>
        </div>
      </div>
    `;
    document.body.appendChild(modal);
  },

  // Load role matrix
  loadRoleMatrix() {
    try {
      console.log('Loading role matrix content...');
      
      const tabContent = document.getElementById('tabContent');
      if (!tabContent) {
        console.error('Tab content element not found');
        return;
      }
      
      // Check if already loading
      if (tabContent.dataset.loading === 'true') {
        console.log('Role matrix already loading, skipping duplicate load');
        return;
      }
      
      // Set loading state
      tabContent.dataset.loading = 'true';
      
      // Create empty arrays if they don't exist
      if (!window.appData.roles) window.appData.roles = [];
      
      tabContent.innerHTML = `
        <div class="p-4">
          <div class="flex justify-between items-center mb-6">
            <h2 class="text-2xl font-bold">Role Matrix</h2>
            <div class="flex space-x-4">
              <button class="btn-secondary" id="exportRoleMatrixBtn">
                <i class="fas fa-download mr-2"></i> Export
              </button>
              <button class="btn-primary" id="addRoleBtn">
                <i class="fas fa-plus mr-2"></i> Add Role
              </button>
            </div>
          </div>

          <div class="bg-white rounded-lg shadow overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
              <thead class="bg-gray-50">
                <tr>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Role</th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Description</th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Stream</th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Personnel Count</th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                </tr>
              </thead>
              <tbody class="bg-white divide-y divide-gray-200">
                ${this.renderRoleMatrix()}
              </tbody>
            </table>
          </div>

          <div class="mt-8">
            <h3 class="text-xl font-semibold mb-4">Role Distribution by Stream</h3>
            <div class="bg-white rounded-lg shadow p-4" style="height: 300px;">
              <canvas id="roleDistributionChart"></canvas>
            </div>
          </div>
        </div>
      `;
      
      // Add event listeners
      document.getElementById('addRoleBtn')?.addEventListener('click', () => this.showAddRoleModal());
      document.getElementById('exportRoleMatrixBtn')?.addEventListener('click', () => this.exportRoleMatrix());
      
      // Initialize charts
      this.initializeRoleDistributionChart();
      
      // Reset loading state
      tabContent.dataset.loading = 'false';
    } catch (error) {
      console.error('Error loading role matrix:', error);
      this.showToast('Error loading role matrix', 'error');
      
      const tabContent = document.getElementById('tabContent');
      if (tabContent) {
        tabContent.innerHTML = `
          <div class="p-8 text-center">
            <div class="text-red-500 text-xl mb-4">
              <i class="fas fa-exclamation-triangle mr-2"></i> 
              Error Loading Role Matrix
            </div>
            <p class="mb-4">${error.message || 'An unknown error occurred'}</p>
            <button class="px-4 py-2 bg-blue-600 text-white rounded" onclick="ui.switchTab('rolematrix')">
              <i class="fas fa-sync-alt mr-2"></i> Try Again
            </button>
          </div>
        `;
        
        // Reset loading state
        tabContent.dataset.loading = 'false';
      }
    }
  },
  
  // Render role matrix table rows
  renderRoleMatrix() {
    // Get all unique roles from personnel
    const allRoles = new Map();
    
    // Extract roles from teams/personnel
    if (window.appData && window.appData.teams) {
      window.appData.teams.forEach(team => {
        if (team && team.personnel) {
          team.personnel.forEach(person => {
            if (person && person.role) {
              // If role exists, increment count, otherwise add it
              if (allRoles.has(person.role)) {
                const roleData = allRoles.get(person.role);
                roleData.count++;
                // Add the stream if it's not already in the list
                if (!roleData.streams.includes(team.stream)) {
                  roleData.streams.push(team.stream);
                }
              } else {
                allRoles.set(person.role, {
                  name: person.role,
                  description: '',
                  streams: [team.stream],
                  count: 1
                });
              }
            }
          });
        }
      });
    }
    
    // Check if we have any roles
    if (allRoles.size === 0) {
      return '<tr><td colspan="5" class="px-6 py-4 text-center text-gray-500">No roles available</td></tr>';
    }
    
    // Convert the Map to an array and sort by role name
    const roles = Array.from(allRoles.values()).sort((a, b) => a.name.localeCompare(b.name));
    
    // Create table rows
    return roles.map(role => `
      <tr>
        <td class="px-6 py-4 whitespace-nowrap font-medium">${this.sanitizeHtml(role.name)}</td>
        <td class="px-6 py-4">${role.description || 'No description available'}</td>
        <td class="px-6 py-4">
          ${role.streams.map(stream => `
            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-${stream}-100 text-${stream}-800 mr-1">
              ${stream.toUpperCase()}
            </span>
          `).join('')}
        </td>
        <td class="px-6 py-4 whitespace-nowrap">${role.count}</td>
        <td class="px-6 py-4 whitespace-nowrap">
          <button class="text-indigo-600 hover:text-indigo-900 mr-3" onclick="ui.showRoleDetails('${role.name}')">
            <i class="fas fa-eye"></i>
          </button>
          <button class="text-indigo-600 hover:text-indigo-900" onclick="ui.showRolePersonnel('${role.name}')">
            <i class="fas fa-users"></i>
          </button>
        </td>
      </tr>
    `).join('');
  },
  
  // Initialize role distribution chart
  initializeRoleDistributionChart() {
    const ctx = document.getElementById('roleDistributionChart');
    if (!ctx || typeof Chart === 'undefined') return;
    
    // Get role counts by stream
    const streamCounts = { bbv: 0, add: 0, arb: 0, shared: 0 };
    
    // Count roles per stream
    if (window.appData && window.appData.teams) {
      window.appData.teams.forEach(team => {
        if (team && team.personnel && team.stream) {
          const stream = team.stream.toLowerCase();
          if (streamCounts.hasOwnProperty(stream)) {
            // Count unique roles in this team
            const teamRoles = new Set();
            team.personnel.forEach(person => {
              if (person && person.role) {
                teamRoles.add(person.role);
              }
            });
            streamCounts[stream] += teamRoles.size;
          }
        }
      });
    }
    
    new Chart(ctx, {
      type: 'bar',
      data: {
        labels: ['BBV', 'ADD', 'ARB', 'Shared'],
        datasets: [{
          label: 'Number of Roles',
          data: [streamCounts.bbv, streamCounts.add, streamCounts.arb, streamCounts.shared],
          backgroundColor: [
            '#00518A', // BBV blue
            '#CC2030', // ADD red
            '#4F46E5', // ARB purple
            '#232323'  // Shared black
          ],
          borderColor: [
            '#00518A',
            '#CC2030',
            '#4F46E5',
            '#232323'
          ],
          borderWidth: 1
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          y: {
            beginAtZero: true
          }
        }
      }
    });
  },
  
  // Show role details modal
  showRoleDetails(roleName) {
    // Get all personnel with this role
    const personnel = [];
    
    if (window.appData && window.appData.teams) {
      window.appData.teams.forEach(team => {
        if (team && team.personnel) {
          team.personnel.forEach(person => {
            if (person && person.role === roleName) {
              personnel.push({
                ...person,
                team: team.name,
                stream: team.stream
              });
            }
          });
        }
      });
    }
    
    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <div class="flex justify-between items-center mb-4">
          <h2 class="text-xl font-semibold">${this.sanitizeHtml(roleName)}</h2>
          <button class="btn-icon" onclick="ui.hideModal()">
            <i class="fas fa-times"></i>
          </button>
        </div>
        
        <h3 class="font-medium text-lg mb-2">Personnel (${personnel.length})</h3>
        <div class="mb-4">
          ${personnel.length > 0 ? `
            <div class="bg-gray-50 rounded overflow-hidden">
              <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-100">
                  <tr>
                    <th scope="col" class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Name</th>
                    <th scope="col" class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Team</th>
                    <th scope="col" class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Stream</th>
                  </tr>
                </thead>
                <tbody>
                  ${personnel.map(person => `
                    <tr>
                      <td class="px-4 py-2 whitespace-nowrap">${this.sanitizeHtml(person.name)}</td>
                      <td class="px-4 py-2 whitespace-nowrap">${this.sanitizeHtml(person.team)}</td>
                      <td class="px-4 py-2 whitespace-nowrap">
                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-${person.stream}-100 text-${person.stream}-800">
                          ${person.stream.toUpperCase()}
                        </span>
                      </td>
                    </tr>
                  `).join('')}
                </tbody>
              </table>
            </div>
          ` : '<p class="text-gray-500">No personnel found with this role</p>'}
        </div>
        
        <div class="flex justify-end">
          <button class="btn-secondary" onclick="ui.hideModal()">Close</button>
        </div>
      </div>
    `;
    
    document.body.appendChild(modal);
  },
  
  // Export role matrix as CSV
  exportRoleMatrix() {
    // Get all roles
    const allRoles = new Map();
    
    if (window.appData && window.appData.teams) {
      window.appData.teams.forEach(team => {
        if (team && team.personnel) {
          team.personnel.forEach(person => {
            if (person && person.role) {
              if (allRoles.has(person.role)) {
                const roleData = allRoles.get(person.role);
                roleData.count++;
                if (!roleData.streams.includes(team.stream)) {
                  roleData.streams.push(team.stream);
                }
              } else {
                allRoles.set(person.role, {
                  name: person.role,
                  description: '',
                  streams: [team.stream],
                  count: 1
                });
              }
            }
          });
        }
      });
    }
    
    // Convert to array
    const roles = Array.from(allRoles.values());
    
    // Create CSV content
    let csvContent = "data:text/csv;charset=utf-8,";
    csvContent += "Role,Description,Streams,Personnel Count\n";
    
    roles.forEach(role => {
      csvContent += `"${role.name}","${role.description}","${role.streams.join(', ')}",${role.count}\n`;
    });
    
    // Create download link
    const encodedUri = encodeURI(csvContent);
    const link = document.createElement("a");
    link.setAttribute("href", encodedUri);
    link.setAttribute("download", "role_matrix.csv");
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
    this.showToast('Role matrix exported successfully', 'success');
  },
  
  // Add new role modal
  showAddRoleModal() {
    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <h2 class="text-xl font-semibold mb-4">Add New Role</h2>
        <form id="addRoleForm">
          <div class="form-group">
            <label for="roleName">Role Name</label>
            <input type="text" id="roleName" class="form-input" required>
          </div>
          <div class="form-group">
            <label for="roleDescription">Description</label>
            <textarea id="roleDescription" class="form-textarea" rows="3"></textarea>
          </div>
          <div class="form-group">
            <label for="roleStream">Stream</label>
            <select id="roleStream" class="form-select" required>
              <option value="bbv">BBV</option>
              <option value="add">ADD</option>
              <option value="arb">ARB</option>
              <option value="shared">Shared</option>
            </select>
          </div>
          <div class="flex justify-end space-x-2 mt-4">
            <button type="button" class="btn-secondary" onclick="ui.hideModal()">Cancel</button>
            <button type="submit" class="btn-primary">Add Role</button>
          </div>
        </form>
      </div>
    `;
    document.body.appendChild(modal);
    
    // Handle form submission
    document.getElementById('addRoleForm').addEventListener('submit', e => {
      e.preventDefault();
      
      // Get form values
      const roleName = document.getElementById('roleName').value;
      const roleDescription = document.getElementById('roleDescription').value;
      const roleStream = document.getElementById('roleStream').value;
      
      // Create role object
      const role = {
        name: roleName,
        description: roleDescription,
        stream: roleStream
      };
      
      // Add to roles array if it doesn't exist
      if (!window.appData.roles) window.appData.roles = [];
      window.appData.roles.push(role);
      
      // Save changes
      this.saveChanges();
      
      // Hide modal
      this.hideModal();
      
      // Show success message
      this.showToast('Role added successfully', 'success');
      
      // Reload tab
      this.loadRoleMatrix();
    });
  },
  
  // Load skills matrix
  loadSkillsMatrix() {
    try {
      console.log('Loading skills matrix content...');
      
      const tabContent = document.getElementById('tabContent');
      if (!tabContent) {
        console.error('Tab content element not found');
        return;
      }
      
      // Check if already loading
      if (tabContent.dataset.loading === 'true') {
        console.log('Skills matrix already loading, skipping duplicate load');
        return;
      }
      
      // Set loading state
      tabContent.dataset.loading = 'true';
      
      // Create empty arrays if they don't exist
      if (!window.appData.skills) window.appData.skills = [];
      
      // Build a list of all skills from personnel
      const allSkills = new Set();
      const personnelWithSkills = [];
      
      if (window.appData && window.appData.teams) {
        window.appData.teams.forEach(team => {
          if (team && team.personnel) {
            team.personnel.forEach(person => {
              if (person) {
                // If person has skills property, add all skill keys to the set
                if (person.skills) {
                  Object.keys(person.skills).forEach(skill => allSkills.add(skill));
                }
                
                // Add to personnel list
                personnelWithSkills.push({
                  ...person,
                  team: team.name,
                  stream: team.stream,
                  // Ensure skills property exists
                  skills: person.skills || {}
                });
              }
            });
          }
        });
      }
      
      tabContent.innerHTML = `
        <div class="p-4">
          <div class="flex justify-between items-center mb-6">
            <h2 class="text-2xl font-bold">Skills Matrix</h2>
            <div class="flex space-x-4">
              <button class="btn-secondary" id="exportSkillsMatrixBtn">
                <i class="fas fa-download mr-2"></i> Export
              </button>
              <button class="btn-primary" id="addSkillBtn">
                <i class="fas fa-plus mr-2"></i> Add Skill
              </button>
            </div>
          </div>
          
          <div class="bg-white rounded-lg shadow p-4 mb-6">
            <div class="flex space-x-4">
              <div class="flex-grow">
                <input type="text" id="skillsSearch" class="form-input w-full" placeholder="Search personnel or skills...">
              </div>
              <div>
                <select id="skillsStreamFilter" class="form-select">
                  <option value="all">All Streams</option>
                  <option value="bbv">BBV</option>
                  <option value="add">ADD</option>
                  <option value="arb">ARB</option>
                  <option value="shared">Shared</option>
                </select>
              </div>
            </div>
          </div>

          <div class="bg-white rounded-lg shadow overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200" id="skillsMatrixTable">
              <thead class="bg-gray-50">
                <tr>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider sticky left-0 bg-gray-50">Person</th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider sticky left-32 bg-gray-50">Team</th>
                  ${Array.from(allSkills).map(skill => `
                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">${this.sanitizeHtml(skill)}</th>
                  `).join('')}
                </tr>
              </thead>
              <tbody class="bg-white divide-y divide-gray-200">
                ${personnelWithSkills.map(person => `
                  <tr data-stream="${person.stream}">
                    <td class="px-6 py-4 whitespace-nowrap font-medium sticky left-0 bg-white">${this.sanitizeHtml(person.name)}</td>
                    <td class="px-6 py-4 whitespace-nowrap sticky left-32 bg-white">
                      <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-${person.stream}-100 text-${person.stream}-800">
                        ${this.sanitizeHtml(person.team)}
                      </span>
                    </td>
                    ${Array.from(allSkills).map(skill => {
                      const skillLevel = person.skills[skill];
                      return `
                        <td class="px-6 py-4 whitespace-nowrap">
                          ${skillLevel ? this.renderSkillLevel(skillLevel) : ''}
                        </td>
                      `;
                    }).join('')}
                  </tr>
                `).join('')}
              </tbody>
            </table>
          </div>

          <div class="mt-8">
            <h3 class="text-xl font-semibold mb-4">Skill Distribution</h3>
            <div class="bg-white rounded-lg shadow p-4" style="height: 300px;">
              <canvas id="skillDistributionChart"></canvas>
            </div>
          </div>
        </div>
      `;
      
      // Add event listeners
      document.getElementById('addSkillBtn')?.addEventListener('click', () => this.showAddSkillModal());
      document.getElementById('exportSkillsMatrixBtn')?.addEventListener('click', () => this.exportSkillsMatrix());
      document.getElementById('skillsSearch')?.addEventListener('input', this.filterSkillsMatrix);
      document.getElementById('skillsStreamFilter')?.addEventListener('change', this.filterSkillsMatrix);
      
      // Initialize charts
      this.initializeSkillDistributionChart(allSkills, personnelWithSkills);
      
      // Reset loading state
      tabContent.dataset.loading = 'false';
    } catch (error) {
      console.error('Error loading skills matrix:', error);
      this.showToast('Error loading skills matrix', 'error');
      
      const tabContent = document.getElementById('tabContent');
      if (tabContent) {
        tabContent.innerHTML = `
          <div class="p-8 text-center">
            <div class="text-red-500 text-xl mb-4">
              <i class="fas fa-exclamation-triangle mr-2"></i> 
              Error Loading Skills Matrix
            </div>
            <p class="mb-4">${error.message || 'An unknown error occurred'}</p>
            <button class="px-4 py-2 bg-blue-600 text-white rounded" onclick="ui.switchTab('skillsmatrix')">
              <i class="fas fa-sync-alt mr-2"></i> Try Again
            </button>
          </div>
        `;
        
        // Reset loading state
        tabContent.dataset.loading = 'false';
      }
    }
  },
  
  // Render skill level indicator
  renderSkillLevel(level) {
    // Convert level to a number between 1-5 if it's not already
    let numLevel = level;
    if (typeof level === 'string') {
      // Try to parse as a number
      const parsed = parseInt(level);
      if (!isNaN(parsed)) {
        numLevel = parsed;
      } else {
        // Map string levels to numbers
        const levelMap = {
          'beginner': 1,
          'basic': 2,
          'intermediate': 3,
          'advanced': 4,
          'expert': 5
        };
        numLevel = levelMap[level.toLowerCase()] || 3;
      }
    }
    
    // Ensure level is between 1-5
    numLevel = Math.min(5, Math.max(1, numLevel));
    
    // Color based on level
    const colors = [
      '',
      'bg-gray-200', // Level 1
      'bg-blue-200', // Level 2
      'bg-green-200', // Level 3
      'bg-yellow-200', // Level 4
      'bg-red-200' // Level 5
    ];
    
    // Text based on level
    const texts = [
      '',
      'Beginner',
      'Basic',
      'Intermediate',
      'Advanced',
      'Expert'
    ];
    
    // Create dots to represent skill level
    let dots = '';
    for (let i = 1; i <= 5; i++) {
      dots += `<div class="h-2 w-2 rounded-full ${i <= numLevel ? 'bg-blue-600' : 'bg-gray-200'} mr-0.5"></div>`;
    }
    
    return `
      <div class="flex flex-col">
        <div class="flex items-center">
          ${dots}
        </div>
        <div class="text-xs text-gray-500 mt-1">${texts[numLevel]}</div>
      </div>
    `;
  },
  
  // Initialize skill distribution chart
  initializeSkillDistributionChart(allSkills, personnel) {
    const ctx = document.getElementById('skillDistributionChart');
    if (!ctx || typeof Chart === 'undefined' || allSkills.size === 0) return;
    
    // Count how many people have each skill
    const skillCounts = {};
    Array.from(allSkills).forEach(skill => {
      skillCounts[skill] = 0;
    });
    
    // Count skills
    personnel.forEach(person => {
      if (person.skills) {
        Object.keys(person.skills).forEach(skill => {
          if (skillCounts.hasOwnProperty(skill)) {
            skillCounts[skill]++;
          }
        });
      }
    });
    
    // Sort skills by count (descending)
    const sortedSkills = Object.keys(skillCounts).sort((a, b) => skillCounts[b] - skillCounts[a]);
    
    // Get top 10 skills
    const topSkills = sortedSkills.slice(0, 10);
    
    new Chart(ctx, {
      type: 'bar',
      data: {
        labels: topSkills,
        datasets: [{
          label: 'Number of Personnel',
          data: topSkills.map(skill => skillCounts[skill]),
          backgroundColor: '#3b82f6',
          borderColor: '#2563eb',
          borderWidth: 1
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          y: {
            beginAtZero: true
          }
        }
      }
    });
  },
  
  // Filter skills matrix
  filterSkillsMatrix() {
    const searchInput = document.getElementById('skillsSearch').value.toLowerCase();
    const streamFilter = document.getElementById('skillsStreamFilter').value;
    
    const table = document.getElementById('skillsMatrixTable');
    if (!table) return;
    
    const rows = table.querySelectorAll('tbody tr');
    
    rows.forEach(row => {
      const stream = row.getAttribute('data-stream');
      const text = row.textContent.toLowerCase();
      
      // Check if row matches search and stream filter
      const matchesSearch = searchInput === '' || text.includes(searchInput);
      const matchesStream = streamFilter === 'all' || stream === streamFilter;
      
      // Show/hide row based on filters
      row.style.display = matchesSearch && matchesStream ? '' : 'none';
    });
  },
  
  // Export skills matrix as CSV
  exportSkillsMatrix() {
    // Build a list of all skills and personnel
    const allSkills = new Set();
    const personnelWithSkills = [];
    
    if (window.appData && window.appData.teams) {
      window.appData.teams.forEach(team => {
        if (team && team.personnel) {
          team.personnel.forEach(person => {
            if (person) {
              // If person has skills property, add all skill keys to the set
              if (person.skills) {
                Object.keys(person.skills).forEach(skill => allSkills.add(skill));
              }
              
              // Add to personnel list
              personnelWithSkills.push({
                ...person,
                team: team.name,
                stream: team.stream,
                // Ensure skills property exists
                skills: person.skills || {}
              });
            }
          });
        }
      });
    }
    
    // Create CSV content
    let csvContent = "data:text/csv;charset=utf-8,";
    
    // Add header row
    csvContent += `"Name","Team","Stream"${Array.from(allSkills).map(skill => `,"${skill}"`).join('')}\n`;
    
    // Add rows for each person
    personnelWithSkills.forEach(person => {
      csvContent += `"${person.name}","${person.team}","${person.stream}"`;
      
      // Add skill levels
      Array.from(allSkills).forEach(skill => {
        const level = person.skills[skill] || '';
        csvContent += `,"${level}"`;
      });
      
      csvContent += '\n';
    });
    
    // Create download link
    const encodedUri = encodeURI(csvContent);
    const link = document.createElement("a");
    link.setAttribute("href", encodedUri);
    link.setAttribute("download", "skills_matrix.csv");
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
    this.showToast('Skills matrix exported successfully', 'success');
  },
  
  // Add skill modal
  showAddSkillModal() {
    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <h2 class="text-xl font-semibold mb-4">Add New Skill</h2>
        <form id="addSkillForm">
          <div class="form-group">
            <label for="skillName">Skill Name</label>
            <input type="text" id="skillName" class="form-input" required>
          </div>
          <div class="form-group">
            <label for="skillCategory">Category</label>
            <select id="skillCategory" class="form-select">
              <option value="technical">Technical</option>
              <option value="business">Business</option>
              <option value="soft">Soft Skills</option>
              <option value="quality">Quality</option>
              <option value="other">Other</option>
            </select>
          </div>
          <div class="form-group">
            <label for="skillDescription">Description</label>
            <textarea id="skillDescription" class="form-textarea" rows="3"></textarea>
          </div>
          <div class="flex justify-end space-x-2 mt-4">
            <button type="button" class="btn-secondary" onclick="ui.hideModal()">Cancel</button>
            <button type="submit" class="btn-primary">Add Skill</button>
          </div>
        </form>
      </div>
    `;
    document.body.appendChild(modal);
    
    // Handle form submission
    document.getElementById('addSkillForm').addEventListener('submit', e => {
      e.preventDefault();
      
      // Get form values
      const skillName = document.getElementById('skillName').value;
      const skillCategory = document.getElementById('skillCategory').value;
      const skillDescription = document.getElementById('skillDescription').value;
      
      // Create skill object
      const skill = {
        id: Date.now(), // Use timestamp as ID
        name: skillName,
        category: skillCategory,
        description: skillDescription
      };
      
      // Add to skills array
      if (!window.appData.skills) window.appData.skills = [];
      window.appData.skills.push(skill);
      
      // Save changes
      this.saveChanges();
      
      // Hide modal
      this.hideModal();
      
      // Show success message
      this.showToast('Skill added successfully', 'success');
      
      // Reload tab
      this.loadSkillsMatrix();
    });
  },
  
  // Add a new method to load analytics dashboard
  loadAnalyticsDashboard() {
    try {
      console.log('Loading analytics dashboard...');
      
      const tabContent = document.getElementById('tabContent');
      if (!tabContent) {
        console.error('Tab content element not found');
        return;
      }
      
      // Check if already loading
      if (tabContent.dataset.loading === 'true') {
        console.log('Analytics dashboard already loading, skipping duplicate load');
        return;
      }
      
      // Set loading state
      tabContent.dataset.loading = 'true';
      
      // Get analytics data
      const analytics = data.getAnalytics();
      const metrics = analytics.metrics || {};
      const latestReport = data.getLatestReport();
      
      // Create dashboard HTML
      tabContent.innerHTML = `
        <div class="p-4">
          <div class="flex justify-between items-center mb-6">
            <div>
              <h2 class="text-2xl font-semibold">Analytics Dashboard</h2>
              <p class="text-gray-600 mt-1">Organization performance metrics and insights</p>
            </div>
            <div class="flex space-x-4">
              <button id="refreshAnalyticsBtn" class="btn-outline">
                <i class="fas fa-sync-alt mr-2"></i> Refresh
              </button>
              <button id="exportAnalyticsBtn" class="btn-primary">
                <i class="fas fa-download mr-2"></i> Export Report
              </button>
            </div>
          </div>
          
          <!-- Last Updated -->
          <div class="text-sm text-gray-500 mb-4">
            Last updated: ${new Date(analytics.lastUpdate).toLocaleString()}
          </div>
          
          <!-- Key Metrics Cards -->
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-8">
            <div class="bg-white p-4 rounded-lg shadow">
              <h3 class="text-sm font-medium text-gray-500">Total Teams</h3>
              <p class="text-3xl font-bold">${metrics.totalTeams || 0}</p>
              <p class="text-sm text-gray-500 mt-1">
                <span class="font-medium text-green-600">
                  <i class="fas fa-plus mr-1"></i>${metrics.teamsCreatedThisMonth || 0}
                </span> 
                created this month
              </p>
            </div>
            
            <div class="bg-white p-4 rounded-lg shadow">
              <h3 class="text-sm font-medium text-gray-500">Total Personnel</h3>
              <p class="text-3xl font-bold">${metrics.totalPersonnel || 0}</p>
              <p class="text-sm text-gray-500 mt-1">
                Avg ${(metrics.averageTeamSize || 0).toFixed(1)} per team
              </p>
            </div>
            
            <div class="bg-white p-4 rounded-lg shadow">
              <h3 class="text-sm font-medium text-gray-500">Active Teams</h3>
              <p class="text-3xl font-bold">${metrics.activeTeams || 0}</p>
              <p class="text-sm text-gray-500 mt-1">
                ${metrics.totalTeams ? ((metrics.activeTeams / metrics.totalTeams) * 100).toFixed(0) : 0}% activity rate
              </p>
            </div>
            
            <div class="bg-white p-4 rounded-lg shadow">
              <h3 class="text-sm font-medium text-gray-500">Streams</h3>
              <p class="text-3xl font-bold">${metrics.streamDistribution ? Object.keys(metrics.streamDistribution).length : 0}</p>
              <p class="text-sm text-gray-500 mt-1">
                Active distribution
              </p>
            </div>
          </div>
          
          <!-- Charts Section -->
          <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
            <!-- Stream Distribution Chart -->
            <div class="bg-white p-4 rounded-lg shadow">
              <h3 class="font-semibold mb-4">Stream Distribution</h3>
              <div style="height: 300px;">
                <canvas id="streamDistributionChart"></canvas>
              </div>
            </div>
            
            <!-- Client Distribution Chart -->
            <div class="bg-white p-4 rounded-lg shadow">
              <h3 class="font-semibold mb-4">Client Distribution</h3>
              <div style="height: 300px;">
                <canvas id="clientDistributionChart"></canvas>
              </div>
            </div>
          </div>
        </div>
      `;
      
      // Add event listeners
      document.getElementById('refreshAnalyticsBtn')?.addEventListener('click', () => {
        data.updateAnalytics();
        this.loadAnalyticsDashboard();
        this.showToast('Analytics refreshed', 'success');
      });
      
      document.getElementById('exportAnalyticsBtn')?.addEventListener('click', () => {
        data.exportToCSV('analytics');
        this.showToast('Analytics report exported', 'success');
      });
      
      // Initialize charts
      this.initializeAnalyticsCharts(metrics);
      
      // Reset loading state
      tabContent.dataset.loading = 'false';
      
      console.log('Analytics dashboard loaded successfully');
    } catch (error) {
      console.error('Error loading analytics dashboard:', error);
      
      const tabContent = document.getElementById('tabContent');
      if (tabContent) {
        tabContent.innerHTML = `
          <div class="p-8 text-center">
            <div class="text-red-500 text-xl mb-4">
              <i class="fas fa-exclamation-triangle mr-2"></i> 
              Error Loading Analytics
            </div>
            <p class="mb-4">${error.message || 'An unknown error occurred'}</p>
            <button class="px-4 py-2 bg-blue-600 text-white rounded" 
                    onclick="ui.loadAnalyticsDashboard()">
              <i class="fas fa-sync-alt mr-2"></i> Try Again
            </button>
          </div>
        `;
        
        // Reset loading state
        tabContent.dataset.loading = 'false';
      }
    }
  },
  
  // Initialize analytics charts
  initializeAnalyticsCharts(metrics) {
    // Check if Chart.js is available
    if (typeof Chart === 'undefined' || window.chartFailed) {
      console.warn('Chart.js is not loaded, analytics charts will not be displayed');
      return;
    }
    
    try {
      // Stream Distribution Chart
      const streamCtx = document.getElementById('streamDistributionChart');
      if (streamCtx && metrics.streamDistribution) {
        const streams = Object.keys(metrics.streamDistribution);
        const streamData = streams.map(stream => metrics.streamDistribution[stream]);
        
        // Get colors based on stream
        const streamColors = streams.map(stream => {
          return window.config?.colors?.[stream] || '#ccc';
        });
        
        new Chart(streamCtx, {
          type: 'doughnut',
          data: {
            labels: streams.map(s => s.toUpperCase()),
            datasets: [{
              data: streamData,
              backgroundColor: streamColors,
              borderWidth: 1
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
              legend: {
                position: 'right'
              },
              tooltip: {
                callbacks: {
                  label: function(context) {
                    const label = context.label || '';
                    const value = context.raw || 0;
                    const total = context.dataset.data.reduce((a, b) => a + b, 0);
                    const percentage = total > 0 ? Math.round((value / total) * 100) : 0;
                    return `${label}: ${value} (${percentage}%)`;
                  }
                }
              }
            }
          }
        });
      }
      
      // Client Distribution Chart
      const clientCtx = document.getElementById('clientDistributionChart');
      if (clientCtx && metrics.clientDistribution) {
        const clients = Object.keys(metrics.clientDistribution);
        const clientData = clients.map(client => metrics.clientDistribution[client]);
        
        // Sort by count (descending)
        const combinedData = clients.map((client, index) => ({ 
          client, 
          count: clientData[index] 
        }));
        combinedData.sort((a, b) => b.count - a.count);
        
        // Take top 10 clients only
        const topClients = combinedData.slice(0, 10);
        
        new Chart(clientCtx, {
          type: 'bar',
          data: {
            labels: topClients.map(item => item.client),
            datasets: [{
              label: 'Personnel Count',
              data: topClients.map(item => item.count),
              backgroundColor: '#4F46E5',
              borderColor: '#4338CA',
              borderWidth: 1
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
              legend: {
                display: false
              }
            },
            scales: {
              y: {
                beginAtZero: true,
                ticks: {
                  precision: 0
                }
              }
            }
          }
        });
      }
    } catch (error) {
      console.error('Error initializing analytics charts:', error);
    }
  },
  
  // Load RACI Matrix
  loadRaciMatrix() {
    try {
      console.log('Loading RACI Matrix...');
      
      const tabContent = document.getElementById('tabContent');
      if (!tabContent) {
        console.error('Tab content element not found');
        return;
      }
      
      // Set loading state
      tabContent.innerHTML = `
        <div class="tab-loading">
          <div class="loader-spinner"></div>
          <p>Loading RACI Matrix...</p>
        </div>
      `;
      
      // Initialize processes and roles if not exist
      if (!window.appData.raciMatrix) {
        window.appData.raciMatrix = {
          processes: [
            { id: 1, name: 'SOP Management', category: 'Documentation', description: 'Create, review, and approve SOPs' },
            { id: 2, name: 'Change Control', category: 'Quality Systems', description: 'Review and approve changes to processes, systems, or documents' },
            { id: 3, name: 'Deviation Management', category: 'Quality Systems', description: 'Investigate and resolve deviations' },
            { id: 4, name: 'Internal Audits', category: 'Compliance', description: 'Plan and conduct internal audits' },
            { id: 5, name: 'External Audits', category: 'Compliance', description: 'Support and respond to regulatory or customer audits' },
            { id: 6, name: 'Training Program', category: 'Training', description: 'Develop and deliver training' },
            { id: 7, name: 'Batch Record Review', category: 'Production', description: 'Review and approve batch records' },
            { id: 8, name: 'CAPA Management', category: 'Quality Systems', description: 'Create and implement corrective and preventive actions' }
          ],
          assignments: {}
        };
      }
      
      // Get roles from all teams
      const roles = this.extractAllRoles();
      
      // Get all processes
      const processes = window.appData.raciMatrix.processes || [];
      
      // Create assignments if they don't exist
      if (!window.appData.raciMatrix.assignments) {
        window.appData.raciMatrix.assignments = {};
      }
      
      // Build assignments data structure
      processes.forEach(process => {
        if (!window.appData.raciMatrix.assignments[process.id]) {
          window.appData.raciMatrix.assignments[process.id] = {};
        }
      });
      
      // Build HTML template
      let html = `
        <div class="p-4">
          <div class="flex justify-between items-center mb-6">
            <div>
              <h2 class="text-2xl font-semibold">RACI Matrix</h2>
              <p class="text-gray-600 mt-1">Responsible, Accountable, Consulted, Informed</p>
            </div>
            <div class="flex space-x-4">
              <div class="dropdown">
                <button class="btn-outline dropdown-toggle" id="raciFilterBtn">
                  <i class="fas fa-filter mr-2"></i> Filter
                </button>
                <div class="dropdown-menu hidden" id="raciFilterMenu">
                  <div class="p-3">
                    <h4 class="font-medium mb-2">Process Categories</h4>
                    <div class="space-y-2" id="categoryFilters">
                    ${this.getUniqueCategories(processes).map(category => `
                      <div class="flex items-center">
                        <input type="checkbox" id="cat-${category.replace(/\s+/g, '-').toLowerCase()}" 
                          data-category="${category}" class="category-filter" checked>
                        <label for="cat-${category.replace(/\s+/g, '-').toLowerCase()}" class="ml-2">${category}</label>
                      </div>
                    `).join('')}
                    </div>
                    <div class="border-t my-3"></div>
                    <h4 class="font-medium mb-2">Value Streams</h4>
                    <div class="space-y-2" id="streamFilters">
                      <div class="flex items-center">
                        <input type="checkbox" id="stream-bbv" data-stream="bbv" class="stream-filter" checked>
                        <label for="stream-bbv" class="ml-2">BBV</label>
                      </div>
                      <div class="flex items-center">
                        <input type="checkbox" id="stream-add" data-stream="add" class="stream-filter" checked>
                        <label for="stream-add" class="ml-2">ADD</label>
                      </div>
                      <div class="flex items-center">
                        <input type="checkbox" id="stream-arb" data-stream="arb" class="stream-filter" checked>
                        <label for="stream-arb" class="ml-2">ARB</label>
                      </div>
                      <div class="flex items-center">
                        <input type="checkbox" id="stream-shared" data-stream="shared" class="stream-filter" checked>
                        <label for="stream-shared" class="ml-2">Shared</label>
                      </div>
                    </div>
                    <div class="mt-3">
                      <button id="applyRaciFilters" class="btn-primary w-full">Apply Filters</button>
                    </div>
                  </div>
                </div>
              </div>
              <button id="addProcessBtn" class="btn-outline">
                <i class="fas fa-plus mr-2"></i> Add Process
              </button>
              <button id="exportRaciBtn" class="btn-primary">
                <i class="fas fa-download mr-2"></i> Export
              </button>
            </div>
          </div>
          
          <div class="mb-4">
            <div class="flex space-x-6">
              <div class="raci-legend-item">
                <span class="raci-cell raci-r">R</span>
                <span class="ml-2">Responsible</span>
              </div>
              <div class="raci-legend-item">
                <span class="raci-cell raci-a">A</span>
                <span class="ml-2">Accountable</span>
              </div>
              <div class="raci-legend-item">
                <span class="raci-cell raci-c">C</span>
                <span class="ml-2">Consulted</span>
              </div>
              <div class="raci-legend-item">
                <span class="raci-cell raci-i">I</span>
                <span class="ml-2">Informed</span>
              </div>
            </div>
          </div>
          
          <div class="overflow-x-auto mb-8">
            <table class="raci-table w-full border-collapse">
              <thead>
                <tr>
                  <th class="raci-header w-64 text-left sticky left-0 bg-gray-100 z-10">Process / Activity</th>
                  <th class="raci-header text-left">Category</th>
                  ${roles.map(role => `
                    <th class="raci-header role-header" 
                        data-role="${role.name}" 
                        data-stream="${role.stream || 'shared'}" 
                        title="${role.name}">
                      <div class="text-center role-name">
                        <div class="text-xs font-normal text-${role.stream || 'shared'}">${role.stream ? role.stream.toUpperCase() : 'SHARED'}</div>
                        ${role.name}
                      </div>
                    </th>
                  `).join('')}
                  <th class="raci-header sticky right-0 bg-gray-100 z-10">Actions</th>
                </tr>
              </thead>
              <tbody>
                ${processes.map(process => `
                  <tr class="process-row" data-process-id="${process.id}" data-category="${process.category}">
                    <td class="raci-cell font-medium sticky left-0 bg-white z-10">
                      <div class="tooltip tooltip-right" data-tooltip="${this.sanitizeHtml(process.description || '')}">
                        ${this.sanitizeHtml(process.name)}
                      </div>
                    </td>
                    <td class="raci-cell">${this.sanitizeHtml(process.category)}</td>
                    ${roles.map(role => {
                      const assignment = (window.appData.raciMatrix.assignments[process.id] || {})[role.name];
                      const assignmentValue = assignment || '';
                      const assignmentClass = assignmentValue ? `raci-${assignmentValue.toLowerCase()}` : '';
                      
                      return `
                        <td class="raci-cell raci-clickable ${assignmentClass}" 
                            data-process="${process.id}" 
                            data-role="${role.name}">
                          ${assignmentValue}
                        </td>
                      `;
                    }).join('')}
                    <td class="raci-cell sticky right-0 bg-white z-10">
                      <div class="flex space-x-2">
                        <button class="btn-icon btn-sm edit-process" data-process-id="${process.id}" title="Edit Process">
                          <i class="fas fa-edit"></i>
                        </button>
                        <button class="btn-icon btn-sm text-red-500 delete-process" data-process-id="${process.id}" title="Delete Process">
                          <i class="fas fa-trash"></i>
                        </button>
                      </div>
                    </td>
                  </tr>
                `).join('')}
              </tbody>
            </table>
          </div>
          
          <div class="bg-white p-4 rounded-lg shadow mb-8">
            <h3 class="text-lg font-semibold mb-3">Responsibility Distribution Analysis</h3>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div class="chart-container" style="height: 300px;">
                <canvas id="roleResponsibilityChart"></canvas>
              </div>
              <div class="chart-container" style="height: 300px;">
                <canvas id="streamResponsibilityChart"></canvas>
              </div>
            </div>
          </div>
          
          <div class="bg-white p-4 rounded-lg shadow">
            <h3 class="text-lg font-semibold mb-3">Gap Analysis</h3>
            <div id="gapAnalysisContainer" class="space-y-4">
              <!-- Gap analysis content will be generated dynamically -->
            </div>
          </div>
        </div>
      `;
      
      // Set the content
      tabContent.innerHTML = html;
      
      // Initialize event listeners
      this.initializeRaciEventListeners();
      
      // Initialize charts
      this.initializeRaciCharts();
      
      // Run gap analysis
      this.runGapAnalysis();
      
      console.log('RACI Matrix loaded successfully');
    } catch (error) {
      console.error('Error loading RACI Matrix:', error);
      
      // Show error message
      const tabContent = document.getElementById('tabContent');
      if (tabContent) {
        tabContent.innerHTML = `
          <div class="p-4">
            <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-4">
              <p><i class="fas fa-exclamation-triangle mr-2"></i> Error loading RACI Matrix: ${error.message}</p>
            </div>
            <button class="btn-primary" onclick="ui.loadRaciMatrix()">
              <i class="fas fa-sync-alt mr-2"></i> Try Again
            </button>
          </div>
        `;
      }
    }
  },
  
  // Extract all roles from teams
  extractAllRoles() {
    const roles = [];
    const roleSet = new Set();
    
    if (window.appData && window.appData.teams) {
      window.appData.teams.forEach(team => {
        if (team.personnel) {
          team.personnel.forEach(person => {
            if (person.role && !roleSet.has(person.role)) {
              roleSet.add(person.role);
              roles.push({
                name: person.role,
                stream: team.stream
              });
            }
          });
        }
      });
    }
    
    // Sort roles alphabetically
    roles.sort((a, b) => a.name.localeCompare(b.name));
    
    return roles;
  },
  
  // Get unique process categories
  getUniqueCategories(processes) {
    const categories = new Set();
    
    processes.forEach(process => {
      if (process.category) {
        categories.add(process.category);
      }
    });
    
    return Array.from(categories).sort();
  },
  
  // Initialize RACI matrix event listeners
  initializeRaciEventListeners() {
    // Toggle dropdown menu
    const filterBtn = document.getElementById('raciFilterBtn');
    const filterMenu = document.getElementById('raciFilterMenu');
    
    if (filterBtn && filterMenu) {
      filterBtn.addEventListener('click', () => {
        filterMenu.classList.toggle('hidden');
      });
      
      // Close menu when clicking outside
      document.addEventListener('click', (e) => {
        if (!filterBtn.contains(e.target) && !filterMenu.contains(e.target)) {
          filterMenu.classList.add('hidden');
        }
      });
    }
    
    // Apply filters button
    const applyFiltersBtn = document.getElementById('applyRaciFilters');
    if (applyFiltersBtn) {
      applyFiltersBtn.addEventListener('click', () => {
        this.applyRaciFilters();
        filterMenu.classList.add('hidden');
      });
    }
    
    // Cell click event for RACI assignment
    const raciCells = document.querySelectorAll('.raci-clickable');
    raciCells.forEach(cell => {
      cell.addEventListener('click', (e) => {
        const processId = parseInt(e.target.getAttribute('data-process'));
        const role = e.target.getAttribute('data-role');
        
        this.cycleRaciAssignment(e.target, processId, role);
      });
    });
    
    // Add process button
    const addProcessBtn = document.getElementById('addProcessBtn');
    if (addProcessBtn) {
      addProcessBtn.addEventListener('click', () => {
        this.showAddProcessModal();
      });
    }
    
    // Export button
    const exportRaciBtn = document.getElementById('exportRaciBtn');
    if (exportRaciBtn) {
      exportRaciBtn.addEventListener('click', () => {
        this.exportRaciMatrix();
      });
    }
    
    // Edit process buttons
    const editProcessBtns = document.querySelectorAll('.edit-process');
    editProcessBtns.forEach(btn => {
      btn.addEventListener('click', (e) => {
        const processId = parseInt(e.currentTarget.getAttribute('data-process-id'));
        this.editProcess(processId);
      });
    });
    
    // Delete process buttons
    const deleteProcessBtns = document.querySelectorAll('.delete-process');
    deleteProcessBtns.forEach(btn => {
      btn.addEventListener('click', (e) => {
        const processId = parseInt(e.currentTarget.getAttribute('data-process-id'));
        this.deleteProcess(processId);
      });
    });
  },
  
  // Cycle through RACI assignments (empty -> R -> A -> C -> I -> empty)
  cycleRaciAssignment(cell, processId, role) {
    const currentValue = cell.textContent.trim();
    let newValue = '';
    
    // Cycle through RACI values
    switch (currentValue) {
      case '':
        newValue = 'R';
        break;
      case 'R':
        newValue = 'A';
        break;
      case 'A':
        newValue = 'C';
        break;
      case 'C':
        newValue = 'I';
        break;
      case 'I':
        newValue = '';
        break;
    }
    
    // Update cell content and class
    cell.textContent = newValue;
    
    // Remove all existing RACI classes
    cell.classList.remove('raci-r', 'raci-a', 'raci-c', 'raci-i');
    
    // Add new class if needed
    if (newValue) {
      cell.classList.add(`raci-${newValue.toLowerCase()}`);
    }
    
    // Store the assignment
    if (!window.appData.raciMatrix.assignments[processId]) {
      window.appData.raciMatrix.assignments[processId] = {};
    }
    
    if (newValue) {
      window.appData.raciMatrix.assignments[processId][role] = newValue;
    } else {
      delete window.appData.raciMatrix.assignments[processId][role];
    }
    
    // Check for potential issues with assignments
    this.validateRaciAssignments(processId);
    
    // Update charts
    this.initializeRaciCharts();
    
    // Save data
    try {
      localStorage.setItem('appData', JSON.stringify(window.appData));
    } catch (error) {
      console.error('Error saving RACI data to localStorage:', error);
    }
  },
  
  // Validate RACI assignments for a process
  validateRaciAssignments(processId) {
    const assignments = window.appData.raciMatrix.assignments[processId] || {};
    const roles = Object.keys(assignments);
    
    let hasAccountable = false;
    let accountableCount = 0;
    
    // Check if there's exactly one accountable role
    roles.forEach(role => {
      if (assignments[role] === 'A') {
        hasAccountable = true;
        accountableCount++;
      }
    });
    
    // Show warning if there's no accountable role or more than one
    if (accountableCount > 1) {
      this.showToast('Warning: There should be only one accountable role (A) per process', 'warning');
    }
    
    return {
      hasAccountable,
      accountableCount,
      isValid: accountableCount <= 1
    };
  },
  
  // Apply filters to the RACI matrix
  applyRaciFilters() {
    // Get selected categories
    const selectedCategories = [];
    document.querySelectorAll('.category-filter:checked').forEach(checkbox => {
      selectedCategories.push(checkbox.getAttribute('data-category'));
    });
    
    // Get selected streams
    const selectedStreams = [];
    document.querySelectorAll('.stream-filter:checked').forEach(checkbox => {
      selectedStreams.push(checkbox.getAttribute('data-stream'));
    });
    
    // Filter process rows
    document.querySelectorAll('.process-row').forEach(row => {
      const category = row.getAttribute('data-category');
      const categoryMatch = selectedCategories.includes(category);
      
      // Hide/show row based on category filter
      if (categoryMatch) {
        row.style.display = '';
      } else {
        row.style.display = 'none';
      }
    });
    
    // Filter role columns
    document.querySelectorAll('.role-header').forEach(header => {
      const index = header.cellIndex;
      const stream = header.getAttribute('data-stream');
      const streamMatch = selectedStreams.includes(stream);
      
      // Hide/show column based on stream filter
      document.querySelectorAll('.raci-table tr').forEach(row => {
        const cells = row.querySelectorAll('td, th');
        if (cells.length > index) {
          if (streamMatch) {
            cells[index].style.display = '';
          } else {
            cells[index].style.display = 'none';
          }
        }
      });
    });
    
    // Update charts
    this.initializeRaciCharts();
  },
  
  // Initialize RACI charts
  initializeRaciCharts() {
    if (typeof Chart === 'undefined') {
      console.warn('Chart.js not available. Skipping RACI chart initialization.');
      return;
    }
    
    // Clear existing charts
    if (window.roleResponsibilityChart) {
      window.roleResponsibilityChart.destroy();
    }
    
    if (window.streamResponsibilityChart) {
      window.streamResponsibilityChart.destroy();
    }
    
    // Prepare data for role responsibility chart
    const roleData = this.prepareRoleChartData();
    
    // Prepare data for stream responsibility chart
    const streamData = this.prepareStreamChartData();
    
    // Create role responsibility chart
    const roleChartCtx = document.getElementById('roleResponsibilityChart');
    if (roleChartCtx) {
      window.roleResponsibilityChart = new Chart(roleChartCtx, {
        type: 'bar',
        data: {
          labels: roleData.labels,
          datasets: [
            {
              label: 'Responsible',
              data: roleData.responsibleCounts,
              backgroundColor: '#4F46E5',
              borderColor: '#3730A3',
              borderWidth: 1
            },
            {
              label: 'Accountable',
              data: roleData.accountableCounts,
              backgroundColor: '#EF4444',
              borderColor: '#B91C1C',
              borderWidth: 1
            },
            {
              label: 'Consulted',
              data: roleData.consultedCounts,
              backgroundColor: '#F59E0B',
              borderColor: '#B45309',
              borderWidth: 1
            },
            {
              label: 'Informed',
              data: roleData.informedCounts,
              backgroundColor: '#10B981',
              borderColor: '#047857',
              borderWidth: 1
            }
          ]
        },
        options: {
          indexAxis: 'y',
          scales: {
            x: {
              stacked: true,
              title: {
                display: true,
                text: 'Count'
              }
            },
            y: {
              stacked: true,
              title: {
                display: true,
                text: 'Role'
              }
            }
          },
          plugins: {
            title: {
              display: true,
              text: 'RACI Assignments by Role'
            },
            tooltip: {
              callbacks: {
                afterTitle: function(context) {
                  const roleIndex = context[0].dataIndex;
                  const stream = roleData.streams[roleIndex];
                  return `Stream: ${stream.toUpperCase()}`;
                }
              }
            }
          },
          responsive: true,
          maintainAspectRatio: false
        }
      });
    }
    
    // Create stream responsibility chart
    const streamChartCtx = document.getElementById('streamResponsibilityChart');
    if (streamChartCtx) {
      window.streamResponsibilityChart = new Chart(streamChartCtx, {
        type: 'pie',
        data: {
          labels: streamData.labels,
          datasets: [{
            data: streamData.counts,
            backgroundColor: [
              '#00518A', // BBV
              '#CC2030', // ADD
              '#4F46E5', // ARB
              '#232323'  // Shared
            ],
            borderWidth: 1
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            title: {
              display: true,
              text: 'Responsibility Distribution by Stream'
            },
            tooltip: {
              callbacks: {
                label: function(context) {
                  const label = context.label || '';
                  const value = context.raw || 0;
                  const total = context.dataset.data.reduce((a, b) => a + b, 0);
                  const percentage = Math.round((value / total) * 100);
                  return `${label}: ${value} (${percentage}%)`;
                }
              }
            }
          }
        }
      });
    }
  },
  
  // Prepare data for role responsibility chart
  prepareRoleChartData() {
    const roles = this.extractAllRoles();
    const processes = window.appData.raciMatrix.processes || [];
    const assignments = window.appData.raciMatrix.assignments || {};
    
    const labels = [];
    const streams = [];
    const responsibleCounts = [];
    const accountableCounts = [];
    const consultedCounts = [];
    const informedCounts = [];
    
    roles.forEach(role => {
      labels.push(role.name);
      streams.push(role.stream || 'shared');
      
      let rCount = 0, aCount = 0, cCount = 0, iCount = 0;
      
      processes.forEach(process => {
        const processAssignments = assignments[process.id] || {};
        
        if (processAssignments[role.name] === 'R') rCount++;
        if (processAssignments[role.name] === 'A') aCount++;
        if (processAssignments[role.name] === 'C') cCount++;
        if (processAssignments[role.name] === 'I') iCount++;
      });
      
      responsibleCounts.push(rCount);
      accountableCounts.push(aCount);
      consultedCounts.push(cCount);
      informedCounts.push(iCount);
    });
    
    return {
      labels,
      streams,
      responsibleCounts,
      accountableCounts,
      consultedCounts,
      informedCounts
    };
  },
  
  // Prepare data for stream responsibility chart
  prepareStreamChartData() {
    const assignments = window.appData.raciMatrix.assignments || {};
    const processes = window.appData.raciMatrix.processes || [];
    
    const streamCounts = {
      bbv: 0,
      add: 0,
      arb: 0,
      shared: 0
    };
    
    // Get all roles with their stream
    const roleStreams = {};
    const roles = this.extractAllRoles();
    roles.forEach(role => {
      roleStreams[role.name] = role.stream || 'shared';
    });
    
    // Count responsible and accountable assignments by stream
    processes.forEach(process => {
      const processAssignments = assignments[process.id] || {};
      
      Object.entries(processAssignments).forEach(([role, assignment]) => {
        if (assignment === 'R' || assignment === 'A') {
          const stream = roleStreams[role] || 'shared';
          streamCounts[stream]++;
        }
      });
    });
    
    return {
      labels: ['BBV', 'ADD', 'ARB', 'Shared'],
      counts: [
        streamCounts.bbv,
        streamCounts.add,
        streamCounts.arb,
        streamCounts.shared
      ]
    };
  },
  
  // Run gap analysis
  runGapAnalysis() {
    try {
      const container = document.getElementById('gapAnalysisContainer');
      if (!container) return;
      
      const processes = window.appData.raciMatrix.processes || [];
      const assignments = window.appData.raciMatrix.assignments || {};
      
      let html = '';
      const issues = [];
      
      // Check for processes with no accountable role
      processes.forEach(process => {
        const processAssignments = assignments[process.id] || {};
        const roles = Object.keys(processAssignments);
        
        let hasAccountable = false;
        let accountableCount = 0;
        
        roles.forEach(role => {
          if (processAssignments[role] === 'A') {
            hasAccountable = true;
            accountableCount++;
          }
        });
        
        if (!hasAccountable) {
          issues.push({
            type: 'warning',
            message: `Process "${process.name}" has no accountable role assigned`,
            process: process.name,
            category: process.category
          });
        } else if (accountableCount > 1) {
          issues.push({
            type: 'error',
            message: `Process "${process.name}" has ${accountableCount} accountable roles (should be exactly one)`,
            process: process.name,
            category: process.category
          });
        }
        
        // Check for processes with no responsible role
        let hasResponsible = false;
        roles.forEach(role => {
          if (processAssignments[role] === 'R') {
            hasResponsible = true;
          }
        });
        
        if (!hasResponsible) {
          issues.push({
            type: 'warning',
            message: `Process "${process.name}" has no responsible role assigned`,
            process: process.name,
            category: process.category
          });
        }
      });
      
      // Generate HTML for issues
      if (issues.length > 0) {
        html += '<div class="space-y-2">';
        issues.forEach(issue => {
          const iconClass = issue.type === 'error' ? 'fa-exclamation-circle text-red-500' : 'fa-exclamation-triangle text-yellow-500';
          html += `
            <div class="flex p-3 rounded-lg ${issue.type === 'error' ? 'bg-red-50' : 'bg-yellow-50'}">
              <div class="mr-3">
                <i class="fas ${iconClass} text-lg"></i>
              </div>
              <div>
                <p class="font-medium">${issue.message}</p>
                <p class="text-sm text-gray-600">Category: ${issue.category}</p>
              </div>
            </div>
          `;
        });
        html += '</div>';
      } else {
        html += `
          <div class="flex p-3 rounded-lg bg-green-50">
            <div class="mr-3">
              <i class="fas fa-check-circle text-green-500 text-lg"></i>
            </div>
            <div>
              <p class="font-medium">No issues detected in RACI assignments</p>
              <p class="text-sm text-gray-600">All processes have appropriate accountable and responsible roles</p>
            </div>
          </div>
        `;
      }
      
      container.innerHTML = html;
    } catch (error) {
      console.error('Error running gap analysis:', error);
    }
  },
  
  // Show modal to add a new process
  showAddProcessModal() {
    // Create modal
    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <h2 class="text-xl font-semibold mb-4">Add New Process</h2>
        <form id="addProcessForm">
          <div class="form-group">
            <label for="processName">Process Name</label>
            <input type="text" id="processName" class="form-input" required>
          </div>
          <div class="form-group">
            <label for="processCategory">Category</label>
            <select id="processCategory" class="form-select">
              <option value="Documentation">Documentation</option>
              <option value="Quality Systems">Quality Systems</option>
              <option value="Compliance">Compliance</option>
              <option value="Training">Training</option>
              <option value="Production">Production</option>
              <option value="Other">Other</option>
            </select>
          </div>
          <div class="form-group">
            <label for="processDescription">Description</label>
            <textarea id="processDescription" class="form-textarea" rows="3"></textarea>
          </div>
          <div class="flex justify-end space-x-3 mt-6">
            <button type="button" class="btn-secondary" onclick="ui.hideModal()">Cancel</button>
            <button type="submit" class="btn-primary">Add Process</button>
          </div>
        </form>
      </div>
    `;
    
    document.body.appendChild(modal);
    
    // Add event listener to form
    const form = document.getElementById('addProcessForm');
    form.addEventListener('submit', (e) => {
      e.preventDefault();
      
      // Get form values
      const name = document.getElementById('processName').value;
      const category = document.getElementById('processCategory').value;
      const description = document.getElementById('processDescription').value;
      
      // Create new process
      this.addProcess(name, category, description);
      
      // Hide modal
      this.hideModal();
    });
  },
  
  // Add a new process
  addProcess(name, category, description) {
    try {
      // Get processes
      if (!window.appData.raciMatrix) {
        window.appData.raciMatrix = {
          processes: [],
          assignments: {}
        };
      }
      
      if (!window.appData.raciMatrix.processes) {
        window.appData.raciMatrix.processes = [];
      }
      
      // Generate ID
      const id = this.generateUniqueId(window.appData.raciMatrix.processes);
      
      // Create process
      const process = {
        id,
        name,
        category,
        description
      };
      
      // Add to processes
      window.appData.raciMatrix.processes.push(process);
      
      // Initialize assignments
      if (!window.appData.raciMatrix.assignments) {
        window.appData.raciMatrix.assignments = {};
      }
      
      window.appData.raciMatrix.assignments[id] = {};
      
      // Save data
      try {
        localStorage.setItem('appData', JSON.stringify(window.appData));
      } catch (error) {
        console.error('Error saving process data to localStorage:', error);
      }
      
      // Reload RACI matrix
      this.loadRaciMatrix();
      
      // Show success message
      this.showToast(`Process "${name}" added successfully`, 'success');
    } catch (error) {
      console.error('Error adding process:', error);
      this.showToast('Error adding process: ' + error.message, 'error');
    }
  },
  
  // Edit a process
  editProcess(processId) {
    try {
      // Get process
      const process = window.appData.raciMatrix.processes.find(p => p.id === processId);
      if (!process) {
        this.showToast('Process not found', 'error');
        return;
      }
      
      // Create modal
      const modal = document.createElement('div');
      modal.className = 'modal';
      modal.innerHTML = `
        <div class="modal-content">
          <h2 class="text-xl font-semibold mb-4">Edit Process</h2>
          <form id="editProcessForm">
            <div class="form-group">
              <label for="processName">Process Name</label>
              <input type="text" id="processName" class="form-input" value="${this.sanitizeHtml(process.name)}" required>
            </div>
            <div class="form-group">
              <label for="processCategory">Category</label>
              <select id="processCategory" class="form-select">
                <option value="Documentation" ${process.category === 'Documentation' ? 'selected' : ''}>Documentation</option>
                <option value="Quality Systems" ${process.category === 'Quality Systems' ? 'selected' : ''}>Quality Systems</option>
                <option value="Compliance" ${process.category === 'Compliance' ? 'selected' : ''}>Compliance</option>
                <option value="Training" ${process.category === 'Training' ? 'selected' : ''}>Training</option>
                <option value="Production" ${process.category === 'Production' ? 'selected' : ''}>Production</option>
                <option value="Other" ${process.category === 'Other' ? 'selected' : ''}>Other</option>
              </select>
            </div>
            <div class="form-group">
              <label for="processDescription">Description</label>
              <textarea id="processDescription" class="form-textarea" rows="3">${this.sanitizeHtml(process.description || '')}</textarea>
            </div>
            <div class="flex justify-end space-x-3 mt-6">
              <button type="button" class="btn-secondary" onclick="ui.hideModal()">Cancel</button>
              <button type="submit" class="btn-primary">Save Changes</button>
            </div>
          </form>
        </div>
      `;
      
      document.body.appendChild(modal);
      
      // Add event listener to form
      const form = document.getElementById('editProcessForm');
      form.addEventListener('submit', (e) => {
        e.preventDefault();
        
        // Get form values
        const name = document.getElementById('processName').value;
        const category = document.getElementById('processCategory').value;
        const description = document.getElementById('processDescription').value;
        
        // Update process
        this.updateProcess(processId, name, category, description);
        
        // Hide modal
        this.hideModal();
      });
    } catch (error) {
      console.error('Error editing process:', error);
      this.showToast('Error editing process: ' + error.message, 'error');
    }
  },
  
  // Update a process
  updateProcess(processId, name, category, description) {
    try {
      // Get process
      const processIndex = window.appData.raciMatrix.processes.findIndex(p => p.id === processId);
      if (processIndex === -1) {
        this.showToast('Process not found', 'error');
        return;
      }
      
      // Update process
      window.appData.raciMatrix.processes[processIndex] = {
        ...window.appData.raciMatrix.processes[processIndex],
        name,
        category,
        description
      };
      
      // Save data
      try {
        localStorage.setItem('appData', JSON.stringify(window.appData));
      } catch (error) {
        console.error('Error saving process data to localStorage:', error);
      }
      
      // Reload RACI matrix
      this.loadRaciMatrix();
      
      // Show success message
      this.showToast(`Process "${name}" updated successfully`, 'success');
    } catch (error) {
      console.error('Error updating process:', error);
      this.showToast('Error updating process: ' + error.message, 'error');
    }
  },
  
  // Delete a process
  deleteProcess(processId) {
    try {
      // Confirm deletion
      if (!confirm('Are you sure you want to delete this process? This action cannot be undone.')) {
        return;
      }
      
      // Get process
      const processIndex = window.appData.raciMatrix.processes.findIndex(p => p.id === processId);
      if (processIndex === -1) {
        this.showToast('Process not found', 'error');
        return;
      }
      
      const processName = window.appData.raciMatrix.processes[processIndex].name;
      
      // Remove process
      window.appData.raciMatrix.processes.splice(processIndex, 1);
      
      // Remove assignments
      delete window.appData.raciMatrix.assignments[processId];
      
      // Save data
      try {
        localStorage.setItem('appData', JSON.stringify(window.appData));
      } catch (error) {
        console.error('Error saving process data to localStorage:', error);
      }
      
      // Reload RACI matrix
      this.loadRaciMatrix();
      
      // Show success message
      this.showToast(`Process "${processName}" deleted successfully`, 'success');
    } catch (error) {
      console.error('Error deleting process:', error);
      this.showToast('Error deleting process: ' + error.message, 'error');
    }
  },
  
  // Export RACI matrix
  exportRaciMatrix() {
    try {
      // Get RACI data
      const processes = window.appData.raciMatrix.processes || [];
      const assignments = window.appData.raciMatrix.assignments || {};
      const roles = this.extractAllRoles();
      
      // Create CSV content
      let csvContent = 'data:text/csv;charset=utf-8,';
      
      // Add header row
      csvContent += 'Process,Category,';
      roles.forEach(role => {
        csvContent += `"${role.name} (${role.stream ? role.stream.toUpperCase() : 'SHARED'}),"`;
      });
      csvContent += '\n';
      
      // Add data rows
      processes.forEach(process => {
        csvContent += `"${process.name}","${process.category}",`;
        
        const processAssignments = assignments[process.id] || {};
        
        roles.forEach(role => {
          csvContent += `${processAssignments[role.name] || ''},`;
        });
        
        csvContent += '\n';
      });
      
      // Create and trigger download link
      const encodedUri = encodeURI(csvContent);
      const link = document.createElement('a');
      link.setAttribute('href', encodedUri);
      link.setAttribute('download', `raci_matrix_${new Date().toISOString().slice(0, 10)}.csv`);
      document.body.appendChild(link);
      
      link.click();
      
      // Clean up
      document.body.removeChild(link);
      
      // Show success message
      this.showToast('RACI matrix exported successfully', 'success');
    } catch (error) {
      console.error('Error exporting RACI matrix:', error);
      this.showToast('Error exporting RACI matrix: ' + error.message, 'error');
    }
  },
  
  // Helper function to generate a unique ID
  generateUniqueId(collection) {
    if (!collection || !Array.isArray(collection) || collection.length === 0) {
      return 1;
    }
    
    const maxId = Math.max(...collection.map(item => item.id || 0));
    return maxId + 1;
  },
  
  // Update switchTab method to include RACI Matrix
  switchTab(tabId) {
    // ... existing code ...
    
    // Use a switch statement to call the appropriate loading function
    switch (tabId) {
      case 'dashboard':
        this.loadDashboard();
        break;
      case 'teams':
        this.loadTeams();
        break;
      case 'personnel':
        this.loadPersonnel();
        break;
      case 'documentation':
        this.loadDocumentation();
        break;
      case 'planning':
        this.loadPlanning();
        break;
      case 'orgchart':
        this.loadOrgChart();
        break;
      case 'rolematrix':
        this.loadRoleMatrix();
        break;
      case 'skillsmatrix':
        this.loadSkillsMatrix();
    }
  },

  // Switch to a different tab
  switchTab(tabId) {
    try {
      console.log(`Switching to tab: ${tabId}`);
      
      // Validate tabId to prevent security issues and errors
      if (!tabId || typeof tabId !== 'string') {
        console.error('Invalid tabId:', tabId);
        this.showToast('Invalid tab selection', 'error');
        return;
      }
      
      // Sanitize tabId by using a whitelist approach instead of regex
      const validTabs = (window.config && window.config.tabs) ? 
        window.config.tabs.map(tab => tab.id) : 
        ['dashboard', 'teams', 'personnel', 'documentation', 'planning', 'orgchart', 'rolematrix', 'skillsmatrix', 'analytics'];
      
      if (!validTabs.includes(tabId)) {
        console.error(`Invalid tabId: ${tabId} not in allowed list`);
        this.showToast('Invalid tab selection', 'error');
        return;
      }
      
      // Get the tab content element
      const tabContent = document.getElementById('tabContent');
      if (!tabContent) {
        console.error('Tab content element not found');
        this.showToast('Error loading content: Tab container not found', 'error');
        return;
      }
      
      // Update active tab buttons
      this.updateActiveTab(tabId);
      
      // Update application state
      if (window.appData && window.appData.state) {
        window.appData.state.currentTab = tabId;
      }
      
      // Show loading indicator
      tabContent.innerHTML = `
        <div class="tab-loading">
          <div class="loader-spinner"></div>
          <p>Loading ${this.sanitizeHtml(tabId)} content...</p>
        </div>
      `;
      
      // Use a switch statement to call the appropriate loading function
      switch (tabId) {
        case 'dashboard':
          this.loadDashboard();
          break;
        case 'teams':
          this.loadTeams();
          break;
        case 'personnel':
          this.loadPersonnel();
          break;
        case 'documentation':
          this.loadDocumentation();
          break;
        case 'planning':
          this.loadPlanning();
          break;
        case 'orgchart':
          this.loadOrgChart();
          break;
        case 'rolematrix':
          this.loadRoleMatrix();
          break;
        case 'skillsmatrix':
          this.loadSkillsMatrix();
          break;
        case 'analytics':
          this.loadAnalyticsDashboard();
          break;
        default:
          console.error(`No loader found for tab: ${tabId}`);
          this.showToast(`Error: Content for ${this.sanitizeHtml(tabId)} not available`, 'error');
      }
    } catch (error) {
      console.error('Error switching tabs:', error);
      this.showToast('An error occurred while switching tabs', 'error');
      
      // Try recovery options
      const tabContent = document.getElementById('tabContent');
      if (tabContent) {
        tabContent.innerHTML = `
          <div class="error-container">
            <h2>Error Loading Content</h2>
            <p>There was a problem loading the requested content.</p>
            <button class="btn btn-primary" onclick="window.ui.switchTab('dashboard')">
              Return to Dashboard
            </button>
          </div>
        `;
      }
    }
  },
  
  // Update the active tab in the UI
  updateActiveTab(tabId) {
    const tabButtons = document.querySelectorAll('.tab-btn');
    tabButtons.forEach(button => {
      const buttonTabId = button.getAttribute('data-tab');
      button.classList.toggle('active', buttonTabId === tabId);
      button.setAttribute('aria-selected', buttonTabId === tabId ? 'true' : 'false');
    });
  },
  
  // Sanitize HTML to prevent XSS attacks
  sanitizeHtml(str) {
    if (!str || typeof str !== 'string') return '';
    return String(str)
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&#39;');
  },
  
  // Safe HTML insertion helper
  setElementHtml(element, html) {
    if (!element) return;
    
    try {
      // For simple strings, use textContent instead of innerHTML
      if (!html.includes('<')) {
        element.textContent = html;
        return;
      }
      
      // For HTML content, use DOMPurify if available
      if (window.DOMPurify) {
        element.innerHTML = window.DOMPurify.sanitize(html);
      } else {
        // Basic fallback - only safe for trusted content
        element.innerHTML = html;
      }
    } catch (error) {
      console.error('Error setting element HTML:', error);
      element.textContent = 'Error displaying content';
    }
  },

  // Set up scroll-to-top button
  setupScrollToTop() {
    const scrollTopBtn = document.getElementById('scrollTopBtn');
    if (scrollTopBtn) {
      window.addEventListener('scroll', () => {
        scrollTopBtn.classList.toggle('visible', window.pageYOffset > 300);
      });
      
      scrollTopBtn.addEventListener('click', () => {
        window.scrollTo({ top: 0, behavior: 'smooth' });
      });
    }
  },
  
  // Set up save changes button
  setupSaveChangesButton() {
    const saveChangesBtn = document.getElementById('saveChangesBtn');
    if (saveChangesBtn) {
      saveChangesBtn.addEventListener('click', () => this.saveChanges());
    }
  },

  // Save changes to localStorage
  saveChanges() {
    try {
      localStorage.setItem('appData', JSON.stringify(window.appData));
      this.showToast('Changes saved successfully', 'success');
    } catch (error) {
      console.error('Error saving changes:', error);
      this.showToast('Error saving changes', 'error');
    }
  },

  // Display toast notification
  showToast(message, type = 'info') {
    // Validate inputs
    if (!message || typeof message !== 'string') {
      console.error('Invalid toast message:', message);
      return;
    }
    
    // Sanitize message to prevent XSS
    const sanitizedMessage = this.sanitizeHtml(message);
    
    // Validate type and set default if invalid
    const validTypes = ['info', 'success', 'warning', 'error'];
    if (!validTypes.includes(type)) {
      console.warn(`Invalid toast type "${type}", defaulting to "info"`);
      type = 'info';
    }
    
    // Get toast container or create it if it doesn't exist
    let toastContainer = document.getElementById('toastContainer');
    if (!toastContainer) {
      toastContainer = document.createElement('div');
      toastContainer.id = 'toastContainer';
      toastContainer.className = 'toast-container';
      document.body.appendChild(toastContainer);
    }
    
    // Create toast element with safe content
    const toast = document.createElement('div');
    toast.className = `toast toast-${type}`;
    
    // Set icon based on type
    let icon = '';
    switch (type) {
      case 'success':
        icon = '<i class="fas fa-check-circle"></i>';
        break;
      case 'warning':
        icon = '<i class="fas fa-exclamation-triangle"></i>';
        break;
      case 'error':
        icon = '<i class="fas fa-times-circle"></i>';
        break;
      default:
        icon = '<i class="fas fa-info-circle"></i>';
    }
    
    // Safely set toast content
    toast.innerHTML = `
      <div class="toast-content">
        <div class="toast-icon">${icon}</div>
        <div class="toast-message">${sanitizedMessage}</div>
        <button class="toast-close" aria-label="Close notification">×</button>
      </div>
    `;
    
    // Add close functionality
    const closeButton = toast.querySelector('.toast-close');
    if (closeButton) {
      closeButton.addEventListener('click', () => {
        toast.classList.add('toast-hiding');
        setTimeout(() => {
          if (toast.parentNode) {
            toast.parentNode.removeChild(toast);
          }
        }, 300);
      });
    }
    
    // Add to container
    toastContainer.appendChild(toast);
    
    // Auto-dismiss after delay
    const displayTime = type === 'error' ? 8000 : 4000;
    setTimeout(() => {
      if (toast.parentNode) {
        toast.classList.add('toast-hiding');
        setTimeout(() => {
          if (toast.parentNode) {
            toast.parentNode.removeChild(toast);
          }
        }, 300);
      }
    }, displayTime);
  },

  // Calculate statistics for dashboard
  calculateStats() {
    try {
      const stats = {
        bbv: { personnel: 0, teams: 0 },
        add: { personnel: 0, teams: 0 },
        arb: { personnel: 0, teams: 0 },
        shared: { personnel: 0, teams: 0 }
      };

      // Make sure window.appData and teams exist
      if (!window.appData || !window.appData.teams || !Array.isArray(window.appData.teams)) {
        console.warn('No appData or teams available for statistics');
        return stats;
      }

      // Count personnel and teams by stream
      window.appData.teams.forEach(team => {
        if (!team) return;
        
        const stream = (team.stream || 'unknown').toLowerCase();
        if (stats[stream]) {
          stats[stream].teams++;
          stats[stream].personnel += Array.isArray(team.personnel) ? team.personnel.length : 0;
        }
      });

      return stats;
    } catch (error) {
      console.error('Error calculating stats:', error);
      return {
        bbv: { personnel: 0, teams: 0 },
        add: { personnel: 0, teams: 0 },
        arb: { personnel: 0, teams: 0 },
        shared: { personnel: 0, teams: 0 }
      };
    }
  },

  // Initialize charts for dashboard
  initializeCharts() {
    try {
      // Check if Chart is loaded
      if (typeof Chart === 'undefined' || window.chartFailed) {
        console.warn('Chart.js is not loaded or initialization failed');
        this.showChartPlaceholders();
        return;
      }

      // Personnel Distribution Chart
      const personnelCtx = document.getElementById('personnelChart');
      if (personnelCtx) {
        try {
          // Get statistics for personnel distribution with safe access
          const stats = this.calculateStats() || {
            bbv: { personnel: 0 },
            add: { personnel: 0 },
            arb: { personnel: 0 },
            shared: { personnel: 0 }
          };
          
          // Create chart configuration
          const chartConfig = {
            type: 'doughnut',
            data: {
              labels: ['BBV', 'ADD', 'ARB', 'Shared'],
              datasets: [{
                data: [
                  stats.bbv.personnel || 0,
                  stats.add.personnel || 0,
                  stats.arb.personnel || 0,
                  stats.shared.personnel || 0
                ],
                backgroundColor: [
                  '#00518A', // BBV blue
                  '#CC2030', // ADD red
                  '#4F46E5', // ARB purple
                  '#232323'  // Shared black
                ]
              }]
            },
            options: {
              responsive: true,
              maintainAspectRatio: false,
              plugins: {
                legend: {
                  position: 'bottom'
                },
                tooltip: {
                  callbacks: {
                    label: function(context) {
                      const label = context.label || '';
                      const value = context.raw || 0;
                      const total = context.dataset.data.reduce((a, b) => a + b, 0);
                      const percentage = total > 0 ? Math.round((value / total) * 100) : 0;
                      return `${label}: ${value} (${percentage}%)`;
                    }
                  }
                }
              }
            }
          };
          
          // Create new chart with error handling
          try {
            new Chart(personnelCtx, chartConfig);
            console.log('Personnel chart created successfully');
          } catch (chartError) {
            console.error('Failed to create personnel chart:', chartError);
            this.showChartErrorPlaceholder(personnelCtx, 'Personnel Distribution');
          }
        } catch (error) {
          console.error('Error creating personnel chart:', error);
          this.showChartErrorPlaceholder(personnelCtx, 'Personnel Distribution');
        }
      }

      // Team Performance Chart
      const performanceCtx = document.getElementById('performanceChart');
      if (performanceCtx) {
        try {
          // Make sure we have teams data
          if (!window.appData || !window.appData.teams || window.appData.teams.length === 0) {
            this.showChartErrorPlaceholder(performanceCtx, 'Team Performance');
            return;
          }
          
          // Create chart configuration with safe access
          const chartConfig = {
            type: 'bar',
            data: {
              labels: window.appData.teams.map(team => team.name || 'Unnamed Team'),
              datasets: [{
                label: 'Performance Score',
                data: window.appData.teams.map(team => team.performance || 0),
                backgroundColor: window.appData.teams.map(team => {
                  const stream = (team.stream || 'unknown').toLowerCase();
                  return {
                    bbv: '#00518A',
                    add: '#CC2030',
                    arb: '#4F46E5',
                    shared: '#232323'
                  }[stream] || '#666666';
                })
              }]
            },
            options: {
              responsive: true,
              maintainAspectRatio: false,
              scales: {
                y: {
                  beginAtZero: true,
                  max: 100,
                  title: {
                    display: true,
                    text: 'Performance (%)'
                  }
                },
                x: {
                  title: {
                    display: true,
                    text: 'Teams'
                  }
                }
              },
              plugins: {
                legend: {
                  display: false
                }
              }
            }
          };
          
          // Create new chart with error handling
          try {
            new Chart(performanceCtx, chartConfig);
            console.log('Performance chart created successfully');
          } catch (chartError) {
            console.error('Failed to create performance chart:', chartError);
            this.showChartErrorPlaceholder(performanceCtx, 'Team Performance');
          }
        } catch (error) {
          console.error('Error creating performance chart:', error);
          this.showChartErrorPlaceholder(performanceCtx, 'Team Performance');
        }
      }
    } catch (error) {
      console.error('Error in initializeCharts:', error);
      this.showChartPlaceholders();
    }
  },
  
  // Show placeholders when charts can't be loaded
  showChartPlaceholders() {
    const chartElements = ['personnelChart', 'performanceChart'];
    chartElements.forEach(id => {
      const element = document.getElementById(id);
      if (element) {
        this.showChartErrorPlaceholder(element, id === 'personnelChart' ? 'Personnel Distribution' : 'Team Performance');
      }
    });
  },
  
  // Show a specific error placeholder for a chart
  showChartErrorPlaceholder(element, title) {
    // Save the original content in case we need to restore it
    if (!element.dataset.originalHtml) {
      element.dataset.originalHtml = element.innerHTML;
    }
    
    element.innerHTML = `
      <div class="flex flex-col items-center justify-center h-full text-center p-4">
        <div class="text-red-500 mb-2">
          <i class="fas fa-chart-bar text-3xl"></i>
        </div>
        <h3 class="font-semibold text-gray-600">${title}</h3>
        <p class="text-sm text-gray-500 mt-2">Chart could not be loaded</p>
      </div>
    `;
  },

  // Render recent activities
  renderRecentActivities() {
    try {
      if (!window.appData || !window.appData.activities || !Array.isArray(window.appData.activities)) {
        return '<p>No recent activities</p>';
      }
      
      const activities = window.appData.activities.slice(0, 5); // Show last 5 activities
      
      if (activities.length === 0) {
        return '<p>No recent activities</p>';
      }

      return activities.map(activity => {
        if (!activity) return '';
        
        const type = activity.type || 'update';
        const description = activity.description || 'Activity';
        const team = activity.team || '';
        const date = activity.date || new Date().toISOString();
        
        return `
          <div class="activity-item p-3 border-b border-gray-100 last:border-0">
            <div class="flex items-center space-x-3">
              <div class="activity-icon ${type}">
                <i class="fas ${this.getActivityIcon(type)}"></i>
              </div>
              <div>
                <p class="text-sm font-medium">${description}</p>
                <p class="text-xs text-gray-500">
                  ${team} • ${this.formatDate(date)}
                </p>
              </div>
            </div>
          </div>
        `;
      }).join('');
    } catch (error) {
      console.error('Error rendering activities:', error);
      return '<p>Error loading activities</p>';
    }
  },

  // Render upcoming tasks
  renderUpcomingTasks() {
    try {
      if (!window.appData || !window.appData.tasks || !Array.isArray(window.appData.tasks)) {
        return '<p>No upcoming tasks</p>';
      }
      
      // Sort tasks by due date and show the first 5
      const tasks = [...window.appData.tasks]
        .filter(task => task) // Filter out null tasks
        .sort((a, b) => {
          try {
            return new Date(a.dueDate || 0) - new Date(b.dueDate || 0);
          } catch (err) {
            return 0;
          }
        })
        .slice(0, 5);
      
      if (tasks.length === 0) {
        return '<p>No upcoming tasks</p>';
      }

      return tasks.map(task => {
        try {
          const progress = task.progress || 0;
          const title = task.title || 'Unnamed Task';
          const dueDate = task.dueDate || new Date().toISOString();
          const assignedTo = task.assignedTo || 'Unassigned';
          const priority = task.priority || 'Normal';
          
          return `
            <div class="task-item p-3 border-b border-gray-100 last:border-0">
              <div class="flex items-center justify-between">
                <div>
                  <p class="text-sm font-medium">${title}</p>
                  <p class="text-xs text-gray-500">
                    Due: ${this.formatDate(dueDate)} • 
                    Assigned to: ${assignedTo} • 
                    Priority: ${priority}
                  </p>
                </div>
                <div class="flex items-center space-x-2">
                  <div class="w-20 bg-gray-200 rounded-full h-2">
                    <div class="bg-blue-600 h-2 rounded-full" style="width: ${progress}%"></div>
                  </div>
                  <span class="text-xs text-gray-500">${progress}%</span>
                </div>
              </div>
            </div>
          `;
        } catch (taskError) {
          console.error('Error rendering task:', taskError);
          return '';
        }
      }).join('');
    } catch (error) {
      console.error('Error rendering tasks:', error);
      return '<p>Error loading tasks</p>';
    }
  },

  // Get activity icon based on type
  getActivityIcon(type) {
    const icons = {
      update: 'fa-edit',
      create: 'fa-plus',
      delete: 'fa-trash',
      comment: 'fa-comment',
      status: 'fa-check-circle'
    };
    return icons[type] || 'fa-info-circle';
  },

  // Format date
  formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  },

  // Show all activities modal
  showAllActivities() {
    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <div class="flex justify-between items-center mb-4">
          <h2>Activity History</h2>
          <button class="close-btn" onclick="ui.closeModal(this)">
            <i class="fas fa-times"></i>
          </button>
        </div>
        <div class="space-y-4">
          ${window.appData.history && window.appData.history.activities ? window.appData.history.activities.map(activity => `
            <div class="activity-item">
              <div class="flex items-center space-x-3">
                <div class="activity-icon ${activity.type}">
                  <i class="fas ${this.getActivityIcon(activity.type)}"></i>
                </div>
                <div>
                  <p class="text-sm font-medium">${activity.description}</p>
                  <p class="text-xs text-gray-500">${activity.user} • ${this.formatDate(activity.timestamp)}</p>
                </div>
              </div>
            </div>
          `).join('') : '<p>No activity history available</p>'}
        </div>
      </div>
    `;
    document.body.appendChild(modal);
  },

  // Show add task modal
  showAddTaskModal() {
    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <div class="flex justify-between items-center mb-4">
          <h2>Add New Task</h2>
          <button class="close-btn" onclick="ui.closeModal(this)">
            <i class="fas fa-times"></i>
          </button>
        </div>
        <form id="addTaskForm" onsubmit="ui.handleAddTask(event)">
          <div class="form-group">
            <label for="taskTitle">Title</label>
            <input type="text" id="taskTitle" required>
          </div>
          <div class="form-group">
            <label for="taskDescription">Description</label>
            <textarea id="taskDescription" required></textarea>
          </div>
          <div class="form-group">
            <label for="taskDueDate">Due Date</label>
            <input type="date" id="taskDueDate" required>
          </div>
          <div class="form-group">
            <label for="taskPriority">Priority</label>
            <select id="taskPriority" required>
              <option value="low">Low</option>
              <option value="medium">Medium</option>
              <option value="high">High</option>
            </select>
          </div>
          <div class="form-group">
            <label for="taskAssignee">Assignee</label>
            <select id="taskAssignee" required>
              ${window.appData.personnel && Array.isArray(window.appData.personnel) ? window.appData.personnel.map(person => `
                <option value="${person.id}">${person.name}</option>
              `).join('') : '<option value="">No personnel available</option>'}
            </select>
          </div>
          <button type="submit" class="btn-primary">Add Task</button>
        </form>
      </div>
    `;
    document.body.appendChild(modal);
  },

  // Handle add task form submission
  handleAddTask(event) {
    event.preventDefault();
    const form = event.target;
    const task = {
      id: window.appData.tasks.length + 1,
      title: form.querySelector('#taskTitle').value,
      description: form.querySelector('#taskDescription').value,
      dueDate: form.querySelector('#taskDueDate').value,
      priority: form.querySelector('#taskPriority').value,
      assignee: form.querySelector('#taskAssignee').value,
      progress: 0,
      status: 'pending'
    };
    window.appData.tasks.push(task);
    this.saveChanges();
    this.closeModal(form.closest('.modal'));
    this.loadDashboard();
  },

  // Close modal
  closeModal(button) {
    const modal = button.closest('.modal');
    if (modal) {
      modal.remove();
    }
  },
  
  // Hide modal - alternate method that can be called without a button reference
  hideModal() {
    const modal = document.querySelector('.modal');
    if (modal) {
      modal.remove();
    }
  },

  // Update login state
  updateLoginState() {
    const loginBtn = document.getElementById('loginBtn');
    const userInfo = document.getElementById('userInfo');
    const userName = document.getElementById('userName');
    const userRole = document.getElementById('userRole');
    const saveChangesBtn = document.getElementById('saveChangesBtn');

    // Ensure appData exists and has a state
    if (!window.appData || !window.appData.state) {
      console.warn('appData or its state is undefined in updateLoginState');
      window.appData = window.appData || {};
      window.appData.state = window.appData.state || {};
    }

    // Ensure appData.state has an isLoggedIn property
    if (typeof window.appData.state.isLoggedIn !== 'boolean') {
      console.warn('appData.state.isLoggedIn is not properly defined');
      window.appData.state = window.appData.state || {};
      window.appData.state.isLoggedIn = true;
      window.appData.state.userName = "User";
      window.appData.state.userRole = "Administrator";
    }
    
    // Always set to logged in
    window.appData.state.isLoggedIn = true;

    if (window.appData.state.isLoggedIn) {
      if (loginBtn) loginBtn.classList.add('hidden');
      if (userInfo) userInfo.classList.remove('hidden');
      if (saveChangesBtn) saveChangesBtn.classList.remove('hidden');
      
      const currentUser = window.appData.users && window.appData.users.find(user => user.id === window.appData.state.currentUser);
      if (currentUser) {
        if (userName) userName.textContent = currentUser.name;
        if (userRole) userRole.textContent = currentUser.role;
      } else {
        // Fall back to state values if user not found in users array
        if (userName) userName.textContent = window.appData.state.userName || 'User';
        if (userRole) userRole.textContent = window.appData.state.userRole || 'Guest';
      }
    } else {
      if (loginBtn) loginBtn.classList.remove('hidden');
      if (userInfo) userInfo.classList.add('hidden');
      if (saveChangesBtn) saveChangesBtn.classList.add('hidden');
    }
  },

  // Helper method to ensure images are lazy-loaded
  createLazyImage(src, altText, className = '') {
    return `<img src="${src}" alt="${altText}" class="${className}" loading="lazy">`;
  },
  
  // Render teams grid with lazy loading
  renderTeamsGrid() {
    return window.appData.teams.map(team => {
      const teamLogo = team.logo || 'https://via.placeholder.com/64x64?text=' + team.name.charAt(0);
      
      return `
        <div class="team-card bg-white rounded-lg shadow overflow-hidden transition-all hover:shadow-lg" data-team-id="${team.id}">
          <div class="p-4 flex items-center space-x-4">
            ${this.createLazyImage(teamLogo, `${team.name} logo`, 'w-16 h-16 object-cover rounded-full')}
            <div>
              <h3 class="text-lg font-semibold">
                <span class="text-${team.stream.toLowerCase()}">${team.name}</span>
              </h3>
              <p class="text-sm text-gray-500">${team.personnel.length} Members</p>
            </div>
          </div>
          <div class="px-4 pb-4">
            <div class="truncate-description">
              <p class="text-gray-700">${team.description}</p>
              <button class="text-blue-500 text-sm mt-1 show-more-btn" data-team-id="${team.id}" data-action="description">
                Show More
              </button>
            </div>
            
            <div class="mt-4 flex justify-between">
              <button class="px-3 py-1 text-sm bg-blue-500 text-white rounded hover:bg-blue-600" data-action="view" data-team-id="${team.id}">
                View Team
              </button>
              <div class="flex space-x-2">
                <button class="p-1 text-gray-500 hover:text-blue-500" data-action="edit" data-team-id="${team.id}" title="Edit Team">
                  <i class="fas fa-edit"></i>
                </button>
                <button class="p-1 text-gray-500 hover:text-red-500" data-action="delete" data-team-id="${team.id}" title="Delete Team">
                  <i class="fas fa-trash-alt"></i>
                </button>
              </div>
            </div>
          </div>
        </div>
      `;
    }).join('');
  },

  // Helper method to toggle description visibility
  toggleDescription(button, teamId) {
    const team = appData.teams.find(t => t.id === teamId);
    if (!team) return;
    
    const descriptionElement = button.previousElementSibling;
    
    if (descriptionElement.classList.contains('line-clamp-2')) {
      descriptionElement.classList.remove('line-clamp-2');
      button.textContent = 'Show less';
    } else {
      descriptionElement.classList.add('line-clamp-2');
      button.textContent = 'Read more';
    }
  },
  
  // Helper method to toggle responsibilities visibility
  toggleResponsibilities(button, teamId) {
    const team = appData.teams.find(t => t.id === teamId);
    if (!team) return;
    
    const responsibilitiesElement = button.previousElementSibling;
    
    if (responsibilitiesElement.classList.contains('line-clamp-2')) {
      responsibilitiesElement.classList.remove('line-clamp-2');
      button.textContent = 'Show less';
    } else {
      responsibilitiesElement.classList.add('line-clamp-2');
      button.textContent = 'Read more';
    }
  },
  
  // Show comprehensive team details in a modal
  showTeamDetails(teamId) {
    const team = window.appData.teams.find(t => t.id === teamId);
    if (!team) return;
    
    // Find sub-teams (teams that reference this team as parent)
    const subTeams = window.appData.teams.filter(t => t.parentTeamId === teamId);
    
    const modal = document.createElement('div');
    modal.className = 'modal modal-lg';
    modal.innerHTML = `
      <div class="modal-content">
        <div class="flex justify-between items-start mb-6">
          <div>
            <h2 class="text-2xl font-semibold text-${team.stream}">${team.name}</h2>
            <p class="text-sm text-gray-600">${team.stream.toUpperCase()} Stream</p>
          </div>
          <button class="btn-icon" onclick="ui.hideModal()">
            <i class="fas fa-times"></i>
          </button>
        </div>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
          <div>
            <h3 class="text-lg font-medium mb-3">Description</h3>
            <p class="text-gray-700">${team.description}</p>
          </div>
          
          <div>
            <h3 class="text-lg font-medium mb-3">Responsibilities</h3>
            <p class="text-gray-700">${team.responsibilities}</p>
          </div>
        </div>
        
        <div class="mb-6">
          <h3 class="text-lg font-medium mb-3">Performance</h3>
          <div class="flex items-center space-x-4">
            <div class="w-full bg-gray-200 rounded-full h-2.5">
              <div class="bg-${team.stream} h-2.5 rounded-full" style="width: ${team.performance || 0}%"></div>
            </div>
            <span class="text-lg font-semibold">${team.performance || 0}%</span>
          </div>
        </div>
        
        ${subTeams.length > 0 ? `
          <div class="mb-6">
            <div class="flex justify-between items-center mb-4">
              <h3 class="text-lg font-medium">Sub-Teams (${subTeams.length})</h3>
            </div>
            
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              ${subTeams.map(subTeam => `
                <div class="bg-white border border-gray-200 rounded-lg shadow-sm p-4 cursor-pointer" onclick="ui.showTeamDetails(${subTeam.id})">
                  <div class="flex items-center space-x-3">
                    <div class="w-8 h-8 rounded-full flex items-center justify-center text-white bg-${subTeam.stream}-600">
                      ${subTeam.name.charAt(0)}
                    </div>
                    <div>
                      <h4 class="font-medium">${subTeam.name}</h4>
                      <p class="text-xs text-gray-500">${subTeam.personnel ? subTeam.personnel.length : 0} members</p>
                    </div>
                  </div>
                </div>
              `).join('')}
            </div>
          </div>
        ` : ''}
        
        <div>
          <div class="flex justify-between items-center mb-4">
            <h3 class="text-lg font-medium">Personnel (${team.personnel.length})</h3>
            <button class="btn-primary btn-sm" onclick="ui.showAddPersonnelModal(${team.id})">
              <i class="fas fa-user-plus mr-2"></i> Add Personnel
            </button>
          </div>
          
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            ${team.personnel.map(person => `
              <div class="bg-gray-50 p-4 rounded-md hover:shadow-md transition-shadow">
                <div class="flex justify-between items-start">
                  <div>
                    <p class="font-medium">${person.name}</p>
                    <p class="text-sm text-gray-600">${person.role}</p>
                    <p class="text-sm text-gray-600 mt-1">Client: ${person.client}</p>
                  </div>
                  <div class="flex space-x-1">
                    <button class="btn-icon btn-sm" onclick="ui.editPersonnel(${person.id})">
                      <i class="fas fa-user-edit"></i>
                    </button>
                    <button class="btn-icon btn-sm" onclick="ui.removePersonnel(${person.id}, ${team.id})">
                      <i class="fas fa-user-minus"></i>
                    </button>
                  </div>
                </div>
                ${person.skills ? `
                <div class="mt-3 pt-3 border-t">
                  <p class="text-xs text-gray-500 mb-1">Skills:</p>
                  <div class="flex flex-wrap gap-1">
                    ${Object.entries(person.skills).slice(0, 3).map(([id, level]) => {
                      const skill = window.appData.skills?.find(s => s.id == id);
                      return skill ? `
                        <span class="px-2 py-0.5 text-xs rounded-full bg-${team.stream} bg-opacity-10 text-${team.stream}">
                          ${skill.name}: ${level}
                        </span>
                      ` : '';
                    }).join('')}
                    ${Object.keys(person.skills).length > 3 ? `
                      <span class="px-2 py-0.5 text-xs rounded-full bg-gray-100 text-gray-600">
                        +${Object.keys(person.skills).length - 3} more
                      </span>
                    ` : ''}
                  </div>
                </div>
                ` : ''}
              </div>
            `).join('')}
          </div>
        </div>
        
        <div class="mt-6 flex justify-end space-x-3">
          <button class="btn-secondary" onclick="ui.editTeam(${team.id})">
            <i class="fas fa-edit mr-2"></i> Edit Team
          </button>
          <button class="btn-primary" onclick="ui.showAddSubTeamModal(${team.id})">
            <i class="fas fa-plus mr-2"></i> Add Sub-Team
          </button>
        </div>
      </div>
    `;
    document.body.appendChild(modal);
    
    // Add CSS for line clamp if not already added
    if (!document.getElementById('line-clamp-css')) {
      const style = document.createElement('style');
      style.id = 'line-clamp-css';
      style.textContent = `
        .line-clamp-2 {
          display: -webkit-box;
          -webkit-line-clamp: 2;
          -webkit-box-orient: vertical;
          overflow: hidden;
        }
        .tooltip-trigger {
          position: relative;
        }
        .tooltip {
          visibility: hidden;
          position: absolute;
          top: -30px;
          left: 50%;
          transform: translateX(-50%);
          background-color: #333;
          color: white;
          padding: 4px 8px;
          border-radius: 4px;
          font-size: 12px;
          white-space: nowrap;
          opacity: 0;
          transition: opacity 0.3s;
          z-index: 10;
        }
        .tooltip-trigger:hover .tooltip {
          visibility: visible;
          opacity: 1;
        }
      `;
      document.head.appendChild(style);
    }
  },
  
  // Create a sub-team
  showAddSubTeamModal(parentTeamId) {
    const parentTeam = window.appData.teams.find(t => t.id === parentTeamId);
    if (!parentTeam) return;
    
    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <h2 class="text-xl font-semibold mb-4">Add Sub-Team to ${parentTeam.name}</h2>
        <form id="addSubTeamForm">
          <div class="form-group">
            <label for="teamName">Team Name</label>
            <input type="text" id="teamName" class="form-input" required>
          </div>
          <div class="form-group">
            <label for="teamStream">Stream</label>
            <select id="teamStream" class="form-select" required>
              <option value="${parentTeam.stream}" selected>${parentTeam.stream.toUpperCase()}</option>
              <option value="bbv">BBV</option>
              <option value="add">ADD</option>
              <option value="arb">ARB</option>
              <option value="shared">Shared</option>
            </select>
          </div>
          <div class="form-group">
            <label for="teamDescription">Description</label>
            <textarea id="teamDescription" class="form-textarea" rows="3" required></textarea>
          </div>
          <div class="form-group">
            <label for="teamResponsibilities">Responsibilities</label>
            <textarea id="teamResponsibilities" class="form-textarea" rows="3" required></textarea>
          </div>
          <div class="flex justify-end space-x-2 mt-4">
            <button type="button" class="btn-secondary" onclick="ui.hideModal()">Cancel</button>
            <button type="submit" class="btn-primary">Add Sub-Team</button>
          </div>
        </form>
      </div>
    `;
    document.body.appendChild(modal);
    
    // Handle form submission
    document.getElementById('addSubTeamForm').addEventListener('submit', e => {
      e.preventDefault();
      
      // Generate a new ID
      const newId = Date.now();
      
      // Create new team
      const newTeam = {
        id: newId,
        parentTeamId: parentTeamId,
        name: document.getElementById('teamName').value,
        stream: document.getElementById('teamStream').value,
        description: document.getElementById('teamDescription').value,
        responsibilities: document.getElementById('teamResponsibilities').value,
        performance: 0,
        personnel: []
      };
      
      // Add to teams array
      if (!window.appData.teams) window.appData.teams = [];
      window.appData.teams.push(newTeam);
      
      // Save changes
      this.saveChanges();
      
      // Hide modal
      this.hideModal();
      
      // Show success message
      this.showToast('Sub-team added successfully', 'success');
      
      // Open the new team details
      this.showTeamDetails(newId);
    });
  },
  
  loadTeams() {
    try {
      console.log('Loading teams content...');
      
      const tabContent = document.getElementById('tabContent');
      if (!tabContent) {
        console.error('Tab content element not found');
        return;
      }

      // Check if already loading to prevent duplicate loads
      if (tabContent.dataset.loading === 'true' && tabContent.dataset.currentTab === 'teams') {
        console.log('Teams already loading, skipping duplicate load request');
        return;
      }
      
      // Set loading state
      tabContent.dataset.loading = 'true';
      tabContent.dataset.currentTab = 'teams';
      
      // Clear any existing content first - important to avoid content from other tabs persisting
      tabContent.innerHTML = `
        <div class="flex justify-center items-center p-12">
          <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
          <p class="ml-4 text-gray-500">Loading teams content...</p>
        </div>
      `;

      // Use a setTimeout to allow the loading indicator to render
      setTimeout(() => {
        try {
          // Ensure appData and teams array exists - defensive coding
          if (!window.appData) window.appData = {};
          if (!window.appData.teams) window.appData.teams = [];
          
          // Check if a stream filter was set from dashboard navigation
          const activeFilter = sessionStorage.getItem('activeFilter');
          let teams = window.appData.teams;
          
          // Filter teams if an active filter is set
          if (activeFilter) {
            teams = teams.filter(team => team && team.stream === activeFilter);
            console.log(`Applying stream filter: ${activeFilter}, filtered to ${teams.length} teams`);
          }

          // Generate team cards with safe access to properties
          const teamCards = teams.length > 0 ? teams.map(team => {
            // Ensure team has all required properties
            if (!team) return '';
            
            // Ensure personnel exists
            if (!team.personnel) team.personnel = [];
            
            return `
              <div class="bg-white rounded-lg shadow-sm hover:shadow transition-all p-4 border border-gray-200 cursor-pointer team-card" data-team-id="${team.id || ''}">
                <div class="flex items-center space-x-3 mb-3">
                  <div class="w-10 h-10 rounded-full flex items-center justify-center text-white bg-${team.stream || 'gray'}-600">
                    ${team.name ? team.name.charAt(0) : '?'}
                  </div>
                  <div>
                    <h3 class="font-semibold">${team.name || 'Unnamed Team'}</h3>
                    <p class="text-xs text-gray-500">${(team.stream || 'unknown').toUpperCase()} • ${team.personnel.length} members</p>
                  </div>
                </div>
                
                <p class="text-sm text-gray-600 mb-4">${team.description || 'No description available'}</p>
                
                <div class="text-xs text-gray-500 mb-1 flex justify-between">
                  <span>Performance</span>
                  <span>${team.performance || 0}%</span>
                </div>
                
                <div class="w-full bg-gray-200 rounded-full h-2 mb-4">
                  <div class="bg-${team.stream || 'blue'}-600 h-2 rounded-full" style="width: ${team.performance || 0}%"></div>
                </div>
                
                <div class="flex justify-between">
                  <button class="text-blue-600 text-sm hover:text-blue-800 view-team-btn" data-team-id="${team.id || ''}">
                    View Details
                  </button>
                  <div>
                    <button class="text-gray-500 hover:text-blue-600 mx-2 edit-team-btn" data-team-id="${team.id || ''}">
                      <i class="fas fa-edit"></i>
                    </button>
                    <button class="text-gray-500 hover:text-red-600 delete-team-btn" data-team-id="${team.id || ''}">
                      <i class="fas fa-trash-alt"></i>
                    </button>
                  </div>
                </div>
              </div>
            `;
          }).join('') : '<p class="col-span-full text-center py-8 text-gray-500">No teams available</p>';

          // Render the final teams tab content with filter info if active
          tabContent.innerHTML = `
            <div class="p-4">
              <div class="flex justify-between items-center mb-6">
                <div>
                  <h2 class="text-2xl font-bold">Teams</h2>
                  ${activeFilter ? `
                    <div class="flex items-center mt-2">
                      <span class="text-sm text-gray-600 mr-2">Filtered by: ${activeFilter.toUpperCase()}</span>
                      <button class="text-xs text-blue-600 hover:text-blue-800 flex items-center" id="clearFilterBtn">
                        <i class="fas fa-times-circle mr-1"></i> Clear filter
                      </button>
                    </div>
                  ` : ''}
                </div>
                <button class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition flex items-center" id="addTeamButton">
                  <i class="fas fa-plus mr-2"></i> Add Team
                </button>
              </div>
              
              <!-- Team Cards -->
              <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6" id="teamsGrid">
                ${teamCards}
              </div>
            </div>
          `;
          
          // Add event listeners to team actions
          this.addTeamEventListeners();
          
          // Add event listener to clear filter button if it exists
          const clearFilterBtn = document.getElementById('clearFilterBtn');
          if (clearFilterBtn) {
            clearFilterBtn.addEventListener('click', () => {
              sessionStorage.removeItem('activeFilter');
              this.loadTeams();
            });
          }
          
          // Reset loading state
          tabContent.dataset.loading = 'false';
          
          console.log('Teams content loaded successfully');
        } catch (error) {
          console.error('Error rendering teams:', error);
          
          // Show error message
          tabContent.innerHTML = `
            <div class="p-8 text-center">
              <div class="text-red-500 text-xl mb-4">
                <i class="fas fa-exclamation-triangle mr-2"></i> 
                Error loading Teams
              </div>
              <p class="mb-4">${error.message || 'An unknown error occurred'}</p>
              <button class="px-4 py-2 bg-blue-600 text-white rounded" onclick="ui.switchTab('teams')">
                <i class="fas fa-sync-alt mr-2"></i> Try Again
              </button>
            </div>
          `;
          
          // Reset loading state
          tabContent.dataset.loading = 'false';
        }
      }, 150); // Slightly longer delay for better reliability
    } catch (error) {
      console.error('Critical error in loadTeams:', error);
      
      // Show error message
      const tabContent = document.getElementById('tabContent');
      if (tabContent) {
        tabContent.innerHTML = `
          <div class="p-8 text-center">
            <div class="text-red-500 text-xl mb-4">
              <i class="fas fa-exclamation-triangle mr-2"></i> 
              Critical Error Loading Teams
            </div>
            <p class="mb-4">${error.message || 'An unknown error occurred'}</p>
            <button class="px-4 py-2 bg-blue-600 text-white rounded" onclick="location.reload()">
              <i class="fas fa-sync-alt mr-2"></i> Refresh Page
            </button>
          </div>
        `;
        
        // Reset loading state
        tabContent.dataset.loading = 'false';
      }
    }
  },
  
  // Add a new helper method to attach event listeners to team elements
  addTeamEventListeners() {
    try {
      // Add team button
      const addTeamButton = document.getElementById('addTeamButton');
      if (addTeamButton) {
        addTeamButton.addEventListener('click', () => this.showAddTeamModal());
      }
      
      // Make entire team cards clickable
      const teamCards = document.querySelectorAll('.team-card');
      teamCards.forEach(card => {
        const teamId = parseInt(card.getAttribute('data-team-id'));
        if (!isNaN(teamId)) {
          card.addEventListener('click', (e) => {
            // Only handle click if it's directly on the card (not on a button)
            if (e.target.closest('button') === null) {
              this.showTeamDetails(teamId);
            }
          });
        }
      });
      
      // View team buttons
      const viewTeamBtns = document.querySelectorAll('.view-team-btn');
      viewTeamBtns.forEach(btn => {
        const teamIdAttr = btn.getAttribute('data-team-id');
        if (teamIdAttr) {
          const teamId = parseInt(teamIdAttr);
          if (!isNaN(teamId)) {
            btn.addEventListener('click', (e) => {
              e.stopPropagation(); // Prevent card click
              this.showTeamDetails(teamId);
            });
          }
        }
      });
      
      // Edit team buttons
      const editTeamBtns = document.querySelectorAll('.edit-team-btn');
      editTeamBtns.forEach(btn => {
        const teamIdAttr = btn.getAttribute('data-team-id');
        if (teamIdAttr) {
          const teamId = parseInt(teamIdAttr);
          if (!isNaN(teamId)) {
            btn.addEventListener('click', (e) => {
              e.stopPropagation(); // Prevent card click
              this.editTeam(teamId);
            });
          }
        }
      });
      
      // Delete team buttons
      const deleteTeamBtns = document.querySelectorAll('.delete-team-btn');
      deleteTeamBtns.forEach(btn => {
        const teamIdAttr = btn.getAttribute('data-team-id');
        if (teamIdAttr) {
          const teamId = parseInt(teamIdAttr);
          if (!isNaN(teamId)) {
            btn.addEventListener('click', (e) => {
              e.stopPropagation(); // Prevent card click
              this.deleteTeam(teamId);
            });
          }
        }
      });
    } catch (error) {
      console.error('Error setting up team event listeners:', error);
      this.showToast('Error setting up team interactions', 'error');
    }
  },
  
  // Helper functions for team statistics
  countAllPersonnel() {
    let count = 0;
    if (window.appData && window.appData.teams) {
      window.appData.teams.forEach(team => {
        if (team.personnel) count += team.personnel.length;
      });
    }
    return count;
  },
  
  calculateAverageTeamSize() {
    if (!window.appData || !window.appData.teams || window.appData.teams.length === 0) {
      return 0;
    }
    const totalPersonnel = this.countAllPersonnel();
    return Math.round(totalPersonnel / window.appData.teams.length);
  },
  
  calculateAveragePerformance() {
    if (!window.appData || !window.appData.teams || window.appData.teams.length === 0) {
      return 0;
    }
    const totalPerformance = window.appData.teams.reduce((sum, team) => sum + (team.performance || 0), 0);
    return Math.round(totalPerformance / window.appData.teams.length);
  },
  
  // Simple team rendering
  renderTeamsSimple() {
    if (!window.appData || !window.appData.teams || window.appData.teams.length === 0) {
      return '<div class="col-span-full text-center py-8 text-gray-500">No teams available</div>';
    }
    
    return window.appData.teams.map(team => `
      <div class="bg-white rounded-lg shadow-sm hover:shadow transition-all p-4 border border-gray-200">
        <div class="flex items-center space-x-3 mb-3">
          <div class="w-10 h-10 rounded-full flex items-center justify-center text-white bg-gray-600">
            ${team.name.charAt(0)}
          </div>
          <div>
            <h3 class="font-semibold">${team.name}</h3>
            <p class="text-xs text-gray-500">${team.stream.toUpperCase()} • ${team.personnel ? team.personnel.length : 0} members</p>
          </div>
        </div>
        
        <p class="text-sm text-gray-600 mb-4">${team.description}</p>
        
        <div class="text-xs text-gray-500 mb-1 flex justify-between">
          <span>Performance</span>
          <span>${team.performance || 0}%</span>
        </div>
        
        <div class="w-full bg-gray-200 rounded-full h-2 mb-4">
          <div class="bg-blue-600 h-2 rounded-full" style="width: ${team.performance || 0}%"></div>
        </div>
        
        <div class="flex justify-between">
          <button class="text-blue-600 text-sm hover:text-blue-800" onclick="ui.showTeamDetails(${team.id})">
            View Details
          </button>
          <div>
            <button class="text-gray-500 hover:text-blue-600 mx-2" onclick="ui.editTeam(${team.id})">
              <i class="fas fa-edit"></i>
            </button>
            <button class="text-gray-500 hover:text-red-600" onclick="ui.deleteTeam(${team.id})">
              <i class="fas fa-trash-alt"></i>
            </button>
          </div>
        </div>
      </div>
    `).join('');
  },
  
  // Export teams data as CSV or JSON
  exportTeamsCSV() {
    let csvContent = "data:text/csv;charset=utf-8,";
    
    // Add headers
    csvContent += "Team ID,Team Name,Stream,Personnel Count,Performance,Description,Responsibilities\n";
    
    // Add team data
    window.appData.teams.forEach(team => {
      csvContent += [
        team.id,
        `"${team.name.replace(/"/g, '""')}"`,
        team.stream,
        team.personnel.length,
        team.performance || 0,
        `"${team.description.replace(/"/g, '""')}"`,
        `"${team.responsibilities.replace(/"/g, '""')}"`
      ].join(',') + '\n';
    });
    
    // Create download link
    const encodedUri = encodeURI(csvContent);
    const link = document.createElement("a");
    link.setAttribute("href", encodedUri);
    link.setAttribute("download", "teams_data.csv");
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
    this.hideModal();
    this.showToast('Teams exported as CSV', 'success');
  },
  
  exportTeamsJSON() {
    const data = JSON.stringify(window.appData.teams, null, 2);
    const blob = new Blob([data], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    
    const link = document.createElement("a");
    link.setAttribute("href", url);
    link.setAttribute("download", "teams_data.json");
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
    
    this.hideModal();
    this.showToast('Teams exported as JSON', 'success');
  },
  
  sortTeams() {
    const sortBy = document.getElementById('sortTeams').value;
    const grid = document.getElementById('teamsGrid');
    const cards = Array.from(grid.querySelectorAll('.team-card'));
    
    cards.sort((a, b) => {
      const aId = parseInt(a.getAttribute('data-id'));
      const bId = parseInt(b.getAttribute('data-id'));
      const aTeam = window.appData.teams.find(t => t.id === aId);
      const bTeam = window.appData.teams.find(t => t.id === bId);
      
      if (!aTeam || !bTeam) return 0;
      
      switch (sortBy) {
        case 'name':
          return aTeam.name.localeCompare(bTeam.name);
        case 'size':
          return bTeam.personnel.length - aTeam.personnel.length;
        case 'performance':
          return (bTeam.performance || 0) - (aTeam.performance || 0);
        default:
          return 0;
      }
    });
    
    // Re-append cards in the sorted order
    cards.forEach(card => grid.appendChild(card));
  },

  showAddTeamModal() {
    try {
      const modal = document.createElement('div');
      modal.className = 'modal';
      modal.innerHTML = `
        <div class="modal-content">
          <h2 class="text-xl font-semibold mb-4">Add New Team</h2>
          <form id="addTeamForm">
            <div class="form-group">
              <label for="teamName">Team Name</label>
              <input type="text" id="teamName" required>
            </div>
            <div class="form-group">
              <label for="teamStream">Stream</label>
              <select id="teamStream" required>
                <option value="bbv">BBV</option>
                <option value="add">ADD</option>
                <option value="arb">ARB</option>
                <option value="shared">Shared</option>
              </select>
            </div>
            <div class="form-group">
              <label for="teamDescription">Description</label>
              <textarea id="teamDescription" rows="3" required></textarea>
            </div>
            <div class="form-group">
              <label for="teamResponsibilities">Responsibilities</label>
              <textarea id="teamResponsibilities" rows="3" required></textarea>
            </div>
            <div class="flex justify-end space-x-2 mt-4">
              <button type="button" class="btn-secondary" onclick="ui.hideModal()">Cancel</button>
              <button type="submit" class="btn-primary">Add Team</button>
            </div>
          </form>
        </div>
      `;
      document.body.appendChild(modal);

      const form = modal.querySelector('#addTeamForm');
      if (form) {
        form.addEventListener('submit', (e) => {
          e.preventDefault();
          try {
            // Ensure appData and teams exist
            if (!window.appData) window.appData = {};
            if (!window.appData.teams) window.appData.teams = [];
            
            const team = {
              id: Date.now(),
              name: form.querySelector('#teamName').value.trim(),
              stream: form.querySelector('#teamStream').value,
              description: form.querySelector('#teamDescription').value.trim(),
              responsibilities: form.querySelector('#teamResponsibilities').value.trim(),
              performance: 0,
              personnel: []
            };
            
            window.appData.teams.push(team);
            
            this.saveChanges();
            this.hideModal();
            this.showToast('Team added successfully', 'success');
            this.loadTeams();
          } catch (formError) {
            console.error('Error adding team:', formError);
            this.showToast('Error adding team: ' + (formError.message || 'Unknown error'), 'error');
          }
        });
      }
    } catch (error) {
      console.error('Error showing add team modal:', error);
      this.showToast('Could not open add team form', 'error');
    }
  },

  editTeam(teamId) {
    const team = window.appData.teams.find(t => t.id === teamId);
    if (!team) return;

    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <h2 class="text-xl font-semibold mb-4">Edit Team</h2>
        <form id="editTeamForm">
          <div class="form-group">
            <label for="teamName">Team Name</label>
            <input type="text" id="teamName" value="${team.name}" required>
          </div>
          <div class="form-group">
            <label for="teamStream">Stream</label>
            <select id="teamStream" required>
              <option value="bbv" ${team.stream === 'bbv' ? 'selected' : ''}>BBV</option>
              <option value="add" ${team.stream === 'add' ? 'selected' : ''}>ADD</option>
              <option value="arb" ${team.stream === 'arb' ? 'selected' : ''}>ARB</option>
              <option value="shared" ${team.stream === 'shared' ? 'selected' : ''}>Shared</option>
            </select>
          </div>
          <div class="form-group">
            <label for="teamDescription">Description</label>
            <textarea id="teamDescription" rows="3" required>${team.description}</textarea>
          </div>
          <div class="form-group">
            <label for="teamResponsibilities">Responsibilities</label>
            <textarea id="teamResponsibilities" rows="3" required>${team.responsibilities}</textarea>
          </div>
          <div class="form-group">
            <label for="teamPerformance">Performance Score</label>
            <input type="number" id="teamPerformance" min="0" max="100" value="${team.performance}" required>
          </div>
          <div class="flex justify-end space-x-2 mt-4">
            <button type="button" class="btn-secondary" onclick="ui.hideModal()">Cancel</button>
            <button type="submit" class="btn-primary">Save Changes</button>
          </div>
        </form>
      </div>
    `;
    document.body.appendChild(modal);

    const form = modal.querySelector('#editTeamForm');
    form.addEventListener('submit', (e) => {
      e.preventDefault();
      team.name = form.querySelector('#teamName').value;
      team.stream = form.querySelector('#teamStream').value;
      team.description = form.querySelector('#teamDescription').value;
      team.responsibilities = form.querySelector('#teamResponsibilities').value;
      team.performance = parseInt(form.querySelector('#teamPerformance').value);
      
      this.saveChanges();
      this.hideModal();
      this.showToast('Team updated successfully', 'success');
      this.loadTeams();
    });
  },

  deleteTeam(teamId) {
    if (confirm('Are you sure you want to delete this team? This action cannot be undone.')) {
      window.appData.teams = window.appData.teams.filter(t => t.id !== teamId);
      this.saveChanges();
      this.showToast('Team deleted successfully', 'success');
      this.loadTeams();
    }
  },

  showAddPersonnelModal(teamId) {
    const team = window.appData.teams.find(t => t.id === teamId);
    if (!team) return;

    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <h2 class="text-xl font-semibold mb-4">Add Personnel to ${team.name}</h2>
        <form id="addPersonnelForm">
          <div class="form-group">
            <label for="personnelName">Name</label>
            <input type="text" id="personnelName" required>
          </div>
          <div class="form-group">
            <label for="personnelRole">Role</label>
            <input type="text" id="personnelRole" required>
          </div>
          <div class="form-group">
            <label for="personnelClient">Client</label>
            <input type="text" id="personnelClient" required>
          </div>
          <div class="flex justify-end space-x-2 mt-4">
            <button type="button" class="btn-secondary" onclick="ui.hideModal()">Cancel</button>
            <button type="submit" class="btn-primary">Add Personnel</button>
          </div>
        </form>
      </div>
    `;
    document.body.appendChild(modal);

    const form = modal.querySelector('#addPersonnelForm');
    form.addEventListener('submit', (e) => {
      e.preventDefault();
      const personnel = {
        id: Date.now(),
        name: form.querySelector('#personnelName').value,
        role: form.querySelector('#personnelRole').value,
        client: form.querySelector('#personnelClient').value
      };
      
      team.personnel.push(personnel);
      this.saveChanges();
      this.hideModal();
      this.showToast('Personnel added successfully', 'success');
      this.loadTeams();
    });
  },

  editPersonnel(personnelId) {
    const team = window.appData.teams.find(t => t.personnel.some(p => p.id === personnelId));
    const personnel = team?.personnel.find(p => p.id === personnelId);
    if (!personnel) return;

    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <h2 class="text-xl font-semibold mb-4">Edit Personnel</h2>
        <form id="editPersonnelForm">
          <div class="form-group">
            <label for="personnelName">Name</label>
            <input type="text" id="personnelName" value="${personnel.name}" required>
          </div>
          <div class="form-group">
            <label for="personnelRole">Role</label>
            <input type="text" id="personnelRole" value="${personnel.role}" required>
          </div>
          <div class="form-group">
            <label for="personnelClient">Client</label>
            <input type="text" id="personnelClient" value="${personnel.client}" required>
          </div>
          <div class="flex justify-end space-x-2 mt-4">
            <button type="button" class="btn-secondary" onclick="ui.hideModal()">Cancel</button>
            <button type="submit" class="btn-primary">Save Changes</button>
          </div>
        </form>
      </div>
    `;
    document.body.appendChild(modal);

    const form = modal.querySelector('#editPersonnelForm');
    form.addEventListener('submit', (e) => {
      e.preventDefault();
      personnel.name = form.querySelector('#personnelName').value;
      personnel.role = form.querySelector('#personnelRole').value;
      personnel.client = form.querySelector('#personnelClient').value;
      
      this.saveChanges();
      this.hideModal();
      this.showToast('Personnel updated successfully', 'success');
      this.loadTeams();
    });
  },

  removePersonnel(personnelId, teamId) {
    const team = window.appData.teams.find(t => t.id === teamId);
    if (!team) return;

    if (confirm('Are you sure you want to remove this personnel? This action cannot be undone.')) {
      team.personnel = team.personnel.filter(p => p.id !== personnelId);
      this.saveChanges();
      this.showToast('Personnel removed successfully', 'success');
      this.loadTeams();
    }
  },

  // Export org chart as PDF
  exportOrgChartPdf() {
    try {
      const orgChartContainer = document.getElementById('orgChart');
      if (!orgChartContainer) {
        this.showToast('Org chart container not found', 'error');
        return;
      }
      
      this.showToast('Preparing PDF export...', 'info');
      
      // Use html2canvas to capture the chart
      html2canvas(orgChartContainer, {
        scale: 2,
        logging: false,
        useCORS: true,
        allowTaint: true
      }).then(canvas => {
        const imgData = canvas.toDataURL('image/png');
        
        // Initialize jsPDF
        const { jsPDF } = window.jspdf;
        const pdf = new jsPDF({
          orientation: 'landscape',
          unit: 'mm'
        });
        
        // Calculate dimensions for proper fit
        const imgProps = pdf.getImageProperties(imgData);
        const pdfWidth = pdf.internal.pageSize.getWidth();
        const pdfHeight = (imgProps.height * pdfWidth) / imgProps.width;
        
        // Add title
        pdf.setFontSize(16);
        pdf.text('Organization Chart', 10, 10);
        
        // Add metadata
        const now = new Date();
        pdf.setFontSize(10);
        pdf.text(`Generated: ${now.toLocaleString()}`, 10, 20);
        
        // Add filters applied
        const clientFilter = document.getElementById('clientFilter');
        const streamFilter = document.getElementById('streamFilter');
        let filterText = '';
        if (clientFilter && streamFilter) {
          filterText = `Filters - Client: ${clientFilter.value}, Stream: ${streamFilter.value}`;
          pdf.text(filterText, 10, 25);
        }
        
        // Add the image (with padding from the top for the title and metadata)
        pdf.addImage(imgData, 'PNG', 10, 30, pdfWidth - 20, pdfHeight - 20);
        
        // Save the PDF
        pdf.save('org-chart.pdf');
        
        this.showToast('PDF export complete', 'success');
      });
    } catch (error) {
      console.error('Error exporting org chart to PDF:', error);
      this.showToast('Failed to export to PDF', 'error');
    }
  },
  
  // Export org chart data as CSV or Excel
  exportOrgChartData() {
    try {
      // Get the current filtered data
      const clientFilter = document.getElementById('clientFilter');
      const streamFilter = document.getElementById('streamFilter');
      const clientValue = clientFilter ? clientFilter.value : 'all';
      const streamValue = streamFilter ? streamFilter.value : 'all';
      
      // Get data with current filters
      const data = this.prepareOrgChartData(clientValue, streamValue, null, true);
      
      if (!data || !data.nodes || data.nodes.length === 0) {
        this.showToast('No data to export', 'error');
        return;
      }
      
      // Show export options modal
      const modal = document.createElement('div');
      modal.className = 'modal fade show';
      modal.style.display = 'block';
      modal.style.backgroundColor = 'rgba(0,0,0,0.5)';
      modal.innerHTML = `
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title">Export Org Chart Data</h5>
              <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
              </button>
            </div>
            <div class="modal-body">
              <p>Choose export format:</p>
              <div class="btn-group w-100">
                <button class="btn btn-outline-primary" id="exportCsv">CSV Format</button>
                <button class="btn btn-outline-primary" id="exportExcel">Excel Format</button>
                <button class="btn btn-outline-primary" id="exportJson">JSON Format</button>
              </div>
            </div>
          </div>
        </div>
      `;
      
      document.body.appendChild(modal);
      
      // Add event listeners
      document.querySelector('.close').addEventListener('click', () => {
        document.body.removeChild(modal);
      });
      
      // Process data for export
      const exportData = data.nodes.map(node => {
        return {
          'ID': node.id,
          'Name': node.name,
          'Role': node.role || '',
          'Client': node.client || '',
          'Stream': node.stream || '',
          'Parent': node.parentId || '',
          'Team': node.team || ''
        };
      });
      
      // CSV Export
      document.getElementById('exportCsv').addEventListener('click', () => {
        const csv = Papa.unparse(exportData);
        const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
        const link = document.createElement('a');
        const url = URL.createObjectURL(blob);
        link.setAttribute('href', url);
        link.setAttribute('download', 'org-chart-data.csv');
        link.style.visibility = 'hidden';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        document.body.removeChild(modal);
        this.showToast('CSV export complete', 'success');
      });
      
      // Excel Export
      document.getElementById('exportExcel').addEventListener('click', () => {
        const worksheet = XLSX.utils.json_to_sheet(exportData);
        const workbook = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(workbook, worksheet, 'Org Chart');
        XLSX.writeFile(workbook, 'org-chart-data.xlsx');
        document.body.removeChild(modal);
        this.showToast('Excel export complete', 'success');
      });
      
      // JSON Export
      document.getElementById('exportJson').addEventListener('click', () => {
        const json = JSON.stringify(data, null, 2);
        const blob = new Blob([json], { type: 'application/json;charset=utf-8;' });
        const link = document.createElement('a');
        const url = URL.createObjectURL(blob);
        link.setAttribute('href', url);
        link.setAttribute('download', 'org-chart-data.json');
        link.style.visibility = 'hidden';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        document.body.removeChild(modal);
        this.showToast('JSON export complete', 'success');
      });
    } catch (error) {
      console.error('Error exporting org chart data:', error);
      this.showToast('Failed to export data', 'error');
    }
  },

  prepareOrgChartData(clientFilter = 'all', streamFilter = 'all', detailLevel = 'medium', returnDataOnly = false) {
    console.log(`Preparing org chart data with filters - Client: ${clientFilter}, Stream: ${streamFilter}, Detail: ${detailLevel}`);
    
    if (!window.appData || !window.appData.teams) {
      console.error('No team data available');
      return returnDataOnly ? { nodes: [], links: [] } : false;
    }
    
    // Create organization structure
    const teams = window.appData.teams;
    
    // Create a hierarchical structure from flat teams
    const nodes = [];
    const links = [];
    
    // Add root/organization node
    nodes.push({
      id: 'root',
      name: 'Organization',
      role: 'Leadership',
      level: 0,
      color: window.config.colors.root || '#333333'
    });
    
    // Create nodes for each team
    teams.forEach(team => {
      // Apply stream filter
      if (streamFilter !== 'all' && team.stream !== streamFilter) {
        return;
      }
      
      // Create team node
      const teamNode = {
        id: `team-${team.id}`,
        name: team.name,
        description: team.description,
        responsibilities: team.responsibilities,
        level: 1,
        team: team.name,
        stream: team.stream,
        color: window.config.colors[team.stream] || '#666666',
        performance: team.performance
      };
      
      nodes.push(teamNode);
      
      // Link team to root
      links.push({
        source: 'root',
        target: teamNode.id
      });
      
      // Skip personnel for low detail level
      if (detailLevel === 'low') {
        return;
      }
      
      // Add personnel nodes
      if (team.personnel && Array.isArray(team.personnel)) {
        team.personnel.forEach(person => {
          // Apply client filter
          if (clientFilter !== 'all' && person.client !== clientFilter) {
            return;
          }
          
          // Create person node
          const personNode = {
            id: `person-${person.id}`,
            name: person.name,
            role: person.role,
            client: person.client,
            stream: team.stream,
            team: team.name,
            level: 2,
            color: window.config.colors[team.stream] || '#666666'
          };
          
          nodes.push(personNode);
          
          // Link person to team
          links.push({
            source: teamNode.id,
            target: personNode.id
          });
        });
      }
    });
    
    // For data export only
    if (returnDataOnly) {
      return { nodes, links };
    }
    
    // Draw the org chart with updated data
    this.updateOrgChart(nodes, links);
    
    return true;
  },

  // Update the org chart with new data
  updateOrgChart(nodes, links) {
    try {
      // Check if d3 is loaded
      if (typeof d3 === 'undefined') {
        console.error('D3.js library not loaded. Cannot update org chart.');
        const orgChart = document.getElementById('orgChart');
        if (orgChart) {
          orgChart.innerHTML = `
            <div class="flex flex-col items-center justify-center h-full">
              <div class="text-center p-4">
                <i class="fas fa-exclamation-triangle text-yellow-500 text-3xl mb-2"></i>
                <h3 class="font-semibold text-lg">D3.js Library Not Loaded</h3>
                <p class="text-gray-600">Cannot display the organization chart without the required library.</p>
              </div>
            </div>
          `;
        }
        return;
      }
      
      // Clear any existing SVG
      d3.select("#orgChart").selectAll("*").remove();

      // Create the root node
      const root = d3.hierarchy({ children: nodes });
      
      // Continue with the rest of the chart creation...
      // (Existing code continues)
    } catch (error) {
      console.error('Error updating org chart:', error);
    }
  },

  // Prepare hierarchical data for org chart
  prepareOrgChartData(clientFilter = 'all', streamFilter = 'all') {
    // Check if we have teams data
    if (!window.appData || !window.appData.teams || !Array.isArray(window.appData.teams) || window.appData.teams.length === 0) {
      return null;
    }
    
    // Filter teams by stream if specified
    let filteredTeams = window.appData.teams;
    if (streamFilter !== 'all') {
      filteredTeams = filteredTeams.filter(team => team && team.stream === streamFilter);
    }
    
    // Create the organizational structure
    const root = {
      name: "Quality Organization",
      stream: "root",
      type: "organization",
      children: []
    };
    
    // Group teams by stream
    const streamGroups = {};
    
    filteredTeams.forEach(team => {
      if (!team) return;
      
      const stream = team.stream || "unknown";
      
      if (!streamGroups[stream]) {
        streamGroups[stream] = {
          name: stream.toUpperCase() + " Stream",
          stream: stream,
          type: "stream",
          children: []
        };
        root.children.push(streamGroups[stream]);
      }
      
      // Create team node
      const teamNode = {
        id: team.id,
        name: team.name || "Unnamed Team",
        stream: stream,
        type: "team",
        description: team.description,
        responsibilities: team.responsibilities,
        performance: team.performance,
        children: []
      };
      
      // Add personnel nodes filtered by client if needed
      if (Array.isArray(team.personnel)) {
        team.personnel.forEach(person => {
          if (!person) return;
          
          // Apply client filter
          if (clientFilter !== 'all' && person.client !== clientFilter) {
            return;
          }
          
          teamNode.children.push({
            id: person.id,
            name: person.name || "Unnamed",
            stream: stream,
            type: "person",
            role: person.role,
            client: person.client,
            skills: person.skills
          });
        });
      }
      
      // Only add team if it has personnel after filtering
      if (clientFilter === 'all' || teamNode.children.length > 0) {
        streamGroups[stream].children.push(teamNode);
      }
    });
    
    // Remove empty streams
    root.children = root.children.filter(stream => stream.children.length > 0);
    
    return root;
  },

  // Change org chart layout
  changeOrgChartLayout(layout) {
    if (layout !== this.currentOrgChartLayout) {
      this.currentOrgChartLayout = layout;
      this.updateOrgChart();
    }
  },

  // Update the org chart
  updateOrgChart() {
    this.initializeOrgChart();
  },

  // Zoom org chart
  zoomOrgChart(factor) {
    if (!this.orgChartSvg || !this.orgChartZoom) return;
    
    const currentTransform = d3.zoomTransform(this.orgChartSvg.node());
    const newScale = currentTransform.k * factor;
    
    this.orgChartSvg.transition()
      .duration(300)
      .call(this.orgChartZoom.transform, d3.zoomIdentity
        .translate(currentTransform.x, currentTransform.y)
        .scale(newScale));
    
    // Update zoom level display
    document.getElementById('zoomLevel').textContent = `${Math.round(newScale * 100)}%`;
  },

  // Reset org chart zoom
  resetOrgChartZoom() {
    if (!this.orgChartSvg || !this.orgChartZoom) return;
    
    const width = document.getElementById('orgChart').clientWidth;
    const g = this.orgChartSvg.select("g");
    const bounds = g.node().getBBox();
    const transX = width / 2 - (bounds.x + bounds.width / 2);
    const transY = 40; // Add top margin
    
    this.orgChartSvg.transition()
      .duration(500)
      .call(this.orgChartZoom.transform, d3.zoomIdentity
        .translate(transX, transY)
        .scale(0.8));
    
    // Update zoom level display
    document.getElementById('zoomLevel').textContent = '80%';
  },

  // Search in org chart
  searchOrgChart(searchTerm) {
    if (!searchTerm) {
      // Reset all nodes to normal opacity
      d3.selectAll(".node")
        .style("opacity", 1)
        .select("circle, rect")
        .style("stroke", "#fff");
      return;
    }
    
    searchTerm = searchTerm.toLowerCase();
    
    d3.selectAll(".node").each(function(d) {
      // Check if node data matches search term
      const node = d3.select(this);
      const data = d.data;
      
      const nameMatch = (data.name || "").toLowerCase().includes(searchTerm);
      const roleMatch = (data.role || "").toLowerCase().includes(searchTerm);
      const clientMatch = (data.client || "").toLowerCase().includes(searchTerm);
      
      const matches = nameMatch || roleMatch || clientMatch;
      
      // Highlight matching nodes
      node.style("opacity", matches ? 1 : 0.2);
      node.select("circle, rect")
        .style("stroke", matches ? "#ff6b6b" : "#fff")
        .style("stroke-width", matches ? 3 : 2);
    });
  },

  // Export org chart as SVG
  exportOrgChart() {
    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <h2 class="text-xl font-semibold mb-4">Export Organization Chart</h2>
        <div class="space-y-4">
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <button class="btn-secondary p-6 text-center flex flex-col items-center justify-center" id="exportSvgBtn">
              <i class="fas fa-file-image text-3xl mb-2"></i>
              <span class="text-lg font-medium">SVG Format</span>
              <span class="text-sm text-gray-500">Vector graphic for high-quality prints</span>
            </button>
            <button class="btn-secondary p-6 text-center flex flex-col items-center justify-center" id="exportPngBtn">
              <i class="fas fa-image text-3xl mb-2"></i>
              <span class="text-lg font-medium">PNG Format</span>
              <span class="text-sm text-gray-500">Image for presentations and documents</span>
            </button>
          </div>
        </div>
        <div class="flex justify-end mt-4">
          <button class="btn-secondary" onclick="ui.hideModal()">Cancel</button>
        </div>
      </div>
    `;
    document.body.appendChild(modal);
    
    // Add export button handlers
    document.getElementById('exportSvgBtn').addEventListener('click', () => {
      this.exportOrgChartSvg();
      this.hideModal();
    });
    
    document.getElementById('exportPngBtn').addEventListener('click', () => {
      this.exportOrgChartPng();
      this.hideModal();
    });
  },
  
  // Export org chart as SVG
  exportOrgChartSvg() {
    const svg = document.querySelector("#orgChart svg");
    if (!svg) {
      this.showToast('Error: SVG element not found', 'error');
      return;
    }
    
    try {
      // Get client and stream filter values for filename
      const clientFilter = document.getElementById('clientFilter')?.value || 'all';
      const streamFilter = document.getElementById('streamFilter')?.value || 'all';
      
      // Clone the SVG to avoid modifying the original
      const svgClone = svg.cloneNode(true);
      
      // Add CSS styles to the SVG
      const style = document.createElement('style');
      style.textContent = `
        .node circle, .node rect {
          stroke: #fff;
          stroke-width: 2px;
        }
        .link {
          fill: none;
          stroke: #ccc;
          stroke-width: 1.5px;
        }
        text {
          font-family: Arial, sans-serif;
        }
      `;
      svgClone.appendChild(style);
      
      // Set explicit width and height
      svgClone.setAttribute('width', '1200');
      svgClone.setAttribute('height', '800');
      
      // Add title and metadata
      const title = document.createElement('title');
      title.textContent = 'Quality Organization Chart';
      svgClone.appendChild(title);
      
      const metadata = document.createElement('metadata');
      metadata.innerHTML = `<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
        <rdf:Description>
          <dc:title xmlns:dc="http://purl.org/dc/elements/1.1/">Quality Organization Chart</dc:title>
          <dc:date xmlns:dc="http://purl.org/dc/elements/1.1/">${new Date().toISOString()}</dc:date>
        </rdf:Description>
      </rdf:RDF>`;
      svgClone.appendChild(metadata);
      
      // Add footer text with generation info
      const footer = document.createElementNS("http://www.w3.org/2000/svg", "text");
      footer.setAttribute("x", "10");
      footer.setAttribute("y", "790");
      footer.setAttribute("font-size", "10");
      footer.setAttribute("fill", "#999");
      footer.textContent = `Generated: ${new Date().toLocaleString()}`;
      svgClone.appendChild(footer);
      
      // Add filter info if applicable
      if (clientFilter !== 'all' || streamFilter !== 'all') {
        const filterInfo = document.createElementNS("http://www.w3.org/2000/svg", "text");
        filterInfo.setAttribute("x", "10");
        filterInfo.setAttribute("y", "770");
        filterInfo.setAttribute("font-size", "10");
        filterInfo.setAttribute("fill", "#999");
        
        let filterText = 'Filtered by: ';
        if (streamFilter !== 'all') filterText += `Stream: ${streamFilter.toUpperCase()} `;
        if (clientFilter !== 'all') filterText += `Client: ${clientFilter}`;
        
        filterInfo.textContent = filterText;
        svgClone.appendChild(filterInfo);
      }
      
      // Convert to SVG string
      const serializer = new XMLSerializer();
      const source = serializer.serializeToString(svgClone);
      
      // Create and trigger download
      const blob = new Blob([source], { type: "image/svg+xml" });
      const url = URL.createObjectURL(blob);
      
      // Generate filename based on filters
      let filename = 'org-chart';
      if (streamFilter !== 'all') filename += `-${streamFilter}`;
      if (clientFilter !== 'all') filename += `-${clientFilter.replace(/\s+/g, '-')}`;
      
      const a = document.createElement("a");
      a.href = url;
      a.download = `${filename}.svg`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      
      this.showToast('SVG exported successfully', 'success');
    } catch (error) {
      console.error('Error exporting SVG:', error);
      this.showToast('Error exporting SVG: ' + error.message, 'error');
    }
  },
  
  // Export org chart as PNG
  exportOrgChartPng() {
    const svg = document.querySelector("#orgChart svg");
    if (!svg) {
      this.showToast('Error: SVG element not found', 'error');
      return;
    }
    
    try {
      // Check if html2canvas is loaded
      if (typeof html2canvas === 'undefined') {
        this.showToast('Error: html2canvas library not loaded', 'error');
        return;
      }
      
      // Get client and stream filter values for filename
      const clientFilter = document.getElementById('clientFilter')?.value || 'all';
      const streamFilter = document.getElementById('streamFilter')?.value || 'all';
      
      // Generate filename based on filters
      let filename = 'org-chart';
      if (streamFilter !== 'all') filename += `-${streamFilter}`;
      if (clientFilter !== 'all') filename += `-${clientFilter.replace(/\s+/g, '-')}`;
      
      // Use html2canvas to create PNG
      html2canvas(svg).then(canvas => {
        // Create and trigger download
        const link = document.createElement('a');
        link.download = `${filename}.png`;
        link.href = canvas.toDataURL('image/png');
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        
        this.showToast('PNG exported successfully', 'success');
      }).catch(error => {
        console.error('Error creating PNG:', error);
        this.showToast('Error creating PNG: ' + error.message, 'error');
      });
    } catch (error) {
      console.error('Error exporting PNG:', error);
      this.showToast('Error exporting PNG: ' + error.message, 'error');
    }
  },
  
  // Show node details
  showNodeDetails(nodeData) {
    if (!nodeData) return;
    
    const detailsDiv = document.getElementById('nodeDetails');
    const titleDiv = document.getElementById('detailsTitle');
    const contentDiv = document.getElementById('detailsContent');
    
    if (!detailsDiv || !titleDiv || !contentDiv) return;
    
    // Set title based on node type
    titleDiv.textContent = nodeData.type === 'team' ? 'Team Details' : 'Personnel Details';
    
    // Create content based on node type
    let content = '';
    
    if (nodeData.type === 'team') {
      content = `
        <div class="space-y-4">
          <div>
            <h4 class="font-semibold">Name</h4>
            <p>${this.sanitizeHtml(nodeData.name)}</p>
          </div>
          <div>
            <h4 class="font-semibold">Stream</h4>
            <p class="capitalize">${this.sanitizeHtml(nodeData.stream)}</p>
          </div>
          ${nodeData.description ? `
            <div>
              <h4 class="font-semibold">Description</h4>
              <p>${this.sanitizeHtml(nodeData.description)}</p>
            </div>
          ` : ''}
          ${nodeData.responsibilities ? `
            <div>
              <h4 class="font-semibold">Responsibilities</h4>
              <p>${this.sanitizeHtml(nodeData.responsibilities)}</p>
            </div>
          ` : ''}
          ${nodeData.performance !== undefined ? `
            <div>
              <h4 class="font-semibold">Performance</h4>
              <div class="w-full bg-gray-200 rounded-full h-2 mb-1">
                <div class="bg-${nodeData.stream}-600 h-2 rounded-full" style="width: ${nodeData.performance}%"></div>
              </div>
              <p class="text-right text-sm text-gray-600">${nodeData.performance}%</p>
            </div>
          ` : ''}
          <div class="flex justify-end">
            <button class="btn-primary" onclick="ui.viewTeamDetails(${nodeData.id})">View Full Details</button>
          </div>
        </div>
      `;
    } else {
      content = `
        <div class="space-y-4">
          <div>
            <h4 class="font-semibold">Name</h4>
            <p>${this.sanitizeHtml(nodeData.name)}</p>
          </div>
          ${nodeData.role ? `
            <div>
              <h4 class="font-semibold">Role</h4>
              <p>${this.sanitizeHtml(nodeData.role)}</p>
            </div>
          ` : ''}
          ${nodeData.client ? `
            <div>
              <h4 class="font-semibold">Client</h4>
              <p>${this.sanitizeHtml(nodeData.client)}</p>
            </div>
          ` : ''}
          ${nodeData.skills && Object.keys(nodeData.skills).length > 0 ? `
            <div>
              <h4 class="font-semibold">Skills</h4>
              <div class="flex flex-wrap gap-1 mt-2">
                ${Object.entries(nodeData.skills).map(([skill, level]) => `
                  <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-${nodeData.stream}-100 text-${nodeData.stream}-800">
                    ${this.sanitizeHtml(skill)}: ${level}
                  </span>
                `).join('')}
              </div>
            </div>
          ` : ''}
        </div>
      `;
    }
    
    contentDiv.innerHTML = content;
    detailsDiv.classList.remove('hidden');
  },
  
  // View team details from org chart node
  viewTeamDetails(teamId) {
    // Hide the node details panel
    document.getElementById('nodeDetails')?.classList.add('hidden');
    
    // Show the team details
    this.showTeamDetails(teamId);
  },

  loadDocumentation() {
    const tabContent = document.getElementById('tabContent');
    if (!tabContent) return;
    
    // Check if already loading
    if (tabContent.dataset.loading === 'true') {
      console.log('Documentation already loading, skipping duplicate load');
      return;
    }

    // Set loading state
    tabContent.dataset.loading = 'true';
    
    tabContent.innerHTML = `
      <div class="space-y-6">
        <div class="flex justify-between items-center">
          <h2 class="text-2xl font-semibold">Documentation</h2>
          <button class="btn-primary" onclick="ui.showAddDocumentModal()">
            <i class="fas fa-plus mr-2"></i> Add Document
          </button>
        </div>

        <!-- Document Filters -->
        <div class="flex space-x-4 mb-4">
          <select id="docTypeFilter" class="form-select" onchange="ui.filterDocuments()">
            <option value="">All Types</option>
            <option value="manual">Quality Manual</option>
            <option value="procedure">Procedure</option>
            <option value="form">Form</option>
            <option value="report">Report</option>
          </select>
          <select id="docStatusFilter" class="form-select" onchange="ui.filterDocuments()">
            <option value="">All Statuses</option>
            <option value="draft">Draft</option>
            <option value="review">In Review</option>
            <option value="approved">Approved</option>
            <option value="archived">Archived</option>
          </select>
          <input type="text" id="docSearch" class="form-input flex-1" 
                 placeholder="Search documents..." oninput="ui.filterDocuments()">
        </div>

        <!-- Documents Grid -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6" id="documentsGrid">
          ${this.renderDocumentationCards()}
        </div>
      </div>
    `;
    
    // Reset loading state
    tabContent.dataset.loading = 'false';
  },

  renderDocumentationCards() {
    if (!window.appData || !window.appData.documents || !Array.isArray(window.appData.documents) || window.appData.documents.length === 0) {
      return '<p class="text-gray-500 text-center py-8">No documents found. Use the "Add Document" button to create your first document.</p>';
    }
    
    return window.appData.documents.map(doc => `
      <div class="card document-card" data-type="${doc.type}" data-status="${doc.status}">
        <div class="flex justify-between items-start mb-4">
          <div>
            <h3 class="text-xl font-semibold">${doc.title}</h3>
            <p class="text-sm text-gray-600">${doc.type.charAt(0).toUpperCase() + doc.type.slice(1)}</p>
          </div>
          <div class="flex space-x-2">
            <button class="btn-icon" onclick="ui.editDocument(${doc.id})">
              <i class="fas fa-edit"></i>
            </button>
            <button class="btn-icon" onclick="ui.deleteDocument(${doc.id})">
              <i class="fas fa-trash"></i>
            </button>
          </div>
        </div>

        <div class="space-y-4">
          <div>
            <p class="text-gray-600">${doc.description}</p>
          </div>

          <div class="flex items-center justify-between">
            <div class="flex items-center space-x-2">
              <span class="px-2 py-1 text-xs rounded-full ${
                doc.status === 'approved' ? 'bg-green-100 text-green-800' :
                doc.status === 'review' ? 'bg-yellow-100 text-yellow-800' :
                doc.status === 'draft' ? 'bg-gray-100 text-gray-800' :
                'bg-red-100 text-red-800'
              }">
                ${doc.status.charAt(0).toUpperCase() + doc.status.slice(1)}
              </span>
              <span class="text-sm text-gray-500">v${doc.version}</span>
            </div>
            <span class="text-sm text-gray-500">Last updated: ${doc.lastUpdated}</span>
          </div>

          <div class="flex items-center justify-between">
            <div class="flex items-center space-x-2">
              <button class="btn-secondary btn-sm" onclick="ui.viewDocument(${doc.id})">
                <i class="fas fa-eye mr-2"></i> View
              </button>
              <button class="btn-secondary btn-sm" onclick="ui.downloadDocument(${doc.id})">
                <i class="fas fa-download mr-2"></i> Download
              </button>
            </div>
            <button class="btn-secondary btn-sm" onclick="ui.showVersionHistory(${doc.id})">
              <i class="fas fa-history mr-2"></i> History
            </button>
          </div>
        </div>
      </div>
    `).join('');
  },

  filterDocuments() {
    const typeFilter = document.getElementById("docTypeFilter").value;
    const statusFilter = document.getElementById("docStatusFilter").value;
    const searchTerm = document.getElementById("docSearch").value.toLowerCase();
    const cards = document.querySelectorAll(".document-card");

    cards.forEach(card => {
      const type = card.getAttribute("data-type");
      const status = card.getAttribute("data-status");
      const title = card.querySelector("h3").textContent.toLowerCase();
      const description = card.querySelector(".text-gray-600").textContent.toLowerCase();
      
      const matchesType = !typeFilter || type === typeFilter;
      const matchesStatus = !statusFilter || status === statusFilter;
      const matchesSearch = !searchTerm || 
        title.includes(searchTerm) || 
        description.includes(searchTerm);
      
      card.style.display = matchesType && matchesStatus && matchesSearch ? "" : "none";
    });
  },

  showAddDocumentModal() {
    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <h2 class="text-xl font-semibold mb-4">Add New Document</h2>
        <form id="addDocumentForm">
          <div class="form-group">
            <label for="docTitle">Title</label>
            <input type="text" id="docTitle" required>
          </div>
          <div class="form-group">
            <label for="docType">Type</label>
            <select id="docType" required>
              <option value="manual">Quality Manual</option>
              <option value="procedure">Procedure</option>
              <option value="form">Form</option>
              <option value="report">Report</option>
            </select>
          </div>
          <div class="form-group">
            <label for="docDescription">Description</label>
            <textarea id="docDescription" rows="3" required></textarea>
          </div>
          <div class="form-group">
            <label for="docFile">Document File</label>
            <input type="file" id="docFile" required>
          </div>
          <div class="flex justify-end space-x-2 mt-4">
            <button type="button" class="btn-secondary" onclick="ui.hideModal()">Cancel</button>
            <button type="submit" class="btn-primary">Add Document</button>
          </div>
        </form>
      </div>
    `;
    document.body.appendChild(modal);

    const form = modal.querySelector('#addDocumentForm');
    form.addEventListener('submit', (e) => {
      e.preventDefault();
      const file = form.querySelector('#docFile').files[0];
      const reader = new FileReader();

      reader.onload = (event) => {
        const doc = {
          id: Date.now(),
          title: form.querySelector('#docTitle').value,
          type: form.querySelector('#docType').value,
          description: form.querySelector('#docDescription').value,
          content: event.target.result,
          version: 1,
          status: 'draft',
          lastUpdated: new Date().toISOString().split('T')[0],
          history: [{
            version: 1,
            date: new Date().toISOString().split('T')[0],
            changes: 'Initial version',
            author: window.appData.state.userName
          }]
        };
        
        if (!window.appData.documents) window.appData.documents = [];
        window.appData.documents.push(doc);
        
        this.saveChanges();
        this.hideModal();
        this.showToast('Document added successfully', 'success');
        this.loadDocumentation();
      };

      reader.readAsText(file);
    });
  },

  editDocument(docId) {
    const doc = window.appData.documents.find(d => d.id === docId);
    if (!doc) return;

    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <h2 class="text-xl font-semibold mb-4">Edit Document</h2>
        <form id="editDocumentForm">
          <div class="form-group">
            <label for="docTitle">Title</label>
            <input type="text" id="docTitle" value="${doc.title}" required>
          </div>
          <div class="form-group">
            <label for="docType">Type</label>
            <select id="docType" required>
              <option value="manual" ${doc.type === 'manual' ? 'selected' : ''}>Quality Manual</option>
              <option value="procedure" ${doc.type === 'procedure' ? 'selected' : ''}>Procedure</option>
              <option value="form" ${doc.type === 'form' ? 'selected' : ''}>Form</option>
              <option value="report" ${doc.type === 'report' ? 'selected' : ''}>Report</option>
            </select>
          </div>
          <div class="form-group">
            <label for="docDescription">Description</label>
            <textarea id="docDescription" rows="3" required>${doc.description}</textarea>
          </div>
          <div class="form-group">
            <label for="docStatus">Status</label>
            <select id="docStatus" required>
              <option value="draft" ${doc.status === 'draft' ? 'selected' : ''}>Draft</option>
              <option value="review" ${doc.status === 'review' ? 'selected' : ''}>In Review</option>
              <option value="approved" ${doc.status === 'approved' ? 'selected' : ''}>Approved</option>
              <option value="archived" ${doc.status === 'archived' ? 'selected' : ''}>Archived</option>
            </select>
          </div>
          <div class="flex justify-end space-x-2 mt-4">
            <button type="button" class="btn-secondary" onclick="ui.hideModal()">Cancel</button>
            <button type="submit" class="btn-primary">Save Changes</button>
          </div>
        </form>
      </div>
    `;
    document.body.appendChild(modal);

    const form = modal.querySelector('#editDocumentForm');
    form.addEventListener('submit', (e) => {
      e.preventDefault();
      doc.title = form.querySelector('#docTitle').value;
      doc.type = form.querySelector('#docType').value;
      doc.description = form.querySelector('#docDescription').value;
      doc.status = form.querySelector('#docStatus').value;
      doc.lastUpdated = new Date().toISOString().split('T')[0];
      
      this.saveChanges();
      this.hideModal();
      this.showToast('Document updated successfully', 'success');
      this.loadDocumentation();
    });
  },

  deleteDocument(docId) {
    if (confirm('Are you sure you want to delete this document? This action cannot be undone.')) {
      window.appData.documents = window.appData.documents.filter(d => d.id !== docId);
      this.saveChanges();
      this.showToast('Document deleted successfully', 'success');
      this.loadDocumentation();
    }
  },

  viewDocument(docId) {
    const doc = window.appData.documents.find(d => d.id === docId);
    if (!doc) return;

    const modal = document.createElement('div');
    modal.className = 'modal modal-lg';
    modal.innerHTML = `
      <div class="modal-content">
        <div class="flex justify-between items-center mb-4">
          <h2 class="text-xl font-semibold">${doc.title}</h2>
          <button class="btn-icon" onclick="ui.hideModal()">
            <i class="fas fa-times"></i>
          </button>
        </div>
        <div class="prose max-w-none">
          <pre class="whitespace-pre-wrap">${doc.content}</pre>
        </div>
      </div>
    `;
    document.body.appendChild(modal);
  },

  downloadDocument(docId) {
    const doc = window.appData.documents.find(d => d.id === docId);
    if (!doc) return;

    const blob = new Blob([doc.content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${doc.title.toLowerCase().replace(/\s+/g, '-')}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  },

  showVersionHistory(docId) {
    const doc = window.appData.documents.find(d => d.id === docId);
    if (!doc) return;

    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <h2 class="text-xl font-semibold mb-4">Version History - ${doc.title}</h2>
        <div class="space-y-4">
          ${doc.history.map(version => `
            <div class="border-b pb-4">
              <div class="flex justify-between items-start">
                <div>
                  <p class="font-medium">Version ${version.version}</p>
                  <p class="text-sm text-gray-600">${version.changes}</p>
                </div>
                <div class="text-right">
                  <p class="text-sm text-gray-500">${version.date}</p>
                  <p class="text-sm text-gray-500">by ${version.author}</p>
                </div>
              </div>
            </div>
          `).join('')}
        </div>
        <div class="flex justify-end mt-4">
          <button class="btn-secondary" onclick="ui.hideModal()">Close</button>
        </div>
      </div>
    `;
    document.body.appendChild(modal);
  },

  loadPlanning() {
    const tabContent = document.getElementById('tabContent');
    if (!tabContent) return;

    // Check if already loading
    if (tabContent.dataset.loading === 'true') {
      console.log('Planning already loading, skipping duplicate load');
      return;
    }

    // Set loading state
    tabContent.dataset.loading = 'true';

    tabContent.innerHTML = `
      <div class="space-y-6">
        <!-- Org Roll-out Header -->
        <div class="flex justify-between items-center">
          <div>
            <h2 class="text-2xl font-semibold">Organization Roll-out Plan</h2>
            <p class="text-gray-600 mt-1">Track the implementation of the new organizational structure</p>
          </div>
          <div class="flex space-x-4">
            <button class="btn-outline" onclick="ui.exportRolloutPlan()">
              <i class="fas fa-download mr-2"></i> Export
            </button>
            <button class="btn-primary" onclick="ui.showAddPhaseModal()">
              <i class="fas fa-plus mr-2"></i> Add Phase
            </button>
          </div>
        </div>

        <!-- Progress Overview -->
        <div class="bg-white p-6 rounded-lg shadow-sm border border-gray-200">
          <div class="flex justify-between items-center mb-4">
            <h3 class="text-lg font-semibold">Overall Progress</h3>
            <span class="text-lg font-bold">${this.calculateOverallProgress()}%</span>
          </div>
          <div class="w-full bg-gray-200 rounded-full h-2.5 mb-6">
            <div class="bg-blue-600 h-2.5 rounded-full" style="width: ${this.calculateOverallProgress()}%"></div>
          </div>
          
          <div class="grid grid-cols-1 md:grid-cols-4 gap-4 text-center">
            <div class="bg-blue-50 p-4 rounded-lg">
              <h4 class="text-sm font-medium text-blue-700 mb-2">Planning</h4>
              <p class="text-2xl font-bold text-blue-700">${this.calculatePhaseProgress('planning')}%</p>
            </div>
            <div class="bg-yellow-50 p-4 rounded-lg">
              <h4 class="text-sm font-medium text-yellow-700 mb-2">Transition</h4>
              <p class="text-2xl font-bold text-yellow-700">${this.calculatePhaseProgress('transition')}%</p>
            </div>
            <div class="bg-green-50 p-4 rounded-lg">
              <h4 class="text-sm font-medium text-green-700 mb-2">Implementation</h4>
              <p class="text-2xl font-bold text-green-700">${this.calculatePhaseProgress('implementation')}%</p>
            </div>
            <div class="bg-purple-50 p-4 rounded-lg">
              <h4 class="text-sm font-medium text-purple-700 mb-2">Review</h4>
              <p class="text-2xl font-bold text-purple-700">${this.calculatePhaseProgress('review')}%</p>
            </div>
          </div>
        </div>

        <!-- Timeline View -->
        <div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
          <div class="p-4 border-b border-gray-200">
            <h3 class="text-lg font-semibold">Implementation Timeline</h3>
          </div>
          <div class="p-4 overflow-x-auto">
            <div id="rolloutTimeline" class="w-full" style="min-width: 800px; height: 400px;">
              <!-- Timeline will be rendered here -->
            </div>
          </div>
        </div>

        <!-- Key Milestones -->
        <div class="bg-white rounded-lg shadow-sm border border-gray-200">
          <div class="p-4 border-b border-gray-200 flex justify-between items-center">
            <h3 class="text-lg font-semibold">Key Milestones</h3>
            <button class="btn-sm btn-secondary" onclick="ui.showAddMilestoneModal()">
              <i class="fas fa-plus mr-1"></i> Add Milestone
            </button>
          </div>
          <div class="p-0">
            <table class="w-full">
              <thead class="bg-gray-50">
                <tr>
                  <th class="px-4 py-2 text-left">Milestone</th>
                  <th class="px-4 py-2 text-left">Phase</th>
                  <th class="px-4 py-2 text-left">Due Date</th>
                  <th class="px-4 py-2 text-left">Status</th>
                  <th class="px-4 py-2 text-left">Owner</th>
                  <th class="px-4 py-2 text-right">Actions</th>
                </tr>
              </thead>
              <tbody>
                ${this.renderMilestones()}
              </tbody>
            </table>
          </div>
        </div>

        <!-- Detailed Tasks by Phase -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <!-- Planning Phase -->
          <div class="bg-white rounded-lg shadow-sm border border-gray-200">
            <div class="p-4 border-b border-gray-200 bg-blue-50">
              <h3 class="font-semibold">Planning Phase</h3>
            </div>
            <div class="p-4">
              <ul class="space-y-2">
                ${this.renderPhaseTasks('planning')}
              </ul>
            </div>
          </div>

          <!-- Transition Phase -->
          <div class="bg-white rounded-lg shadow-sm border border-gray-200">
            <div class="p-4 border-b border-gray-200 bg-yellow-50">
              <h3 class="font-semibold">Transition Phase</h3>
            </div>
            <div class="p-4">
              <ul class="space-y-2">
                ${this.renderPhaseTasks('transition')}
              </ul>
            </div>
          </div>

          <!-- Implementation Phase -->
          <div class="bg-white rounded-lg shadow-sm border border-gray-200">
            <div class="p-4 border-b border-gray-200 bg-green-50">
              <h3 class="font-semibold">Implementation Phase</h3>
            </div>
            <div class="p-4">
              <ul class="space-y-2">
                ${this.renderPhaseTasks('implementation')}
              </ul>
            </div>
          </div>

          <!-- Review Phase -->
          <div class="bg-white rounded-lg shadow-sm border border-gray-200">
            <div class="p-4 border-b border-gray-200 bg-purple-50">
              <h3 class="font-semibold">Review Phase</h3>
            </div>
            <div class="p-4">
              <ul class="space-y-2">
                ${this.renderPhaseTasks('review')}
              </ul>
            </div>
          </div>
        </div>
      </div>
    `;

    // Initialize the rollout data if it doesn't exist
    if (!window.appData.rollout) {
      this.initializeRolloutData();
    }

    // Render the timeline
    this.renderRolloutTimeline();
    
    // Reset loading state
    tabContent.dataset.loading = 'false';
  },

  initializeRolloutData() {
    // Create initial structure for rollout data if not exists
    if (!window.appData.rollout) {
      window.appData.rollout = {
        phases: {
          planning: {
            name: "Planning",
            progress: 75,
            tasks: [
              { id: 1, name: "Assessment of current structure", status: "complete", owner: "John Smith" },
              { id: 2, name: "Define new organizational structure", status: "complete", owner: "Sarah Johnson" },
              { id: 3, name: "Stakeholder alignment", status: "in_progress", owner: "John Smith" },
              { id: 4, name: "Documentation of roles & responsibilities", status: "in_progress", owner: "Michael Brown" }
            ]
          },
          transition: {
            name: "Transition",
            progress: 40,
            tasks: [
              { id: 5, name: "Communication plan", status: "complete", owner: "Sarah Johnson" },
              { id: 6, name: "Change management strategy", status: "in_progress", owner: "Jane Doe" },
              { id: 7, name: "Training plan development", status: "not_started", owner: "Michael Brown" }
            ]
          },
          implementation: {
            name: "Implementation",
            progress: 15,
            tasks: [
              { id: 8, name: "Team restructuring", status: "in_progress", owner: "John Smith" },
              { id: 9, name: "Role assignments", status: "not_started", owner: "Sarah Johnson" },
              { id: 10, name: "System access updates", status: "not_started", owner: "Robert Williams" }
            ]
          },
          review: {
            name: "Review",
            progress: 0,
            tasks: [
              { id: 11, name: "Effectiveness assessment", status: "not_started", owner: "John Smith" },
              { id: 12, name: "Gap analysis", status: "not_started", owner: "Jane Doe" },
              { id: 13, name: "Adjustment plan", status: "not_started", owner: "Sarah Johnson" }
            ]
          }
        },
        milestones: [
          { 
            id: 1, 
            name: "Organization structure approved", 
            phase: "planning", 
            dueDate: "2025-04-15", 
            status: "complete", 
            owner: "John Smith" 
          },
          { 
            id: 2, 
            name: "Communication rolled out", 
            phase: "transition", 
            dueDate: "2025-05-01", 
            status: "in_progress", 
            owner: "Sarah Johnson" 
          },
          { 
            id: 3, 
            name: "Team restructuring complete", 
            phase: "implementation", 
            dueDate: "2025-06-15", 
            status: "not_started", 
            owner: "John Smith" 
          },
          { 
            id: 4, 
            name: "Post-implementation review", 
            phase: "review", 
            dueDate: "2025-07-01", 
            status: "not_started", 
            owner: "Jane Doe" 
          }
        ]
      };
      this.saveChanges();
    }
  },

  calculateOverallProgress() {
    if (!window.appData || !window.appData.rollout || !window.appData.rollout.phases) return 0;
    
    const phases = window.appData.rollout.phases;
    if (Object.keys(phases).length === 0) return 0;
    
    const totalProgress = Object.values(phases).reduce((sum, phase) => sum + (phase.progress || 0), 0);
    return Math.round(totalProgress / Object.keys(phases).length);
  },

  calculatePhaseProgress(phaseId) {
    if (!window.appData || !window.appData.rollout || !window.appData.rollout.phases || !window.appData.rollout.phases[phaseId]) return 0;
    return window.appData.rollout.phases[phaseId].progress || 0;
  },

  renderMilestones() {
    if (!window.appData || !window.appData.rollout || !window.appData.rollout.milestones || window.appData.rollout.milestones.length === 0) {
      return '<tr><td colspan="6" class="px-4 py-4 text-center text-gray-500">No milestones defined yet</td></tr>';
    }
    
    return window.appData.rollout.milestones.map(milestone => {
      const statusClass = 
        milestone.status === 'complete' ? 'bg-green-100 text-green-800' :
        milestone.status === 'in_progress' ? 'bg-yellow-100 text-yellow-800' :
        'bg-gray-100 text-gray-800';
      
      return `
        <tr class="border-b">
          <td class="px-4 py-3">${milestone.name}</td>
          <td class="px-4 py-3 capitalize">${milestone.phase}</td>
          <td class="px-4 py-3">${milestone.dueDate}</td>
          <td class="px-4 py-3">
            <span class="px-2 py-1 rounded-full text-xs ${statusClass}">
              ${milestone.status.replace('_', ' ').replace(/\b\w/g, l => l.toUpperCase())}
            </span>
          </td>
          <td class="px-4 py-3">${milestone.owner}</td>
          <td class="px-4 py-3 text-right">
            <button class="btn-icon btn-sm" onclick="ui.editMilestone(${milestone.id})">
              <i class="fas fa-edit"></i>
            </button>
            <button class="btn-icon btn-sm" onclick="ui.deleteMilestone(${milestone.id})">
              <i class="fas fa-trash"></i>
            </button>
          </td>
        </tr>
      `;
    }).join('');
  },

  renderPhaseTasks(phaseId) {
    if (!window.appData || !window.appData.rollout || !window.appData.rollout.phases || !window.appData.rollout.phases[phaseId]) {
      return '<li class="text-gray-500 text-center">No tasks defined for this phase</li>';
    }
    
    const phase = window.appData.rollout.phases[phaseId];
    
    if (!phase.tasks || phase.tasks.length === 0) {
      return '<li class="text-gray-500 text-center">No tasks defined for this phase</li>';
    }
    
    return phase.tasks.map(task => {
      const statusIcon = 
        task.status === 'complete' ? '<i class="fas fa-check-circle text-green-500 mr-2"></i>' :
        task.status === 'in_progress' ? '<i class="fas fa-clock text-yellow-500 mr-2"></i>' :
        '<i class="far fa-circle text-gray-400 mr-2"></i>';
      
      return `
        <li class="flex items-center justify-between">
          <div class="flex items-center">
            ${statusIcon}
            <span class="${task.status === 'complete' ? 'line-through text-gray-500' : ''}">${task.name}</span>
          </div>
          <div class="text-sm text-gray-500">
            ${task.owner}
          </div>
        </li>
      `;
    }).join('');
  },

  renderRolloutTimeline() {
    const timelineEl = document.getElementById('rolloutTimeline');
    if (!timelineEl) return;
    
    // Create a simple timeline visualization
    let html = `<div class="relative">`;
    
    // Draw the timeline base line
    html += `<div class="absolute top-9 left-0 w-full h-1 bg-gray-200"></div>`;
    
    // Add milestones to the timeline
    if (window.appData && window.appData.rollout && window.appData.rollout.milestones && window.appData.rollout.milestones.length > 0) {
      const milestones = window.appData.rollout.milestones;
      const totalWidth = timelineEl.clientWidth - 40;
      
      // Sort milestones by due date
      const sortedMilestones = [...milestones].sort((a, b) => 
        new Date(a.dueDate) - new Date(b.dueDate)
      );
      
      // Find the earliest and latest dates
      const startDate = new Date(sortedMilestones[0].dueDate);
      const endDate = new Date(sortedMilestones[sortedMilestones.length - 1].dueDate);
      const totalDays = (endDate - startDate) / (1000 * 60 * 60 * 24);
      
      sortedMilestones.forEach((milestone, index) => {
        const date = new Date(milestone.dueDate);
        const daysDiff = (date - startDate) / (1000 * 60 * 60 * 24);
        const position = Math.floor((daysDiff / totalDays) * totalWidth);
        
        const statusColor = 
          milestone.status === 'complete' ? 'bg-green-500' :
          milestone.status === 'in_progress' ? 'bg-yellow-500' :
          'bg-gray-500';
        
        html += `
          <div class="absolute" style="left: ${position}px; top: 0;">
            <div class="${statusColor} w-5 h-5 rounded-full border-4 border-white shadow-sm"></div>
            <div class="mt-4 -ml-10 w-20 text-center">
              <div class="text-xs font-bold">${milestone.dueDate}</div>
              <div class="text-xs whitespace-normal" style="word-break: break-word;">${milestone.name}</div>
            </div>
          </div>
        `;
      });
    } else {
      // No milestones - show empty timeline with a message
      html += `
        <div class="absolute left-1/2 transform -translate-x-1/2 text-center" style="top: 20px;">
          <p class="text-gray-500">No milestones defined yet</p>
        </div>
      `;
    }
    
    html += `</div>`;
    timelineEl.innerHTML = html;
  },

  showAddPhaseModal() {
    // Implementation for adding a new phase
    this.showToast('Add Phase functionality will be implemented', 'info');
  },

  showAddMilestoneModal() {
    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <h2 class="text-xl font-semibold mb-4">Add New Milestone</h2>
        <form id="addMilestoneForm">
          <div class="form-group">
            <label for="milestoneName">Milestone Name</label>
            <input type="text" id="milestoneName" required>
          </div>
          <div class="form-group">
            <label for="milestonePhase">Phase</label>
            <select id="milestonePhase" required>
              <option value="planning">Planning</option>
              <option value="transition">Transition</option>
              <option value="implementation">Implementation</option>
              <option value="review">Review</option>
            </select>
          </div>
          <div class="form-group">
            <label for="milestoneDueDate">Due Date</label>
            <input type="date" id="milestoneDueDate" required>
          </div>
          <div class="form-group">
            <label for="milestoneStatus">Status</label>
            <select id="milestoneStatus" required>
              <option value="not_started">Not Started</option>
              <option value="in_progress">In Progress</option>
              <option value="complete">Complete</option>
            </select>
          </div>
          <div class="form-group">
            <label for="milestoneOwner">Owner</label>
            <input type="text" id="milestoneOwner" required>
          </div>
          <div class="flex justify-end space-x-2 mt-4">
            <button type="button" class="btn-secondary" onclick="ui.hideModal()">Cancel</button>
            <button type="submit" class="btn-primary">Add Milestone</button>
          </div>
        </form>
      </div>
    `;
    document.body.appendChild(modal);

    const form = modal.querySelector('#addMilestoneForm');
    form.addEventListener('submit', (e) => {
      e.preventDefault();
      
      // Initialize rollout data if needed
      if (!window.appData.rollout) {
        this.initializeRolloutData();
      }
      
      // Get the highest existing milestone ID
      const maxId = Math.max(...window.appData.rollout.milestones.map(m => m.id), 0);
      
      const milestone = {
        id: maxId + 1,
        name: form.querySelector('#milestoneName').value,
        phase: form.querySelector('#milestonePhase').value,
        dueDate: form.querySelector('#milestoneDueDate').value,
        status: form.querySelector('#milestoneStatus').value,
        owner: form.querySelector('#milestoneOwner').value
      };
      
      window.appData.rollout.milestones.push(milestone);
      
      this.saveChanges();
      this.hideModal();
      this.showToast('Milestone added successfully', 'success');
      this.loadPlanning();
    });
  },

  editMilestone(milestoneId) {
    if (!window.appData.rollout) return;
    
    const milestone = window.appData.rollout.milestones.find(m => m.id === milestoneId);
    if (!milestone) return;
    
    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <h2 class="text-xl font-semibold mb-4">Edit Milestone</h2>
        <form id="editMilestoneForm">
          <div class="form-group">
            <label for="milestoneName">Milestone Name</label>
            <input type="text" id="milestoneName" value="${milestone.name}" required>
          </div>
          <div class="form-group">
            <label for="milestonePhase">Phase</label>
            <select id="milestonePhase" required>
              <option value="planning" ${milestone.phase === 'planning' ? 'selected' : ''}>Planning</option>
              <option value="transition" ${milestone.phase === 'transition' ? 'selected' : ''}>Transition</option>
              <option value="implementation" ${milestone.phase === 'implementation' ? 'selected' : ''}>Implementation</option>
              <option value="review" ${milestone.phase === 'review' ? 'selected' : ''}>Review</option>
            </select>
          </div>
          <div class="form-group">
            <label for="milestoneDueDate">Due Date</label>
            <input type="date" id="milestoneDueDate" value="${milestone.dueDate}" required>
          </div>
          <div class="form-group">
            <label for="milestoneStatus">Status</label>
            <select id="milestoneStatus" required>
              <option value="not_started" ${milestone.status === 'not_started' ? 'selected' : ''}>Not Started</option>
              <option value="in_progress" ${milestone.status === 'in_progress' ? 'selected' : ''}>In Progress</option>
              <option value="complete" ${milestone.status === 'complete' ? 'selected' : ''}>Complete</option>
            </select>
          </div>
          <div class="form-group">
            <label for="milestoneOwner">Owner</label>
            <input type="text" id="milestoneOwner" value="${milestone.owner}" required>
          </div>
          <div class="flex justify-end space-x-2 mt-4">
            <button type="button" class="btn-secondary" onclick="ui.hideModal()">Cancel</button>
            <button type="submit" class="btn-primary">Save Changes</button>
          </div>
        </form>
      </div>
    `;
    document.body.appendChild(modal);

    const form = modal.querySelector('#editMilestoneForm');
    form.addEventListener('submit', (e) => {
      e.preventDefault();
      
      milestone.name = form.querySelector('#milestoneName').value;
      milestone.phase = form.querySelector('#milestonePhase').value;
      milestone.dueDate = form.querySelector('#milestoneDueDate').value;
      milestone.status = form.querySelector('#milestoneStatus').value;
      milestone.owner = form.querySelector('#milestoneOwner').value;
      
      this.saveChanges();
      this.hideModal();
      this.showToast('Milestone updated successfully', 'success');
      this.loadPlanning();
    });
  },

  deleteMilestone(milestoneId) {
    if (!window.appData.rollout) return;
    
    if (confirm('Are you sure you want to delete this milestone? This action cannot be undone.')) {
      window.appData.rollout.milestones = window.appData.rollout.milestones.filter(m => m.id !== milestoneId);
      
      this.saveChanges();
      this.showToast('Milestone deleted successfully', 'success');
      this.loadPlanning();
    }
  },

  exportRolloutPlan() {
    if (!window.appData.rollout) {
      this.showToast('No rollout data to export', 'error');
      return;
    }
    
    const data = JSON.stringify(window.appData.rollout, null, 2);
    const blob = new Blob([data], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    
    const link = document.createElement('a');
    link.setAttribute('href', url);
    link.setAttribute('download', 'organization_rollout_plan.json');
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
    
    this.showToast('Rollout plan exported successfully', 'success');
  },

  loadPersonnel() {
    try {
      console.log('Loading personnel content...');
      
      const tabContent = document.getElementById('tabContent');
      if (!tabContent) {
        console.error('Tab content element not found');
        return;
      }
      
      // Check if already loading
      if (tabContent.dataset.loading === 'true' && tabContent.dataset.currentTab === 'personnel') {
        console.log('Personnel already loading, skipping duplicate load request');
        return;
      }

      // Set loading state
      tabContent.dataset.loading = 'true';
      tabContent.dataset.currentTab = 'personnel';
      
      // Clear any existing content
      tabContent.innerHTML = `
        <div class="flex justify-center items-center p-12">
          <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
          <p class="ml-4 text-gray-500">Loading personnel content...</p>
        </div>
      `;
      
      // Use a timeout to ensure loading indicator is shown
      setTimeout(() => {
        try {
          // Ensure appData exists
          if (!window.appData) window.appData = {};
          if (!window.appData.teams) window.appData.teams = [];
          const teams = window.appData.teams;
          
          // Extract all personnel from teams
          const allPersonnel = [];
          teams.forEach(team => {
            if (team && team.personnel) {
              team.personnel.forEach(person => {
                if (person) {
                  allPersonnel.push({
                    ...person,
                    team: team.name || 'Unknown Team',
                    stream: team.stream || 'unknown'
                  });
                }
              });
            }
          });
          
          tabContent.innerHTML = `
            <div class="p-4">
              <div class="flex justify-between items-center mb-6">
                <h2 class="text-2xl font-bold">Personnel</h2>
                <div class="flex items-center gap-4">
                  <div class="relative">
                    <input type="text" id="personnelSearch" placeholder="Search personnel..." 
                      class="border rounded-lg pl-10 pr-4 py-2 w-64 focus:outline-none focus:ring-2 focus:ring-blue-400">
                    <i class="fas fa-search absolute left-3 top-3 text-gray-400"></i>
                  </div>
                  <button class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition flex items-center" id="addPersonBtn">
                    <i class="fas fa-plus mr-2"></i> Add Person
                  </button>
                </div>
              </div>
              
              <!-- Personnel Table -->
              <div class="bg-white rounded-lg shadow overflow-hidden">
                <table class="min-w-full divide-y divide-gray-200">
                  <thead class="bg-gray-50">
                    <tr>
                      <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                      <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Role</th>
                      <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Team</th>
                      <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Client</th>
                      <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                    </tr>
                  </thead>
                  <tbody class="bg-white divide-y divide-gray-200">
                    ${allPersonnel.length > 0 ? allPersonnel.map(person => `
                      <tr>
                        <td class="px-6 py-4 whitespace-nowrap">${person.name || 'Unknown'}</td>
                        <td class="px-6 py-4 whitespace-nowrap">${person.role || 'Unspecified'}</td>
                        <td class="px-6 py-4 whitespace-nowrap">
                          <span class="px-2 py-1 text-xs rounded-full text-white bg-gray-600">${person.team}</span>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">${person.client || 'None'}</td>
                        <td class="px-6 py-4 whitespace-nowrap">
                          <button class="text-blue-600 hover:text-blue-800 mr-2 edit-person-btn" data-person-id="${person.id}" title="Edit">
                            <i class="fas fa-edit"></i>
                          </button>
                          <button class="text-red-600 hover:text-red-800 delete-person-btn" data-person-id="${person.id}" title="Delete">
                            <i class="fas fa-trash-alt"></i>
                          </button>
                        </td>
                      </tr>
                    `).join('') : '<tr><td colspan="5" class="px-6 py-4 text-center text-gray-500">No personnel data available</td></tr>'}
                  </tbody>
                </table>
              </div>
            </div>
          `;
          
          // Add event listeners
          if (allPersonnel.length > 0) {
            this.addPersonnelEventListeners(allPersonnel);
          }
          
          // Reset loading state
          tabContent.dataset.loading = 'false';
          
          console.log('Personnel content loaded successfully');
        } catch (error) {
          console.error('Error loading personnel:', error);
          
          tabContent.innerHTML = `
            <div class="p-8 text-center">
              <div class="text-red-500 text-xl mb-4">
                <i class="fas fa-exclamation-triangle mr-2"></i> 
                Error loading Personnel
              </div>
              <p class="mb-4">${error.message || 'An unknown error occurred'}</p>
              <button class="px-4 py-2 bg-blue-600 text-white rounded" onclick="ui.switchTab('personnel')">
                <i class="fas fa-sync-alt mr-2"></i> Try Again
              </button>
            </div>
          `;
          
          // Reset loading state
          tabContent.dataset.loading = 'false';
        }
      }, 150); // Slightly longer delay for better reliability
    } catch (error) {
      console.error('Critical error in loadPersonnel:', error);
      
      const tabContent = document.getElementById('tabContent');
      if (tabContent) {
        tabContent.innerHTML = `
          <div class="p-8 text-center">
            <div class="text-red-500 text-xl mb-4">
              <i class="fas fa-exclamation-triangle mr-2"></i> 
              Critical Error Loading Personnel
            </div>
            <p class="mb-4">${error.message || 'An unknown error occurred'}</p>
            <button class="px-4 py-2 bg-blue-600 text-white rounded" onclick="location.reload()">
              <i class="fas fa-sync-alt mr-2"></i> Refresh Page
            </button>
          </div>
        `;
        
        // Reset loading state
        tabContent.dataset.loading = 'false';
      }
    }
  },

  // Add a helper method for personnel event listeners
  addPersonnelEventListeners(personnelList) {
    // Add search functionality
    const searchInput = document.getElementById('personnelSearch');
    if (searchInput) {
      searchInput.addEventListener('input', (e) => {
        const value = e.target.value.toLowerCase();
        const rows = document.querySelectorAll('tbody tr');
        
        rows.forEach(row => {
          const text = row.textContent.toLowerCase();
          row.style.display = text.includes(value) ? '' : 'none';
        });
      });
    }
    
    // Add person button
    const addPersonBtn = document.getElementById('addPersonBtn');
    if (addPersonBtn) {
      addPersonBtn.addEventListener('click', () => {
        // Check if teams exist before adding a person
        if (window.appData.teams && window.appData.teams.length > 0) {
          this.showAddPersonModal();
        } else {
          this.showToast('You need to create a team first before adding personnel', 'warning');
        }
      });
    }
    
    // Edit person buttons
    const editBtns = document.querySelectorAll('.edit-person-btn');
    editBtns.forEach(btn => {
      const personId = parseInt(btn.getAttribute('data-person-id'));
      btn.addEventListener('click', () => {
        // Find the person in the personnel list
        const person = personnelList.find(p => p.id === personId);
        if (person) {
          this.editPersonnel(personId);
        }
      });
    });
    
    // Delete person buttons
    const deleteBtns = document.querySelectorAll('.delete-person-btn');
    deleteBtns.forEach(btn => {
      const personId = parseInt(btn.getAttribute('data-person-id'));
      btn.addEventListener('click', () => {
        // Find the team that contains this person
        const team = window.appData.teams.find(t => 
          t.personnel && t.personnel.some(p => p.id === personId)
        );
        
        if (team) {
          this.removePersonnel(personId, team.id);
        }
      });
    });
  },

  // Helper function to show add person modal
  showAddPersonModal() {
    try {
      const teams = window.appData?.teams || [];
      
      if (teams.length === 0) {
        this.showToast('You need to create a team first before adding personnel', 'warning');
        return;
      }
      
      const modal = document.createElement('div');
      modal.className = 'modal';
      modal.innerHTML = `
        <div class="modal-content">
          <h2 class="text-xl font-semibold mb-4">Add New Person</h2>
          <form id="addPersonForm">
            <div class="form-group">
              <label for="personName">Name</label>
              <input type="text" id="personName" required>
            </div>
            <div class="form-group">
              <label for="personRole">Role</label>
              <input type="text" id="personRole" required>
            </div>
            <div class="form-group">
              <label for="personClient">Client</label>
              <input type="text" id="personClient" required>
            </div>
            <div class="form-group">
              <label for="personTeam">Team</label>
              <select id="personTeam" required>
                ${teams.map(team => `<option value="${team.id}">${team.name || 'Team #' + team.id}</option>`).join('')}
              </select>
            </div>
            <div class="flex justify-end space-x-2 mt-4">
              <button type="button" class="btn-secondary" onclick="ui.hideModal()">Cancel</button>
              <button type="submit" class="btn-primary">Add Person</button>
            </div>
          </form>
        </div>
      `;
      document.body.appendChild(modal);
      
      const form = modal.querySelector('#addPersonForm');
      if (form) {
        form.addEventListener('submit', (e) => {
          e.preventDefault();
          
          try {
            const teamId = parseInt(form.querySelector('#personTeam').value);
            const team = teams.find(t => t.id === teamId);
            
            if (team) {
              const personId = Date.now();
              const newPerson = {
                id: personId,
                name: form.querySelector('#personName').value,
                role: form.querySelector('#personRole').value,
                client: form.querySelector('#personClient').value
              };
              
              if (!team.personnel) {
                team.personnel = [];
              }
              
              team.personnel.push(newPerson);
              this.saveChanges();
              this.hideModal();
              this.showToast('Person added successfully', 'success');
              this.loadPersonnel();
            } else {
              this.showToast('Selected team not found', 'error');
            }
          } catch (formError) {
            console.error('Error adding person:', formError);
            this.showToast('Error adding person: ' + (formError.message || 'Unknown error'), 'error');
          }
        });
      }
    } catch (error) {
      console.error('Error showing add person modal:', error);
      this.showToast('Could not open add person form', 'error');
    }
  },
  
  // Load dashboard content
  loadDashboard() {
    try {
      console.log('Loading dashboard content...');
      
      const tabContent = document.getElementById('tabContent');
      if (!tabContent) {
        console.error('Tab content element not found');
        return;
      }
      
      // If dashboard is already loading, don't try to load it again
      if (tabContent.dataset.loading === 'true' && tabContent.dataset.currentTab === 'dashboard') {
        console.log('Dashboard already loading, skipping duplicate load request');
        return;
      }
      
      // Set loading state
      tabContent.dataset.loading = 'true';
      tabContent.dataset.currentTab = 'dashboard';
      
      // Calculate statistics once and reuse
      const stats = this.calculateStats();
      
      // Create Dashboard HTML with optimized template structure
      const dashboardHTML = `
        <div class="p-4">
          <h2 class="text-2xl font-bold mb-6">Dashboard</h2>
          
          <!-- Statistics Cards -->
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-8">
            ${this.createStatCard('BBV Stream', stats.bbv.personnel, stats.bbv.teams, 'blue', 'teams', 'bbv')}
            ${this.createStatCard('ADD Stream', stats.add.personnel, stats.add.teams, 'red', 'teams', 'add')}
            ${this.createStatCard('ARB Stream', stats.arb.personnel, stats.arb.teams, 'purple', 'teams', 'arb')}
            ${this.createStatCard('Shared Services', stats.shared.personnel, stats.shared.teams, 'gray', 'teams', 'shared')}
          </div>
          
          <!-- Charts and Activity Section -->
          <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <!-- Personnel Distribution Chart -->
            <div class="bg-white p-4 rounded-lg shadow lg:col-span-1 cursor-pointer" onclick="ui.switchTab('personnel')">
              <h3 class="font-semibold mb-4">Personnel Distribution</h3>
              <div class="chart-container" style="position: relative; height: 220px;">
                <canvas id="personnelChart"></canvas>
              </div>
            </div>
            
            <!-- Team Performance Chart -->
            <div class="bg-white p-4 rounded-lg shadow lg:col-span-2 cursor-pointer" onclick="ui.switchTab('teams')">
              <h3 class="font-semibold mb-4">Team Performance</h3>
              <div class="chart-container" style="position: relative; height: 220px;">
                <canvas id="performanceChart"></canvas>
              </div>
            </div>
            
            <!-- Recent Activities -->
            <div class="bg-white p-4 rounded-lg shadow cursor-pointer" onclick="ui.showAllActivities()">
              <div class="flex justify-between items-center mb-4">
                <h3 class="font-semibold">Recent Activities</h3>
                <button class="text-blue-600 text-sm hover:text-blue-800" id="viewAllActivitiesBtn">
                  View All
                </button>
              </div>
              <div class="activities-container">
                ${this.renderRecentActivities()}
              </div>
            </div>
            
            <!-- Upcoming Tasks -->
            <div class="bg-white p-4 rounded-lg shadow lg:col-span-2 cursor-pointer" onclick="ui.switchTab('planning')">
              <div class="flex justify-between items-center mb-4">
                <h3 class="font-semibold">Upcoming Tasks</h3>
                <button class="text-blue-600 text-sm hover:text-blue-800" id="viewAllTasksBtn">
                  View All
                </button>
              </div>
              <div class="tasks-container">
                ${this.renderUpcomingTasks()}
              </div>
            </div>
          </div>
        </div>
      `;
      
      // Set content
      tabContent.innerHTML = dashboardHTML;
      
      // Initialize charts after content is loaded
      this.initializeCharts();
      
      // Add event listeners for dashboard actions
      document.getElementById('viewAllActivitiesBtn')?.addEventListener('click', (e) => {
        e.stopPropagation(); // Prevent parent div click
        this.showAllActivities();
      });
      document.getElementById('viewAllTasksBtn')?.addEventListener('click', (e) => {
        e.stopPropagation(); // Prevent parent div click
        this.switchTab('planning');
      });
      
      // Reset loading state
      tabContent.dataset.loading = 'false';
      
      console.log('Dashboard loaded successfully');
    } catch (error) {
      console.error('Error loading dashboard:', error);
      
      const tabContent = document.getElementById('tabContent');
      if (tabContent) {
        tabContent.innerHTML = `
          <div class="p-8 text-center">
            <div class="text-red-500 text-xl mb-4">
              <i class="fas fa-exclamation-triangle mr-2"></i> 
              Error Loading Dashboard
            </div>
            <p class="mb-4">${error.message || 'An unknown error occurred'}</p>
            <button class="px-4 py-2 bg-blue-600 text-white rounded" onclick="ui.switchTab('dashboard')">
              <i class="fas fa-sync-alt mr-2"></i> Try Again
            </button>
          </div>
        `;
        
        // Reset loading state
        tabContent.dataset.loading = 'false';
      }
    }
  },

  // Helper function to create stream statistic cards
  createStatCard(title, personnel, teams, color, navTab, filter) {
    return `
      <div class="bg-white p-4 rounded-lg shadow cursor-pointer" onclick="ui.navigateWithFilter('${navTab}', '${filter}')">
        <div class="flex items-center">
          <div class="rounded-full w-12 h-12 flex items-center justify-center bg-${color}-100 text-${color}-800">
            <i class="fas fa-users"></i>
          </div>
          <div class="ml-4">
            <h3 class="text-gray-500 text-sm">${title}</h3>
            <div class="flex items-baseline">
              <p class="text-2xl font-semibold">${personnel}</p>
              <p class="ml-2 text-sm text-gray-600">Personnel</p>
            </div>
          </div>
        </div>
        <div class="mt-2 text-xs text-gray-500">Across ${teams} teams</div>
      </div>
    `;
  },
  
  // Navigate to a tab with a filter applied
  navigateWithFilter(tab, filter) {
    // Store the filter in a session variable
    sessionStorage.setItem('activeFilter', filter);
    
    // Navigate to the tab
    this.switchTab(tab);
  },

  exportTeams() {
    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <h2 class="text-xl font-semibold mb-4">Export Teams Data</h2>
        <div class="space-y-4">
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <button class="btn-secondary p-6 text-center flex flex-col items-center justify-center" onclick="ui.exportTeamsCSV()">
              <i class="fas fa-file-csv text-3xl mb-2"></i>
              <span class="text-lg font-medium">CSV Format</span>
              <span class="text-sm text-gray-500">Export as comma-separated values</span>
            </button>
            <button class="btn-secondary p-6 text-center flex flex-col items-center justify-center" onclick="ui.exportTeamsJSON()">
              <i class="fas fa-file-code text-3xl mb-2"></i>
              <span class="text-lg font-medium">JSON Format</span>
              <span class="text-sm text-gray-500">Export as structured data</span>
            </button>
          </div>
        </div>
        <div class="flex justify-end mt-4">
          <button class="btn-secondary" onclick="ui.hideModal()">Cancel</button>
        </div>
      </div>
    `;
    document.body.appendChild(modal);
  },

  // Load role matrix
  loadRoleMatrix() {
    try {
      console.log('Loading role matrix content...');
      
      const tabContent = document.getElementById('tabContent');
      if (!tabContent) {
        console.error('Tab content element not found');
        return;
      }
      
      // Check if already loading
      if (tabContent.dataset.loading === 'true') {
        console.log('Role matrix already loading, skipping duplicate load');
        return;
      }
      
      // Set loading state
      tabContent.dataset.loading = 'true';
      
      // Create empty arrays if they don't exist
      if (!window.appData.roles) window.appData.roles = [];
      
      tabContent.innerHTML = `
        <div class="p-4">
          <div class="flex justify-between items-center mb-6">
            <h2 class="text-2xl font-bold">Role Matrix</h2>
            <div class="flex space-x-4">
              <button class="btn-secondary" id="exportRoleMatrixBtn">
                <i class="fas fa-download mr-2"></i> Export
              </button>
              <button class="btn-primary" id="addRoleBtn">
                <i class="fas fa-plus mr-2"></i> Add Role
              </button>
            </div>
          </div>

          <div class="bg-white rounded-lg shadow overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
              <thead class="bg-gray-50">
                <tr>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Role</th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Description</th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Stream</th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Personnel Count</th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                </tr>
              </thead>
              <tbody class="bg-white divide-y divide-gray-200">
                ${this.renderRoleMatrix()}
              </tbody>
            </table>
          </div>

          <div class="mt-8">
            <h3 class="text-xl font-semibold mb-4">Role Distribution by Stream</h3>
            <div class="bg-white rounded-lg shadow p-4" style="height: 300px;">
              <canvas id="roleDistributionChart"></canvas>
            </div>
          </div>
        </div>
      `;
      
      // Add event listeners
      document.getElementById('addRoleBtn')?.addEventListener('click', () => this.showAddRoleModal());
      document.getElementById('exportRoleMatrixBtn')?.addEventListener('click', () => this.exportRoleMatrix());
      
      // Initialize charts
      this.initializeRoleDistributionChart();
      
      // Reset loading state
      tabContent.dataset.loading = 'false';
    } catch (error) {
      console.error('Error loading role matrix:', error);
      this.showToast('Error loading role matrix', 'error');
      
      const tabContent = document.getElementById('tabContent');
      if (tabContent) {
        tabContent.innerHTML = `
          <div class="p-8 text-center">
            <div class="text-red-500 text-xl mb-4">
              <i class="fas fa-exclamation-triangle mr-2"></i> 
              Error Loading Role Matrix
            </div>
            <p class="mb-4">${error.message || 'An unknown error occurred'}</p>
            <button class="px-4 py-2 bg-blue-600 text-white rounded" onclick="ui.switchTab('rolematrix')">
              <i class="fas fa-sync-alt mr-2"></i> Try Again
            </button>
          </div>
        `;
        
        // Reset loading state
        tabContent.dataset.loading = 'false';
      }
    }
  },
  
  // Render role matrix table rows
  renderRoleMatrix() {
    // Get all unique roles from personnel
    const allRoles = new Map();
    
    // Extract roles from teams/personnel
    if (window.appData && window.appData.teams) {
      window.appData.teams.forEach(team => {
        if (team && team.personnel) {
          team.personnel.forEach(person => {
            if (person && person.role) {
              // If role exists, increment count, otherwise add it
              if (allRoles.has(person.role)) {
                const roleData = allRoles.get(person.role);
                roleData.count++;
                // Add the stream if it's not already in the list
                if (!roleData.streams.includes(team.stream)) {
                  roleData.streams.push(team.stream);
                }
              } else {
                allRoles.set(person.role, {
                  name: person.role,
                  description: '',
                  streams: [team.stream],
                  count: 1
                });
              }
            }
          });
        }
      });
    }
    
    // Check if we have any roles
    if (allRoles.size === 0) {
      return '<tr><td colspan="5" class="px-6 py-4 text-center text-gray-500">No roles available</td></tr>';
    }
    
    // Convert the Map to an array and sort by role name
    const roles = Array.from(allRoles.values()).sort((a, b) => a.name.localeCompare(b.name));
    
    // Create table rows
    return roles.map(role => `
      <tr>
        <td class="px-6 py-4 whitespace-nowrap font-medium">${this.sanitizeHtml(role.name)}</td>
        <td class="px-6 py-4">${role.description || 'No description available'}</td>
        <td class="px-6 py-4">
          ${role.streams.map(stream => `
            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-${stream}-100 text-${stream}-800 mr-1">
              ${stream.toUpperCase()}
            </span>
          `).join('')}
        </td>
        <td class="px-6 py-4 whitespace-nowrap">${role.count}</td>
        <td class="px-6 py-4 whitespace-nowrap">
          <button class="text-indigo-600 hover:text-indigo-900 mr-3" onclick="ui.showRoleDetails('${role.name}')">
            <i class="fas fa-eye"></i>
          </button>
          <button class="text-indigo-600 hover:text-indigo-900" onclick="ui.showRolePersonnel('${role.name}')">
            <i class="fas fa-users"></i>
          </button>
        </td>
      </tr>
    `).join('');
  },
  
  // Initialize role distribution chart
  initializeRoleDistributionChart() {
    const ctx = document.getElementById('roleDistributionChart');
    if (!ctx || typeof Chart === 'undefined') return;
    
    // Get role counts by stream
    const streamCounts = { bbv: 0, add: 0, arb: 0, shared: 0 };
    
    // Count roles per stream
    if (window.appData && window.appData.teams) {
      window.appData.teams.forEach(team => {
        if (team && team.personnel && team.stream) {
          const stream = team.stream.toLowerCase();
          if (streamCounts.hasOwnProperty(stream)) {
            // Count unique roles in this team
            const teamRoles = new Set();
            team.personnel.forEach(person => {
              if (person && person.role) {
                teamRoles.add(person.role);
              }
            });
            streamCounts[stream] += teamRoles.size;
          }
        }
      });
    }
    
    new Chart(ctx, {
      type: 'bar',
      data: {
        labels: ['BBV', 'ADD', 'ARB', 'Shared'],
        datasets: [{
          label: 'Number of Roles',
          data: [streamCounts.bbv, streamCounts.add, streamCounts.arb, streamCounts.shared],
          backgroundColor: [
            '#00518A', // BBV blue
            '#CC2030', // ADD red
            '#4F46E5', // ARB purple
            '#232323'  // Shared black
          ],
          borderColor: [
            '#00518A',
            '#CC2030',
            '#4F46E5',
            '#232323'
          ],
          borderWidth: 1
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          y: {
            beginAtZero: true
          }
        }
      }
    });
  },
  
  // Show role details modal
  showRoleDetails(roleName) {
    // Get all personnel with this role
    const personnel = [];
    
    if (window.appData && window.appData.teams) {
      window.appData.teams.forEach(team => {
        if (team && team.personnel) {
          team.personnel.forEach(person => {
            if (person && person.role === roleName) {
              personnel.push({
                ...person,
                team: team.name,
                stream: team.stream
              });
            }
          });
        }
      });
    }
    
    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <div class="flex justify-between items-center mb-4">
          <h2 class="text-xl font-semibold">${this.sanitizeHtml(roleName)}</h2>
          <button class="btn-icon" onclick="ui.hideModal()">
            <i class="fas fa-times"></i>
          </button>
        </div>
        
        <h3 class="font-medium text-lg mb-2">Personnel (${personnel.length})</h3>
        <div class="mb-4">
          ${personnel.length > 0 ? `
            <div class="bg-gray-50 rounded overflow-hidden">
              <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-100">
                  <tr>
                    <th scope="col" class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Name</th>
                    <th scope="col" class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Team</th>
                    <th scope="col" class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Stream</th>
                  </tr>
                </thead>
                <tbody>
                  ${personnel.map(person => `
                    <tr>
                      <td class="px-4 py-2 whitespace-nowrap">${this.sanitizeHtml(person.name)}</td>
                      <td class="px-4 py-2 whitespace-nowrap">${this.sanitizeHtml(person.team)}</td>
                      <td class="px-4 py-2 whitespace-nowrap">
                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-${person.stream}-100 text-${person.stream}-800">
                          ${person.stream.toUpperCase()}
                        </span>
                      </td>
                    </tr>
                  `).join('')}
                </tbody>
              </table>
            </div>
          ` : '<p class="text-gray-500">No personnel found with this role</p>'}
        </div>
        
        <div class="flex justify-end">
          <button class="btn-secondary" onclick="ui.hideModal()">Close</button>
        </div>
      </div>
    `;
    
    document.body.appendChild(modal);
  },
  
  // Export role matrix as CSV
  exportRoleMatrix() {
    // Get all roles
    const allRoles = new Map();
    
    if (window.appData && window.appData.teams) {
      window.appData.teams.forEach(team => {
        if (team && team.personnel) {
          team.personnel.forEach(person => {
            if (person && person.role) {
              if (allRoles.has(person.role)) {
                const roleData = allRoles.get(person.role);
                roleData.count++;
                if (!roleData.streams.includes(team.stream)) {
                  roleData.streams.push(team.stream);
                }
              } else {
                allRoles.set(person.role, {
                  name: person.role,
                  description: '',
                  streams: [team.stream],
                  count: 1
                });
              }
            }
          });
        }
      });
    }
    
    // Convert to array
    const roles = Array.from(allRoles.values());
    
    // Create CSV content
    let csvContent = "data:text/csv;charset=utf-8,";
    csvContent += "Role,Description,Streams,Personnel Count\n";
    
    roles.forEach(role => {
      csvContent += `"${role.name}","${role.description}","${role.streams.join(', ')}",${role.count}\n`;
    });
    
    // Create download link
    const encodedUri = encodeURI(csvContent);
    const link = document.createElement("a");
    link.setAttribute("href", encodedUri);
    link.setAttribute("download", "role_matrix.csv");
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
    this.showToast('Role matrix exported successfully', 'success');
  },
  
  // Add new role modal
  showAddRoleModal() {
    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <h2 class="text-xl font-semibold mb-4">Add New Role</h2>
        <form id="addRoleForm">
          <div class="form-group">
            <label for="roleName">Role Name</label>
            <input type="text" id="roleName" class="form-input" required>
          </div>
          <div class="form-group">
            <label for="roleDescription">Description</label>
            <textarea id="roleDescription" class="form-textarea" rows="3"></textarea>
          </div>
          <div class="form-group">
            <label for="roleStream">Stream</label>
            <select id="roleStream" class="form-select" required>
              <option value="bbv">BBV</option>
              <option value="add">ADD</option>
              <option value="arb">ARB</option>
              <option value="shared">Shared</option>
            </select>
          </div>
          <div class="flex justify-end space-x-2 mt-4">
            <button type="button" class="btn-secondary" onclick="ui.hideModal()">Cancel</button>
            <button type="submit" class="btn-primary">Add Role</button>
          </div>
        </form>
      </div>
    `;
    document.body.appendChild(modal);
    
    // Handle form submission
    document.getElementById('addRoleForm').addEventListener('submit', e => {
      e.preventDefault();
      
      // Get form values
      const roleName = document.getElementById('roleName').value;
      const roleDescription = document.getElementById('roleDescription').value;
      const roleStream = document.getElementById('roleStream').value;
      
      // Create role object
      const role = {
        name: roleName,
        description: roleDescription,
        stream: roleStream
      };
      
      // Add to roles array if it doesn't exist
      if (!window.appData.roles) window.appData.roles = [];
      window.appData.roles.push(role);
      
      // Save changes
      this.saveChanges();
      
      // Hide modal
      this.hideModal();
      
      // Show success message
      this.showToast('Role added successfully', 'success');
      
      // Reload tab
      this.loadRoleMatrix();
    });
  },
  
  // Load skills matrix
  loadSkillsMatrix() {
    try {
      console.log('Loading skills matrix content...');
      
      const tabContent = document.getElementById('tabContent');
      if (!tabContent) {
        console.error('Tab content element not found');
        return;
      }
      
      // Check if already loading
      if (tabContent.dataset.loading === 'true') {
        console.log('Skills matrix already loading, skipping duplicate load');
        return;
      }
      
      // Set loading state
      tabContent.dataset.loading = 'true';
      
      // Create empty arrays if they don't exist
      if (!window.appData.skills) window.appData.skills = [];
      
      // Build a list of all skills from personnel
      const allSkills = new Set();
      const personnelWithSkills = [];
      
      if (window.appData && window.appData.teams) {
        window.appData.teams.forEach(team => {
          if (team && team.personnel) {
            team.personnel.forEach(person => {
              if (person) {
                // If person has skills property, add all skill keys to the set
                if (person.skills) {
                  Object.keys(person.skills).forEach(skill => allSkills.add(skill));
                }
                
                // Add to personnel list
                personnelWithSkills.push({
                  ...person,
                  team: team.name,
                  stream: team.stream,
                  // Ensure skills property exists
                  skills: person.skills || {}
                });
              }
            });
          }
        });
      }
      
      tabContent.innerHTML = `
        <div class="p-4">
          <div class="flex justify-between items-center mb-6">
            <h2 class="text-2xl font-bold">Skills Matrix</h2>
            <div class="flex space-x-4">
              <button class="btn-secondary" id="exportSkillsMatrixBtn">
                <i class="fas fa-download mr-2"></i> Export
              </button>
              <button class="btn-primary" id="addSkillBtn">
                <i class="fas fa-plus mr-2"></i> Add Skill
              </button>
            </div>
          </div>
          
          <div class="bg-white rounded-lg shadow p-4 mb-6">
            <div class="flex space-x-4">
              <div class="flex-grow">
                <input type="text" id="skillsSearch" class="form-input w-full" placeholder="Search personnel or skills...">
              </div>
              <div>
                <select id="skillsStreamFilter" class="form-select">
                  <option value="all">All Streams</option>
                  <option value="bbv">BBV</option>
                  <option value="add">ADD</option>
                  <option value="arb">ARB</option>
                  <option value="shared">Shared</option>
                </select>
              </div>
            </div>
          </div>

          <div class="bg-white rounded-lg shadow overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200" id="skillsMatrixTable">
              <thead class="bg-gray-50">
                <tr>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider sticky left-0 bg-gray-50">Person</th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider sticky left-32 bg-gray-50">Team</th>
                  ${Array.from(allSkills).map(skill => `
                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">${this.sanitizeHtml(skill)}</th>
                  `).join('')}
                </tr>
              </thead>
              <tbody class="bg-white divide-y divide-gray-200">
                ${personnelWithSkills.map(person => `
                  <tr data-stream="${person.stream}">
                    <td class="px-6 py-4 whitespace-nowrap font-medium sticky left-0 bg-white">${this.sanitizeHtml(person.name)}</td>
                    <td class="px-6 py-4 whitespace-nowrap sticky left-32 bg-white">
                      <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-${person.stream}-100 text-${person.stream}-800">
                        ${this.sanitizeHtml(person.team)}
                      </span>
                    </td>
                    ${Array.from(allSkills).map(skill => {
                      const skillLevel = person.skills[skill];
                      return `
                        <td class="px-6 py-4 whitespace-nowrap">
                          ${skillLevel ? this.renderSkillLevel(skillLevel) : ''}
                        </td>
                      `;
                    }).join('')}
                  </tr>
                `).join('')}
              </tbody>
            </table>
          </div>

          <div class="mt-8">
            <h3 class="text-xl font-semibold mb-4">Skill Distribution</h3>
            <div class="bg-white rounded-lg shadow p-4" style="height: 300px;">
              <canvas id="skillDistributionChart"></canvas>
            </div>
          </div>
        </div>
      `;
      
      // Add event listeners
      document.getElementById('addSkillBtn')?.addEventListener('click', () => this.showAddSkillModal());
      document.getElementById('exportSkillsMatrixBtn')?.addEventListener('click', () => this.exportSkillsMatrix());
      document.getElementById('skillsSearch')?.addEventListener('input', this.filterSkillsMatrix);
      document.getElementById('skillsStreamFilter')?.addEventListener('change', this.filterSkillsMatrix);
      
      // Initialize charts
      this.initializeSkillDistributionChart(allSkills, personnelWithSkills);
      
      // Reset loading state
      tabContent.dataset.loading = 'false';
    } catch (error) {
      console.error('Error loading skills matrix:', error);
      this.showToast('Error loading skills matrix', 'error');
      
      const tabContent = document.getElementById('tabContent');
      if (tabContent) {
        tabContent.innerHTML = `
          <div class="p-8 text-center">
            <div class="text-red-500 text-xl mb-4">
              <i class="fas fa-exclamation-triangle mr-2"></i> 
              Error Loading Skills Matrix
            </div>
            <p class="mb-4">${error.message || 'An unknown error occurred'}</p>
            <button class="px-4 py-2 bg-blue-600 text-white rounded" onclick="ui.switchTab('skillsmatrix')">
              <i class="fas fa-sync-alt mr-2"></i> Try Again
            </button>
          </div>
        `;
        
        // Reset loading state
        tabContent.dataset.loading = 'false';
      }
    }
  },
  
  // Render skill level indicator
  renderSkillLevel(level) {
    // Convert level to a number between 1-5 if it's not already
    let numLevel = level;
    if (typeof level === 'string') {
      // Try to parse as a number
      const parsed = parseInt(level);
      if (!isNaN(parsed)) {
        numLevel = parsed;
      } else {
        // Map string levels to numbers
        const levelMap = {
          'beginner': 1,
          'basic': 2,
          'intermediate': 3,
          'advanced': 4,
          'expert': 5
        };
        numLevel = levelMap[level.toLowerCase()] || 3;
      }
    }
    
    // Ensure level is between 1-5
    numLevel = Math.min(5, Math.max(1, numLevel));
    
    // Color based on level
    const colors = [
      '',
      'bg-gray-200', // Level 1
      'bg-blue-200', // Level 2
      'bg-green-200', // Level 3
      'bg-yellow-200', // Level 4
      'bg-red-200' // Level 5
    ];
    
    // Text based on level
    const texts = [
      '',
      'Beginner',
      'Basic',
      'Intermediate',
      'Advanced',
      'Expert'
    ];
    
    // Create dots to represent skill level
    let dots = '';
    for (let i = 1; i <= 5; i++) {
      dots += `<div class="h-2 w-2 rounded-full ${i <= numLevel ? 'bg-blue-600' : 'bg-gray-200'} mr-0.5"></div>`;
    }
    
    return `
      <div class="flex flex-col">
        <div class="flex items-center">
          ${dots}
        </div>
        <div class="text-xs text-gray-500 mt-1">${texts[numLevel]}</div>
      </div>
    `;
  },
  
  // Initialize skill distribution chart
  initializeSkillDistributionChart(allSkills, personnel) {
    const ctx = document.getElementById('skillDistributionChart');
    if (!ctx || typeof Chart === 'undefined' || allSkills.size === 0) return;
    
    // Count how many people have each skill
    const skillCounts = {};
    Array.from(allSkills).forEach(skill => {
      skillCounts[skill] = 0;
    });
    
    // Count skills
    personnel.forEach(person => {
      if (person.skills) {
        Object.keys(person.skills).forEach(skill => {
          if (skillCounts.hasOwnProperty(skill)) {
            skillCounts[skill]++;
          }
        });
      }
    });
    
    // Sort skills by count (descending)
    const sortedSkills = Object.keys(skillCounts).sort((a, b) => skillCounts[b] - skillCounts[a]);
    
    // Get top 10 skills
    const topSkills = sortedSkills.slice(0, 10);
    
    new Chart(ctx, {
      type: 'bar',
      data: {
        labels: topSkills,
        datasets: [{
          label: 'Number of Personnel',
          data: topSkills.map(skill => skillCounts[skill]),
          backgroundColor: '#3b82f6',
          borderColor: '#2563eb',
          borderWidth: 1
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          y: {
            beginAtZero: true
          }
        }
      }
    });
  },
  
  // Filter skills matrix
  filterSkillsMatrix() {
    const searchInput = document.getElementById('skillsSearch').value.toLowerCase();
    const streamFilter = document.getElementById('skillsStreamFilter').value;
    
    const table = document.getElementById('skillsMatrixTable');
    if (!table) return;
    
    const rows = table.querySelectorAll('tbody tr');
    
    rows.forEach(row => {
      const stream = row.getAttribute('data-stream');
      const text = row.textContent.toLowerCase();
      
      // Check if row matches search and stream filter
      const matchesSearch = searchInput === '' || text.includes(searchInput);
      const matchesStream = streamFilter === 'all' || stream === streamFilter;
      
      // Show/hide row based on filters
      row.style.display = matchesSearch && matchesStream ? '' : 'none';
    });
  },
  
  // Export skills matrix as CSV
  exportSkillsMatrix() {
    // Build a list of all skills and personnel
    const allSkills = new Set();
    const personnelWithSkills = [];
    
    if (window.appData && window.appData.teams) {
      window.appData.teams.forEach(team => {
        if (team && team.personnel) {
          team.personnel.forEach(person => {
            if (person) {
              // If person has skills property, add all skill keys to the set
              if (person.skills) {
                Object.keys(person.skills).forEach(skill => allSkills.add(skill));
              }
              
              // Add to personnel list
              personnelWithSkills.push({
                ...person,
                team: team.name,
                stream: team.stream,
                // Ensure skills property exists
                skills: person.skills || {}
              });
            }
          });
        }
      });
    }
    
    // Create CSV content
    let csvContent = "data:text/csv;charset=utf-8,";
    
    // Add header row
    csvContent += `"Name","Team","Stream"${Array.from(allSkills).map(skill => `,"${skill}"`).join('')}\n`;
    
    // Add rows for each person
    personnelWithSkills.forEach(person => {
      csvContent += `"${person.name}","${person.team}","${person.stream}"`;
      
      // Add skill levels
      Array.from(allSkills).forEach(skill => {
        const level = person.skills[skill] || '';
        csvContent += `,"${level}"`;
      });
      
      csvContent += '\n';
    });
    
    // Create download link
    const encodedUri = encodeURI(csvContent);
    const link = document.createElement("a");
    link.setAttribute("href", encodedUri);
    link.setAttribute("download", "skills_matrix.csv");
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
    this.showToast('Skills matrix exported successfully', 'success');
  },
  
  // Add skill modal
  showAddSkillModal() {
    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <h2 class="text-xl font-semibold mb-4">Add New Skill</h2>
        <form id="addSkillForm">
          <div class="form-group">
            <label for="skillName">Skill Name</label>
            <input type="text" id="skillName" class="form-input" required>
          </div>
          <div class="form-group">
            <label for="skillCategory">Category</label>
            <select id="skillCategory" class="form-select">
              <option value="technical">Technical</option>
              <option value="business">Business</option>
              <option value="soft">Soft Skills</option>
              <option value="quality">Quality</option>
              <option value="other">Other</option>
            </select>
          </div>
          <div class="form-group">
            <label for="skillDescription">Description</label>
            <textarea id="skillDescription" class="form-textarea" rows="3"></textarea>
          </div>
          <div class="flex justify-end space-x-2 mt-4">
            <button type="button" class="btn-secondary" onclick="ui.hideModal()">Cancel</button>
            <button type="submit" class="btn-primary">Add Skill</button>
          </div>
        </form>
      </div>
    `;
    document.body.appendChild(modal);
    
    // Handle form submission
    document.getElementById('addSkillForm').addEventListener('submit', e => {
      e.preventDefault();
      
      // Get form values
      const skillName = document.getElementById('skillName').value;
      const skillCategory = document.getElementById('skillCategory').value;
      const skillDescription = document.getElementById('skillDescription').value;
      
      // Create skill object
      const skill = {
        id: Date.now(), // Use timestamp as ID
        name: skillName,
        category: skillCategory,
        description: skillDescription
      };
      
      // Add to skills array
      if (!window.appData.skills) window.appData.skills = [];
      window.appData.skills.push(skill);
      
      // Save changes
      this.saveChanges();
      
      // Hide modal
      this.hideModal();
      
      // Show success message
      this.showToast('Skill added successfully', 'success');
      
      // Reload tab
      this.loadSkillsMatrix();
    });
  },
  
  // Add a new method to load analytics dashboard
  loadAnalyticsDashboard() {
    try {
      console.log('Loading analytics dashboard...');
      
      const tabContent = document.getElementById('tabContent');
      if (!tabContent) {
        console.error('Tab content element not found');
        return;
      }
      
      // Check if already loading
      if (tabContent.dataset.loading === 'true') {
        console.log('Analytics dashboard already loading, skipping duplicate load');
        return;
      }
      
      // Set loading state
      tabContent.dataset.loading = 'true';
      
      // Get analytics data
      const analytics = data.getAnalytics();
      const metrics = analytics.metrics || {};
      const latestReport = data.getLatestReport();
      
      // Create dashboard HTML
      tabContent.innerHTML = `
        <div class="p-4">
          <div class="flex justify-between items-center mb-6">
            <div>
              <h2 class="text-2xl font-semibold">Analytics Dashboard</h2>
              <p class="text-gray-600 mt-1">Organization performance metrics and insights</p>
            </div>
            <div class="flex space-x-4">
              <button id="refreshAnalyticsBtn" class="btn-outline">
                <i class="fas fa-sync-alt mr-2"></i> Refresh
              </button>
              <button id="exportAnalyticsBtn" class="btn-primary">
                <i class="fas fa-download mr-2"></i> Export Report
              </button>
            </div>
          </div>
          
          <!-- Last Updated -->
          <div class="text-sm text-gray-500 mb-4">
            Last updated: ${new Date(analytics.lastUpdate).toLocaleString()}
          </div>
          
          <!-- Key Metrics Cards -->
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-8">
            <div class="bg-white p-4 rounded-lg shadow">
              <h3 class="text-sm font-medium text-gray-500">Total Teams</h3>
              <p class="text-3xl font-bold">${metrics.totalTeams || 0}</p>
              <p class="text-sm text-gray-500 mt-1">
                <span class="font-medium text-green-600">
                  <i class="fas fa-plus mr-1"></i>${metrics.teamsCreatedThisMonth || 0}
                </span> 
                created this month
              </p>
            </div>
            
            <div class="bg-white p-4 rounded-lg shadow">
              <h3 class="text-sm font-medium text-gray-500">Total Personnel</h3>
              <p class="text-3xl font-bold">${metrics.totalPersonnel || 0}</p>
              <p class="text-sm text-gray-500 mt-1">
                Avg ${(metrics.averageTeamSize || 0).toFixed(1)} per team
              </p>
            </div>
            
            <div class="bg-white p-4 rounded-lg shadow">
              <h3 class="text-sm font-medium text-gray-500">Active Teams</h3>
              <p class="text-3xl font-bold">${metrics.activeTeams || 0}</p>
              <p class="text-sm text-gray-500 mt-1">
                ${metrics.totalTeams ? ((metrics.activeTeams / metrics.totalTeams) * 100).toFixed(0) : 0}% activity rate
              </p>
            </div>
            
            <div class="bg-white p-4 rounded-lg shadow">
              <h3 class="text-sm font-medium text-gray-500">Streams</h3>
              <p class="text-3xl font-bold">${metrics.streamDistribution ? Object.keys(metrics.streamDistribution).length : 0}</p>
              <p class="text-sm text-gray-500 mt-1">
                Active distribution
              </p>
            </div>
          </div>
          
          <!-- Charts Section -->
          <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
            <!-- Stream Distribution Chart -->
            <div class="bg-white p-4 rounded-lg shadow">
              <h3 class="font-semibold mb-4">Stream Distribution</h3>
              <div style="height: 300px;">
                <canvas id="streamDistributionChart"></canvas>
              </div>
            </div>
            
            <!-- Client Distribution Chart -->
            <div class="bg-white p-4 rounded-lg shadow">
              <h3 class="font-semibold mb-4">Client Distribution</h3>
              <div style="height: 300px;">
                <canvas id="clientDistributionChart"></canvas>
              </div>
            </div>
          </div>
        </div>
      `;
      
      // Add event listeners
      document.getElementById('refreshAnalyticsBtn')?.addEventListener('click', () => {
        data.updateAnalytics();
        this.loadAnalyticsDashboard();
        this.showToast('Analytics refreshed', 'success');
      });
      
      document.getElementById('exportAnalyticsBtn')?.addEventListener('click', () => {
        data.exportToCSV('analytics');
        this.showToast('Analytics report exported', 'success');
      });
      
      // Initialize charts
      this.initializeAnalyticsCharts(metrics);
      
      // Reset loading state
      tabContent.dataset.loading = 'false';
      
      console.log('Analytics dashboard loaded successfully');
    } catch (error) {
      console.error('Error loading analytics dashboard:', error);
      
      const tabContent = document.getElementById('tabContent');
      if (tabContent) {
        tabContent.innerHTML = `
          <div class="p-8 text-center">
            <div class="text-red-500 text-xl mb-4">
              <i class="fas fa-exclamation-triangle mr-2"></i> 
              Error Loading Analytics
            </div>
            <p class="mb-4">${error.message || 'An unknown error occurred'}</p>
            <button class="px-4 py-2 bg-blue-600 text-white rounded" 
                    onclick="ui.loadAnalyticsDashboard()">
              <i class="fas fa-sync-alt mr-2"></i> Try Again
            </button>
          </div>
        `;
        
        // Reset loading state
        tabContent.dataset.loading = 'false';
      }
    }
  },
  
  // Initialize analytics charts
  initializeAnalyticsCharts(metrics) {
    // Check if Chart.js is available
    if (typeof Chart === 'undefined' || window.chartFailed) {
      console.warn('Chart.js is not loaded, analytics charts will not be displayed');
      return;
    }
    
    try {
      // Stream Distribution Chart
      const streamCtx = document.getElementById('streamDistributionChart');
      if (streamCtx && metrics.streamDistribution) {
        const streams = Object.keys(metrics.streamDistribution);
        const streamData = streams.map(stream => metrics.streamDistribution[stream]);
        
        // Get colors based on stream
        const streamColors = streams.map(stream => {
          return window.config?.colors?.[stream] || '#ccc';
        });
        
        new Chart(streamCtx, {
          type: 'doughnut',
          data: {
            labels: streams.map(s => s.toUpperCase()),
            datasets: [{
              data: streamData,
              backgroundColor: streamColors,
              borderWidth: 1
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
              legend: {
                position: 'right'
              },
              tooltip: {
                callbacks: {
                  label: function(context) {
                    const label = context.label || '';
                    const value = context.raw || 0;
                    const total = context.dataset.data.reduce((a, b) => a + b, 0);
                    const percentage = total > 0 ? Math.round((value / total) * 100) : 0;
                    return `${label}: ${value} (${percentage}%)`;
                  }
                }
              }
            }
          }
        });
      }
      
      // Client Distribution Chart
      const clientCtx = document.getElementById('clientDistributionChart');
      if (clientCtx && metrics.clientDistribution) {
        const clients = Object.keys(metrics.clientDistribution);
        const clientData = clients.map(client => metrics.clientDistribution[client]);
        
        // Sort by count (descending)
        const combinedData = clients.map((client, index) => ({ 
          client, 
          count: clientData[index] 
        }));
        combinedData.sort((a, b) => b.count - a.count);
        
        // Take top 10 clients only
        const topClients = combinedData.slice(0, 10);
        
        new Chart(clientCtx, {
          type: 'bar',
          data: {
            labels: topClients.map(item => item.client),
            datasets: [{
              label: 'Personnel Count',
              data: topClients.map(item => item.count),
              backgroundColor: '#4F46E5',
              borderColor: '#4338CA',
              borderWidth: 1
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
              legend: {
                display: false
              }
            },
            scales: {
              y: {
                beginAtZero: true,
                ticks: {
                  precision: 0
                }
              }
            }
          }
        });
      }
    } catch (error) {
      console.error('Error initializing analytics charts:', error);
    }
  }
}}